// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: _JavaLexer.flex

package com.apkide.language.impl.java;

import com.apkide.language.api.Lexer;

import java.io.IOException;
import java.io.Reader;


@SuppressWarnings("fallthrough")
public class JavaLexer implements Lexer {

	/**
	 * This character denotes the end of file.
	 */
	public static final int YYEOF = -1;

	/**
	 * Initial size of the lookahead buffer.
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	// Lexical states.
	public static final int YYINITIAL = 0;
	public static final int PACKAGE = 2;
	public static final int IMPORT = 4;
	public static final int CLASS = 6;
	public static final int ENUM = 8;
	public static final int EXTEND = 10;
	public static final int IMPLEMENT = 12;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
			0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5
	};

	/**
	 * Top-level table for translating characters to character classes
	 */
	private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

	private static final String ZZ_CMAP_TOP_PACKED_0 =
			"\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
					"\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
					"\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
					"\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
					"\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300" +
					"\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700" +
					"\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100" +
					"\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200" +
					"\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00" +
					"\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100" +
					"\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900" +
					"\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000" +
					"\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100" +
					"\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900" +
					"\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00" +
					"\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200" +
					"\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800" +
					"\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00" +
					"\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100" +
					"\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00" +
					"\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900" +
					"\u02fe\u1f00";

	private static int[] zzUnpackcmap_top() {
		int[] result = new int[4352];
		int offset = 0;
		offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Second-level tables for translating characters to character classes
	 */
	private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

	private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
			"\11\0\1\1\1\2\1\3\1\1\1\2\16\0\4\4" +
					"\1\1\1\5\1\6\1\4\1\7\1\5\1\10\1\11" +
					"\2\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
					"\11\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" +
					"\1\32\1\33\1\32\1\34\1\35\1\34\5\7\1\36" +
					"\3\7\1\37\7\7\1\40\2\7\1\12\1\41\1\12" +
					"\1\5\1\42\1\4\1\43\1\44\1\45\1\46\1\47" +
					"\1\50\1\51\1\52\1\53\1\7\1\54\1\55\1\56" +
					"\1\57\1\60\1\61\1\7\1\62\1\63\1\64\1\65" +
					"\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\12" +
					"\1\30\6\0\1\75\32\0\2\4\4\7\4\4\1\7" +
					"\2\4\1\0\7\4\1\7\4\4\1\7\5\4\27\7" +
					"\1\4\37\7\1\4\u01ca\7\4\4\14\7\16\4\5\7" +
					"\7\4\1\7\1\4\1\7\21\4\160\0\5\7\1\4" +
					"\2\7\2\4\4\7\1\4\1\7\6\4\1\7\1\4" +
					"\3\7\1\4\1\7\1\4\24\7\1\4\123\7\1\4" +
					"\213\7\1\4\5\0\2\4\246\7\1\4\46\7\2\4" +
					"\1\7\6\4\51\7\6\4\1\7\1\4\55\0\1\4" +
					"\1\0\1\4\2\0\1\4\2\0\1\4\1\0\10\4" +
					"\33\7\4\4\4\7\15\4\6\0\5\4\1\7\4\4" +
					"\13\0\1\4\1\0\3\4\53\7\37\0\4\4\2\7" +
					"\1\0\143\7\1\4\1\7\10\0\1\4\6\0\2\7" +
					"\2\0\1\4\4\0\2\7\12\0\3\7\2\4\1\7" +
					"\17\4\1\0\1\7\1\0\36\7\33\0\2\4\131\7" +
					"\13\0\1\7\16\4\12\0\41\7\11\0\2\7\4\4" +
					"\1\7\2\4\1\0\30\7\4\0\1\7\11\0\1\7" +
					"\3\0\1\7\5\0\22\4\31\7\3\0\4\4\13\7" +
					"\65\4\25\7\1\4\22\7\13\4\61\0\66\7\3\0" +
					"\1\7\22\0\1\7\7\0\12\7\2\0\2\4\12\0" +
					"\1\4\20\7\3\0\1\4\10\7\2\4\2\7\2\4" +
					"\26\7\1\4\7\7\1\4\1\7\3\4\4\7\2\4" +
					"\1\0\1\7\7\0\2\4\2\0\2\4\3\0\1\7" +
					"\10\4\1\0\4\4\2\7\1\4\3\7\2\0\2\4" +
					"\12\0\4\7\7\4\2\7\1\4\1\0\2\4\3\0" +
					"\1\4\6\7\4\4\2\7\2\4\26\7\1\4\7\7" +
					"\1\4\2\7\1\4\2\7\1\4\2\7\2\4\1\0" +
					"\1\4\5\0\4\4\2\0\2\4\3\0\3\4\1\0" +
					"\7\4\4\7\1\4\1\7\7\4\14\0\3\7\1\0" +
					"\13\4\3\0\1\4\11\7\1\4\3\7\1\4\26\7" +
					"\1\4\7\7\1\4\2\7\1\4\5\7\2\4\1\0" +
					"\1\7\10\0\1\4\3\0\1\4\3\0\2\4\1\7" +
					"\17\4\2\7\2\0\2\4\12\0\1\4\1\7\7\4" +
					"\1\7\6\0\1\4\3\0\1\4\10\7\2\4\2\7" +
					"\2\4\26\7\1\4\7\7\1\4\2\7\1\4\5\7" +
					"\2\4\1\0\1\7\7\0\2\4\2\0\2\4\3\0" +
					"\7\4\3\0\4\4\2\7\1\4\3\7\2\0\2\4" +
					"\12\0\1\4\1\7\20\4\1\0\1\7\1\4\6\7" +
					"\3\4\3\7\1\4\4\7\3\4\2\7\1\4\1\7" +
					"\1\4\2\7\3\4\2\7\3\4\3\7\3\4\14\7" +
					"\4\4\5\0\3\4\3\0\1\4\4\0\2\4\1\7" +
					"\6\4\1\0\16\4\12\0\11\4\1\7\6\4\5\0" +
					"\10\7\1\4\3\7\1\4\27\7\1\4\20\7\3\4" +
					"\1\7\7\0\1\4\3\0\1\4\4\0\7\4\2\0" +
					"\1\4\3\7\5\4\2\7\2\0\2\4\12\0\20\4" +
					"\1\7\3\0\1\4\10\7\1\4\3\7\1\4\27\7" +
					"\1\4\12\7\1\4\5\7\2\4\1\0\1\7\7\0" +
					"\1\4\3\0\1\4\4\0\7\4\2\0\7\4\1\7" +
					"\1\4\2\7\2\0\2\4\12\0\1\4\2\7\15\4" +
					"\4\0\11\7\1\4\3\7\1\4\51\7\2\0\1\7" +
					"\7\0\1\4\3\0\1\4\4\0\1\7\5\4\3\7" +
					"\1\0\7\4\3\7\2\0\2\4\12\0\12\4\6\7" +
					"\1\4\3\0\1\4\22\7\3\4\30\7\1\4\11\7" +
					"\1\4\1\7\2\4\7\7\3\4\1\0\4\4\6\0" +
					"\1\4\1\0\1\4\10\0\6\4\12\0\2\4\2\0" +
					"\15\4\60\7\1\0\2\7\7\0\4\4\10\7\10\0" +
					"\1\4\12\0\47\4\2\7\1\4\1\7\1\4\5\7" +
					"\1\4\30\7\1\4\1\7\1\4\12\7\1\0\2\7" +
					"\11\0\1\7\2\4\5\7\1\4\1\7\1\4\6\0" +
					"\2\4\12\0\2\4\4\7\40\4\1\7\27\4\2\0" +
					"\6\4\12\0\13\4\1\0\1\4\1\0\1\4\1\0" +
					"\4\4\2\0\10\7\1\4\44\7\4\4\24\0\1\4" +
					"\2\0\5\7\13\0\1\4\44\0\11\4\1\0\71\4" +
					"\53\7\24\0\1\7\12\0\6\4\6\7\4\0\4\7" +
					"\3\0\1\7\3\0\2\7\7\0\3\7\4\0\15\7" +
					"\14\0\1\7\17\0\2\4\46\7\1\4\1\7\5\4" +
					"\1\7\2\4\53\7\1\4\115\7\1\4\4\7\2\4" +
					"\7\7\1\4\1\7\1\4\4\7\2\4\51\7\1\4" +
					"\4\7\2\4\41\7\1\4\4\7\2\4\7\7\1\4" +
					"\1\7\1\4\4\7\2\4\17\7\1\4\71\7\1\4" +
					"\4\7\2\4\103\7\2\4\3\0\40\4\20\7\20\4" +
					"\126\7\2\4\6\7\3\4\u016c\7\2\4\21\7\1\4" +
					"\32\7\5\4\113\7\3\4\13\7\7\4\15\7\1\4" +
					"\4\7\3\0\13\4\22\7\3\0\13\4\22\7\2\0" +
					"\14\4\15\7\1\4\3\7\1\4\2\0\14\4\64\7" +
					"\40\0\3\4\1\7\3\4\2\7\1\0\2\4\12\0" +
					"\41\4\4\0\1\4\12\0\6\4\131\7\7\4\5\7" +
					"\2\0\42\7\1\0\1\7\5\4\106\7\12\4\37\7" +
					"\1\4\14\0\4\4\14\0\12\4\12\0\36\7\2\4" +
					"\5\7\13\4\54\7\4\4\32\7\6\4\12\0\46\4" +
					"\27\7\5\0\4\4\65\7\12\0\1\4\35\0\2\4" +
					"\13\0\6\4\12\0\15\4\1\7\10\4\16\0\1\4" +
					"\2\0\77\4\5\0\57\7\21\0\7\7\4\4\12\0" +
					"\21\4\11\0\14\4\3\0\36\7\15\0\2\7\12\0" +
					"\54\7\16\0\14\4\44\7\24\0\10\4\12\0\3\4" +
					"\3\7\12\0\44\7\2\4\11\7\7\4\53\7\2\4" +
					"\3\7\20\4\3\0\1\4\25\0\4\7\1\0\6\7" +
					"\1\0\2\7\3\0\1\7\5\4\300\7\72\0\1\4" +
					"\5\0\26\7\2\4\6\7\2\4\46\7\2\4\6\7" +
					"\2\4\10\7\1\4\1\7\1\4\1\7\1\4\1\7" +
					"\1\4\37\7\2\4\65\7\1\4\7\7\1\4\1\7" +
					"\3\4\3\7\1\4\7\7\3\4\4\7\2\4\6\7" +
					"\4\4\15\7\5\4\3\7\1\4\7\7\16\4\5\0" +
					"\30\4\2\3\5\0\20\4\2\7\23\4\1\7\13\4" +
					"\5\0\1\4\12\0\1\4\1\7\15\4\1\7\20\4" +
					"\15\7\3\4\40\7\20\4\15\0\4\4\1\0\3\4" +
					"\14\0\21\4\1\7\4\4\1\7\2\4\12\7\1\4" +
					"\1\7\3\4\5\7\6\4\1\7\1\4\1\7\1\4" +
					"\1\7\1\4\4\7\1\4\13\7\2\4\4\7\5\4" +
					"\5\7\4\4\1\7\21\4\51\7\u0177\4\57\7\1\4" +
					"\57\7\1\4\205\7\6\4\4\7\3\0\2\7\14\4" +
					"\46\7\1\4\1\7\5\4\1\7\2\4\70\7\7\4" +
					"\1\7\17\4\1\0\27\7\11\4\7\7\1\4\7\7" +
					"\1\4\7\7\1\4\7\7\1\4\7\7\1\4\7\7" +
					"\1\4\7\7\1\4\7\7\1\4\40\0\57\4\1\7" +
					"\325\4\3\7\31\4\11\7\6\0\1\4\5\7\2\4" +
					"\5\7\4\4\126\7\2\4\2\0\2\4\3\7\1\4" +
					"\132\7\1\4\4\7\5\4\53\7\1\4\136\7\21\4" +
					"\40\7\60\4\320\7\100\4\375\7\3\4\215\7\103\4" +
					"\56\7\2\4\15\7\3\4\20\7\12\0\2\7\24\4" +
					"\57\7\1\0\4\4\12\0\1\4\37\7\2\0\120\7" +
					"\2\0\45\4\11\7\2\4\147\7\2\4\65\7\2\4" +
					"\11\7\52\4\15\7\1\0\3\7\1\0\4\7\1\0" +
					"\27\7\5\0\4\4\1\0\13\4\1\7\7\4\64\7" +
					"\14\4\2\0\62\7\22\0\12\4\12\0\6\4\22\0" +
					"\6\7\3\4\1\7\1\4\2\7\13\0\34\7\10\0" +
					"\2\4\27\7\15\0\14\4\35\7\3\4\4\0\57\7" +
					"\16\0\16\4\1\7\12\0\6\4\5\7\1\0\12\7" +
					"\12\0\5\7\1\4\51\7\16\0\11\4\3\7\1\0" +
					"\10\7\2\0\2\4\12\0\6\4\27\7\3\4\1\7" +
					"\3\0\62\7\1\0\1\7\3\0\2\7\2\0\5\7" +
					"\2\0\1\7\1\0\1\7\30\4\3\7\2\4\13\7" +
					"\5\0\2\4\3\7\2\0\12\4\6\7\2\4\6\7" +
					"\2\4\6\7\11\4\7\7\1\4\7\7\1\4\53\7" +
					"\1\4\16\7\6\4\163\7\10\0\1\4\2\0\2\4" +
					"\12\0\6\4\244\7\14\4\27\7\4\4\61\7\4\4" +
					"\u0100\3\156\7\2\4\152\7\46\4\7\7\14\4\5\7" +
					"\5\4\1\7\1\0\12\7\1\4\15\7\1\4\5\7" +
					"\1\4\1\7\1\4\2\7\1\4\2\7\1\4\154\7" +
					"\41\4\153\7\22\4\100\7\2\4\66\7\50\4\15\7" +
					"\3\4\20\0\20\4\20\0\3\4\2\7\30\4\3\7" +
					"\31\4\1\7\6\4\5\7\1\4\207\7\2\4\1\0" +
					"\4\4\1\7\13\4\12\0\7\4\32\7\4\4\1\7" +
					"\1\4\32\7\13\4\131\7\3\4\6\7\2\4\6\7" +
					"\2\4\6\7\2\4\3\7\3\4\2\7\3\4\2\7" +
					"\22\4\3\0\4\4\14\7\1\4\32\7\1\4\23\7" +
					"\1\4\2\7\1\4\17\7\2\4\16\7\42\4\173\7" +
					"\105\4\65\7\210\4\1\0\202\4\35\7\3\4\61\7" +
					"\17\4\1\0\37\4\40\7\15\4\36\7\5\4\46\7" +
					"\5\0\5\4\36\7\2\4\44\7\4\4\10\7\1\4" +
					"\5\7\52\4\236\7\2\4\12\0\6\4\44\7\4\4" +
					"\44\7\4\4\50\7\10\4\64\7\234\4\67\7\11\4" +
					"\26\7\12\4\10\7\230\4\6\7\2\4\1\7\1\4" +
					"\54\7\1\4\2\7\3\4\1\7\2\4\27\7\12\4" +
					"\27\7\11\4\37\7\101\4\23\7\1\4\2\7\12\4" +
					"\26\7\12\4\32\7\106\4\70\7\6\4\2\7\100\4" +
					"\1\7\3\0\1\4\2\0\5\4\4\0\4\7\1\4" +
					"\3\7\1\4\35\7\2\4\3\0\4\4\1\0\40\4" +
					"\35\7\3\4\35\7\43\4\10\7\1\4\34\7\2\0" +
					"\31\4\66\7\12\4\26\7\12\4\23\7\15\4\22\7" +
					"\156\4\111\7\67\4\63\7\15\4\63\7\15\4\44\7" +
					"\4\0\10\4\12\0\u0146\4\52\7\1\4\2\0\3\4" +
					"\2\7\116\4\35\7\12\4\1\7\10\4\26\7\13\0" +
					"\137\4\25\7\33\4\27\7\11\4\3\0\65\7\17\0" +
					"\37\4\12\0\17\4\4\0\55\7\13\0\2\4\1\0" +
					"\17\4\1\0\2\4\31\7\7\4\12\0\6\4\3\0" +
					"\44\7\16\0\1\4\12\0\4\4\1\7\2\0\1\7" +
					"\10\4\43\7\1\0\2\4\1\7\11\4\3\0\60\7" +
					"\16\0\4\7\4\4\4\0\1\4\14\0\1\7\1\4" +
					"\1\7\43\4\22\7\1\4\31\7\14\0\6\4\1\0" +
					"\101\4\7\7\1\4\1\7\1\4\4\7\1\4\17\7" +
					"\1\4\12\7\7\4\57\7\14\0\5\4\12\0\6\4" +
					"\4\0\1\4\10\7\2\4\2\7\2\4\26\7\1\4" +
					"\7\7\1\4\2\7\1\4\5\7\1\4\2\0\1\7" +
					"\7\0\2\4\2\0\2\4\3\0\2\4\1\7\6\4" +
					"\1\0\5\4\5\7\2\0\2\4\7\0\3\4\5\0" +
					"\213\4\65\7\22\0\4\7\5\4\12\0\4\4\1\0" +
					"\3\7\36\4\60\7\24\0\2\7\1\4\1\7\10\4" +
					"\12\0\246\4\57\7\7\0\2\4\11\0\27\4\4\7" +
					"\2\0\42\4\60\7\21\0\3\4\1\7\13\4\12\0" +
					"\46\4\53\7\15\0\1\7\7\4\12\0\66\4\33\7" +
					"\2\4\17\0\4\4\12\0\306\4\54\7\17\0\145\4" +
					"\100\7\12\0\25\4\10\7\2\4\1\7\2\4\10\7" +
					"\1\4\2\7\1\4\30\7\6\0\1\4\2\0\2\4" +
					"\4\0\1\7\1\0\1\7\2\0\14\4\12\0\106\4" +
					"\10\7\2\4\47\7\7\0\2\4\7\0\1\7\1\4" +
					"\1\7\1\0\33\4\1\7\12\0\50\7\7\0\1\7" +
					"\4\0\10\4\1\0\10\4\1\7\13\0\56\7\20\0" +
					"\3\4\1\7\42\4\71\7\7\4\11\7\1\4\45\7" +
					"\10\0\1\4\10\0\1\7\17\4\12\0\30\4\36\7" +
					"\2\4\26\0\1\4\16\0\111\4\7\7\1\4\2\7" +
					"\1\4\46\7\6\0\3\4\1\0\1\4\2\0\1\4" +
					"\7\0\1\7\1\0\10\4\12\0\6\4\6\7\1\4" +
					"\2\7\1\4\40\7\5\0\1\4\2\0\1\4\5\0" +
					"\1\7\7\4\12\0\u0136\4\23\7\4\0\271\4\1\7" +
					"\54\4\4\7\37\4\232\7\146\4\157\7\21\4\304\7" +
					"\274\4\57\7\1\4\11\0\307\4\107\7\271\4\71\7" +
					"\7\4\37\7\1\4\12\0\146\4\36\7\2\4\5\0" +
					"\13\4\60\7\7\0\11\4\4\7\14\4\12\0\11\4" +
					"\25\7\5\4\23\7\260\4\100\7\200\4\113\7\4\4" +
					"\1\0\1\7\67\0\7\4\4\0\15\7\100\4\2\7" +
					"\1\4\1\7\1\0\13\4\2\0\16\4\370\7\10\4" +
					"\326\7\52\4\11\7\367\4\37\7\61\4\3\7\21\4" +
					"\4\7\10\4\u018c\7\4\4\153\7\5\4\15\7\3\4" +
					"\11\7\7\4\12\7\3\4\2\0\1\4\4\0\301\4" +
					"\5\0\3\4\26\0\2\4\7\0\36\4\4\0\224\4" +
					"\3\0\273\4\125\7\1\4\107\7\1\4\2\7\2\4" +
					"\1\7\2\4\2\7\2\4\4\7\1\4\14\7\1\4" +
					"\1\7\1\4\7\7\1\4\101\7\1\4\4\7\2\4" +
					"\10\7\1\4\7\7\1\4\34\7\1\4\4\7\1\4" +
					"\5\7\1\4\1\7\3\4\7\7\1\4\u0154\7\2\4" +
					"\31\7\1\4\31\7\1\4\37\7\1\4\31\7\1\4" +
					"\37\7\1\4\31\7\1\4\37\7\1\4\31\7\1\4" +
					"\37\7\1\4\31\7\1\4\10\7\2\4\151\0\4\4" +
					"\62\0\10\4\1\0\16\4\1\0\26\4\5\0\1\4" +
					"\17\0\120\4\7\0\1\4\21\0\2\4\7\0\1\4" +
					"\2\0\1\4\5\0\325\4\55\7\3\4\7\0\7\7" +
					"\2\4\12\0\4\4\1\7\u0171\4\54\7\16\0\5\4" +
					"\306\7\13\4\7\0\51\4\104\7\7\0\1\7\4\4" +
					"\12\0\u0156\4\1\7\117\4\4\7\1\4\33\7\1\4" +
					"\2\7\1\4\1\7\2\4\1\7\1\4\12\7\1\4" +
					"\4\7\1\4\1\7\1\4\1\7\6\4\1\7\4\4" +
					"\1\7\1\4\1\7\1\4\1\7\1\4\3\7\1\4" +
					"\2\7\1\4\1\7\2\4\1\7\1\4\1\7\1\4" +
					"\1\7\1\4\1\7\1\4\1\7\1\4\2\7\1\4" +
					"\1\7\2\4\4\7\1\4\7\7\1\4\4\7\1\4" +
					"\4\7\1\4\1\7\1\4\12\7\1\4\21\7\5\4" +
					"\3\7\1\4\5\7\1\4\21\7\u0134\4\12\0\6\4" +
					"\336\7\42\4\65\7\13\4\336\7\2\4\u0182\7\16\4" +
					"\u0131\7\37\4\36\7\342\4\113\7\266\4\1\0\36\4" +
					"\140\0\200\4\360\0\20\4";

	private static int[] zzUnpackcmap_blocks() {
		int[] result = new int[31232];
		int offset = 0;
		offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
			"\1\0\2\1\2\0\1\2\2\3\1\4\1\5\1\6" +
					"\1\4\1\5\1\7\2\4\1\7\1\4\2\5\3\4" +
					"\1\3\20\6\1\4\1\1\1\3\1\10\1\11\1\1" +
					"\1\12\1\13\1\2\3\5\1\0\1\5\2\14\3\5" +
					"\1\2\12\6\1\15\10\6\1\15\23\6\1\1\2\16" +
					"\1\1\1\14\1\17\1\5\1\0\1\5\1\2\21\6" +
					"\1\15\24\6\1\16\1\20\1\1\1\0\2\17\1\0" +
					"\1\2\11\6\1\21\21\6\1\0\2\20\1\1\1\14" +
					"\1\0\1\2\3\6\1\22\3\6\1\15\12\6\1\15" +
					"\1\6\1\16\1\0\1\1\1\2\1\6\1\23\4\6" +
					"\1\24\7\6\1\15\1\2\1\25\3\6\1\26\4\6" +
					"\1\2\4\6\1\2\3\6\1\22\1\27";

	private static int[] zzUnpackAction() {
		int[] result = new int[249];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
			"\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2" +
					"\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0174\0\u0326\0\u0364" +
					"\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0174\0\u0516" +
					"\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706" +
					"\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6" +
					"\0\u0934\0\u0972\0\u09b0\0\u0174\0\u0174\0\u09ee\0\u0a2c\0\u0a6a" +
					"\0\u0aa8\0\u0174\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c" +
					"\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c" +
					"\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc" +
					"\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u026c" +
					"\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e" +
					"\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e" +
					"\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e" +
					"\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e" +
					"\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e" +
					"\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e" +
					"\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e" +
					"\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e" +
					"\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e" +
					"\0\u0174\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0" +
					"\0\u250e\0\u254c\0\u258a\0\u25c8\0\u026c\0\u2606\0\u2644\0\u2682" +
					"\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872" +
					"\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62" +
					"\0\u0174\0\u2aa0\0\u0174\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6" +
					"\0\u026c\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88" +
					"\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u20b2" +
					"\0\u2f78\0\u0174\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u026c\0\u30ae" +
					"\0\u30ec\0\u312a\0\u3168\0\u026c\0\u31a6\0\u31e4\0\u3222\0\u3260" +
					"\0\u329e\0\u32dc\0\u331a\0\u0972\0\u3358\0\u026c\0\u3396\0\u33d4" +
					"\0\u3412\0\u026c\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586" +
					"\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u0aa8" +
					"\0\u026c";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[249];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length() - 1;
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpacktrans();

	private static final String ZZ_TRANS_PACKED_0 =
			"\1\7\2\10\1\0\1\7\1\11\1\12\1\13\1\14" +
					"\1\15\1\16\1\11\1\17\1\16\1\20\1\21\1\22" +
					"\1\23\1\24\1\25\1\16\1\26\1\11\2\27\1\30" +
					"\7\13\1\7\1\13\1\31\1\32\1\33\1\34\1\35" +
					"\1\36\1\37\1\13\1\40\1\13\1\41\1\13\1\42" +
					"\1\13\1\43\1\44\1\45\1\46\1\13\1\47\1\50" +
					"\3\13\1\16\1\51\1\0\1\7\2\10\1\0\3\7" +
					"\1\52\10\7\1\53\3\7\1\54\5\7\7\52\1\7" +
					"\31\52\2\7\1\0\1\7\2\10\1\0\3\7\1\52" +
					"\3\7\1\27\4\7\1\53\3\7\1\55\5\7\7\52" +
					"\1\7\21\52\1\56\7\52\2\7\1\0\1\7\2\10" +
					"\1\0\3\7\1\57\10\7\1\53\11\7\7\57\1\7" +
					"\31\57\2\7\1\0\1\7\2\10\1\0\3\7\1\60" +
					"\10\7\1\53\11\7\7\60\1\7\31\60\2\7\1\0" +
					"\1\7\2\10\1\0\3\7\1\61\5\7\1\16\2\7" +
					"\1\53\4\7\1\16\1\7\1\16\2\7\7\61\1\7" +
					"\31\61\1\54\1\7\100\0\2\10\121\0\1\27\47\0" +
					"\2\12\1\0\3\12\1\62\32\12\1\63\34\12\1\13" +
					"\6\0\1\13\11\0\2\13\7\0\7\13\1\0\31\13" +
					"\2\0\1\13\10\0\1\27\15\0\1\27\47\0\2\15" +
					"\1\0\6\15\1\62\27\15\1\64\34\15\14\0\1\27" +
					"\11\0\1\27\65\0\1\27\7\0\2\27\65\0\1\65" +
					"\1\0\2\66\66\0\1\67\4\0\1\70\5\0\1\27" +
					"\66\0\1\66\1\0\2\24\10\0\1\71\1\62\1\72" +
					"\1\62\1\0\1\73\1\0\1\24\1\0\1\71\1\0" +
					"\1\62\1\72\1\62\4\0\1\62\12\0\1\73\24\0" +
					"\1\66\1\0\2\24\11\0\1\62\1\72\1\62\3\0" +
					"\1\24\3\0\1\62\1\72\1\62\4\0\1\62\43\0" +
					"\1\27\77\0\1\11\1\27\56\0\1\61\22\0\7\61" +
					"\1\0\11\61\1\74\17\61\3\0\1\13\6\0\1\13" +
					"\11\0\2\13\7\0\7\13\1\0\2\13\1\75\16\13" +
					"\1\76\7\13\2\0\2\13\6\0\1\13\11\0\2\13" +
					"\7\0\7\13\1\0\16\13\1\77\1\13\1\100\6\13" +
					"\1\101\1\13\2\0\2\13\6\0\1\13\11\0\2\13" +
					"\7\0\7\13\1\0\1\13\1\102\6\13\1\103\2\13" +
					"\1\104\2\13\1\105\12\13\2\0\2\13\6\0\1\13" +
					"\11\0\2\13\7\0\7\13\1\0\5\13\1\106\10\13" +
					"\1\107\12\13\2\0\2\13\6\0\1\13\11\0\2\13" +
					"\7\0\7\13\1\0\13\13\1\110\1\13\1\111\10\13" +
					"\1\112\2\13\2\0\2\13\6\0\1\13\11\0\2\13" +
					"\7\0\7\13\1\0\1\13\1\113\7\13\1\114\1\13" +
					"\1\115\2\13\1\116\12\13\2\0\2\13\6\0\1\13" +
					"\11\0\2\13\7\0\7\13\1\0\16\13\1\117\12\13" +
					"\2\0\2\13\6\0\1\13\11\0\2\13\7\0\7\13" +
					"\1\0\6\13\1\120\5\13\1\121\1\122\13\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\16\13\1\123\12\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\1\13\1\124\3\13\1\125" +
					"\15\13\1\126\5\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\1\13\1\127\16\13\1\130" +
					"\2\13\1\131\5\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\5\13\1\132\23\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\10\13\1\133\11\13\1\134\1\135\1\13\1\136\1\13" +
					"\1\137\1\13\2\0\2\13\6\0\1\13\11\0\2\13" +
					"\7\0\7\13\1\0\10\13\1\140\7\13\1\141\10\13" +
					"\2\0\2\13\6\0\1\13\11\0\2\13\7\0\7\13" +
					"\1\0\16\13\1\142\12\13\2\0\2\13\6\0\1\13" +
					"\11\0\2\13\7\0\7\13\1\0\10\13\1\143\20\13" +
					"\2\0\1\13\26\0\1\27\45\0\1\27\1\0\1\52" +
					"\6\0\1\52\7\0\1\144\1\0\2\52\7\0\7\52" +
					"\1\0\31\52\2\0\1\52\13\0\1\145\4\0\1\146" +
					"\55\0\1\52\6\0\1\52\7\0\1\144\1\0\2\52" +
					"\7\0\7\52\1\0\22\52\1\147\6\52\2\0\1\52" +
					"\1\57\6\0\1\57\11\0\2\57\7\0\7\57\1\0" +
					"\31\57\2\0\1\57\1\60\6\0\1\60\11\0\2\60" +
					"\7\0\7\60\1\0\31\60\2\0\1\60\1\61\6\0" +
					"\1\61\11\0\2\61\7\0\7\61\1\0\31\61\2\0" +
					"\1\61\2\12\1\0\73\12\2\15\1\0\73\15\17\0" +
					"\1\16\77\0\2\66\11\0\1\62\1\72\4\0\1\66" +
					"\3\0\1\62\1\72\1\62\25\0\13\150\1\151\62\150" +
					"\2\70\1\0\73\70\21\0\2\71\13\0\1\62\3\0" +
					"\1\71\12\0\1\62\34\0\1\152\1\0\1\152\2\0" +
					"\2\152\11\0\1\62\5\0\1\152\3\0\1\62\1\0" +
					"\1\62\44\0\1\153\1\0\2\154\7\0\4\154\1\62" +
					"\3\0\7\154\4\0\1\62\20\0\1\61\6\0\1\61" +
					"\11\0\2\61\7\0\7\61\1\0\15\61\1\155\13\61" +
					"\2\0\1\61\1\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\21\13\1\156\7\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\21\13\1\157" +
					"\7\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\16\13\1\160\12\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\5\13\1\161" +
					"\23\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\22\13\1\162\6\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\21\13\1\162" +
					"\1\163\6\13\2\0\2\13\6\0\1\13\11\0\2\13" +
					"\7\0\7\13\1\0\1\13\1\116\27\13\2\0\2\13" +
					"\6\0\1\13\11\0\2\13\7\0\7\13\1\0\1\13" +
					"\1\164\27\13\2\0\2\13\6\0\1\13\11\0\2\13" +
					"\7\0\7\13\1\0\15\13\1\165\13\13\2\0\2\13" +
					"\6\0\1\13\11\0\2\13\7\0\7\13\1\0\6\13" +
					"\1\166\22\13\2\0\2\13\6\0\1\13\11\0\2\13" +
					"\7\0\7\13\1\0\23\13\1\167\5\13\2\0\2\13" +
					"\6\0\1\13\11\0\2\13\7\0\7\13\1\0\21\13" +
					"\1\162\7\13\2\0\2\13\6\0\1\13\11\0\2\13" +
					"\7\0\7\13\1\0\23\13\1\170\5\13\2\0\2\13" +
					"\6\0\1\13\11\0\2\13\7\0\7\13\1\0\22\13" +
					"\1\171\6\13\2\0\2\13\6\0\1\13\11\0\2\13" +
					"\7\0\7\13\1\0\13\13\1\110\15\13\2\0\2\13" +
					"\6\0\1\13\11\0\2\13\7\0\7\13\1\0\15\13" +
					"\1\172\13\13\2\0\2\13\6\0\1\13\11\0\2\13" +
					"\7\0\7\13\1\0\16\13\1\173\12\13\2\0\2\13" +
					"\6\0\1\13\11\0\2\13\7\0\7\13\1\0\20\13" +
					"\1\120\10\13\2\0\2\13\6\0\1\13\11\0\2\13" +
					"\7\0\7\13\1\0\22\13\1\174\6\13\2\0\2\13" +
					"\6\0\1\13\11\0\2\13\7\0\7\13\1\0\17\13" +
					"\1\175\11\13\2\0\2\13\6\0\1\13\11\0\2\13" +
					"\7\0\7\13\1\0\21\13\1\176\1\177\6\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\15\13\1\200\13\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\22\13\1\201\6\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\25\13\1\120\3\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\13\13\1\202\15\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\3\13\1\203\25\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\11\13\1\204\4\13\1\205" +
					"\12\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\2\13\1\206\26\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\22\13\1\207" +
					"\6\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\16\13\1\210\12\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\1\13\1\211" +
					"\16\13\1\212\10\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\17\13\1\213\11\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\11\13\1\214\17\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\15\13\1\215\13\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\11\13\1\216\6\13\1\217\10\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\1\13\1\220" +
					"\21\13\1\162\3\13\1\120\1\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\11\13\1\221" +
					"\1\13\1\222\15\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\11\13\1\223\17\13\2\0" +
					"\1\13\7\0\1\52\22\0\7\52\1\0\31\52\3\0" +
					"\13\224\1\225\62\224\2\146\1\0\73\146\1\52\6\0" +
					"\1\52\7\0\1\144\1\0\2\52\7\0\7\52\1\0" +
					"\1\52\1\226\27\52\2\0\1\52\13\150\1\227\62\150" +
					"\13\230\1\151\4\230\1\231\55\230\21\0\2\152\11\0" +
					"\1\62\5\0\1\152\3\0\1\62\1\0\1\62\46\0" +
					"\2\232\7\0\4\232\4\0\7\232\44\0\1\232\1\0" +
					"\2\154\7\0\4\154\1\62\1\72\2\0\7\154\4\0" +
					"\1\62\3\0\1\72\14\0\1\61\6\0\1\61\11\0" +
					"\2\61\7\0\7\61\1\0\22\61\1\233\6\61\2\0" +
					"\1\61\1\13\6\0\1\13\11\0\2\13\7\0\7\13" +
					"\1\0\22\13\1\234\6\13\2\0\2\13\6\0\1\13" +
					"\11\0\2\13\7\0\7\13\1\0\5\13\1\235\23\13" +
					"\2\0\2\13\6\0\1\13\11\0\2\13\7\0\7\13" +
					"\1\0\13\13\1\236\15\13\2\0\2\13\6\0\1\13" +
					"\11\0\2\13\7\0\7\13\1\0\1\13\1\237\27\13" +
					"\2\0\2\13\6\0\1\13\11\0\2\13\7\0\7\13" +
					"\1\0\5\13\1\120\23\13\2\0\2\13\6\0\1\13" +
					"\11\0\2\13\7\0\7\13\1\0\3\13\1\240\25\13" +
					"\2\0\2\13\6\0\1\13\11\0\2\13\7\0\7\13" +
					"\1\0\21\13\1\241\7\13\2\0\2\13\6\0\1\13" +
					"\11\0\2\13\7\0\7\13\1\0\21\13\1\242\1\243" +
					"\6\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\1\13\1\244\27\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\2\13\1\223" +
					"\26\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\14\13\1\245\14\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\5\13\1\246" +
					"\23\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\1\13\1\247\27\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\1\13\1\242" +
					"\27\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\16\13\1\120\12\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\13\13\1\250" +
					"\2\13\1\251\12\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\22\13\1\252\6\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\5\13\1\253\23\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\7\13\1\120\21\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\11\13\1\254\17\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\13\13\1\120\15\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\12\13\1\255\16\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\24\13\1\256\4\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\22\13\1\257\6\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\13\13\1\260\15\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\23\13\1\261\5\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\20\13\1\242\10\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\22\13\1\260\6\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\11\13\1\262\17\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\5\13\1\116\23\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\22\13\1\163\6\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\3\13\1\263\25\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\21\13\1\120\7\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\16\13\1\264\12\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\15\13\1\265\13\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\4\13\1\120\24\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\1\13\1\266\27\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\13\13\1\162\15\13\2\0\1\13\13\224\1\267\62\224" +
					"\13\270\1\225\4\270\1\271\55\270\1\52\6\0\1\52" +
					"\7\0\1\144\1\0\2\52\7\0\7\52\1\0\22\52" +
					"\1\272\6\52\2\0\1\52\13\150\1\227\4\150\1\273" +
					"\55\150\13\230\1\274\62\230\21\0\2\232\7\0\4\232" +
					"\1\0\1\72\2\0\7\232\10\0\1\72\14\0\1\61" +
					"\6\0\1\61\11\0\2\61\7\0\7\61\1\0\5\61" +
					"\1\275\23\61\2\0\1\61\1\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\20\13\1\276\10\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\20\13\1\277\10\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\5\13\1\300\23\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\12\13\1\120\16\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\10\13\1\120\20\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\21\13\1\301\7\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\22\13\1\120\6\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\11\13\1\302\17\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\23\13\1\303\5\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\15\13\1\304\13\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\13\13\1\305\15\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\5\13\1\306\23\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\20\13\1\307\10\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\1\13\1\310\27\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\20\13\1\311\10\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\24\13\1\162\4\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\1\13\1\312\27\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\1\13\1\101\27\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\5\13\1\313\23\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\11\13\1\314\17\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\20\13\1\315\10\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\3\13\1\316\25\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\10\13\1\317\20\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\25\13\1\320\3\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\21\13\1\321\7\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\22\13\1\143\6\13\2\0\1\13\13\224\1\267\4\224" +
					"\1\322\55\224\13\270\1\323\62\270\1\52\6\0\1\52" +
					"\7\0\1\144\1\0\2\52\7\0\7\52\1\0\11\52" +
					"\1\324\17\52\2\0\1\52\13\230\1\274\4\230\1\231" +
					"\55\230\1\61\6\0\1\61\11\0\2\61\7\0\7\61" +
					"\1\0\20\61\1\325\10\61\2\0\1\61\1\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\1\13\1\326" +
					"\27\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\22\13\1\327\6\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\1\13\1\315" +
					"\27\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\15\13\1\330\13\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\13\13\1\242" +
					"\15\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\4\13\1\331\24\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\13\13\1\332" +
					"\15\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\14\13\1\333\14\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\22\13\1\334" +
					"\6\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\15\13\1\335\13\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\6\13\1\336" +
					"\22\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\7\13\1\337\21\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\3\13\1\340" +
					"\25\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\3\13\1\120\25\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\15\13\1\120" +
					"\13\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\22\13\1\341\6\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\20\13\1\342" +
					"\10\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\11\13\1\343\17\13\2\0\1\13\13\270" +
					"\1\323\4\270\1\271\55\270\1\52\6\0\1\52\7\0" +
					"\1\144\1\0\2\52\7\0\7\52\1\0\3\52\1\344" +
					"\25\52\2\0\1\52\1\61\6\0\1\61\11\0\2\61" +
					"\7\0\7\61\1\0\6\61\1\345\22\61\2\0\1\61" +
					"\1\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\3\13\1\242\25\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\23\13\1\162\5\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\21\13\1\346\7\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\27\13\1\120\1\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\5\13\1\347\23\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\3\13\1\350\25\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\1\13\1\351\27\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\5\13\1\352\23\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\22\13\1\353\6\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\6\13\1\354\22\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\16\13\1\355\12\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\5\13\1\356\23\13\2\0" +
					"\1\13\1\61\6\0\1\61\11\0\2\61\7\0\7\61" +
					"\1\0\1\61\1\357\27\61\2\0\1\61\1\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\15\13\1\360" +
					"\13\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\5\13\1\361\23\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\3\13\1\362" +
					"\25\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\5\13\1\221\23\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\17\13\1\120" +
					"\11\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\15\13\1\363\13\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\15\13\1\242" +
					"\13\13\2\0\1\13\1\61\6\0\1\61\11\0\2\61" +
					"\7\0\7\61\1\0\3\61\1\364\25\61\2\0\1\61" +
					"\1\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\22\13\1\365\6\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\16\13\1\366\12\13\2\0" +
					"\2\13\6\0\1\13\11\0\2\13\7\0\7\13\1\0" +
					"\5\13\1\301\23\13\2\0\2\13\6\0\1\13\11\0" +
					"\2\13\7\0\7\13\1\0\11\13\1\367\17\13\2\0" +
					"\1\13\1\61\6\0\1\61\11\0\2\61\7\0\7\61" +
					"\1\0\5\61\1\370\23\61\2\0\1\61\1\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\21\13\1\371" +
					"\7\13\2\0\2\13\6\0\1\13\11\0\2\13\7\0" +
					"\7\13\1\0\6\13\1\120\22\13\2\0\2\13\6\0" +
					"\1\13\11\0\2\13\7\0\7\13\1\0\30\13\1\353" +
					"\2\0\1\13";

	private static int[] zzUnpacktrans() {
		int[] result = new int[14198];
		int offset = 0;
		offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpacktrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Error code for "Unknown internal scanner error".
	 */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	/**
	 * Error code for "could not match input".
	 */
	private static final int ZZ_NO_MATCH = 1;
	/**
	 * Error code for "pushback value was too large".
	 */
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/**
	 * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
	 * {@link #ZZ_PUSHBACK_2BIG} respectively.
	 */
	private static final String ZZ_ERROR_MSG[] = {
			"Unknown internal scanner error",
			"Error: could not match input",
			"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
			"\1\0\2\1\2\0\1\1\1\11\6\1\1\11\10\1" +
					"\1\11\24\1\2\11\4\1\1\11\2\1\1\0\65\1" +
					"\1\0\53\1\1\0\1\1\1\11\1\0\34\1\1\0" +
					"\1\1\1\11\1\1\1\11\1\0\25\1\1\11\1\0" +
					"\46\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[249];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * Input device.
	 */
	private java.io.Reader zzReader;

	/**
	 * Current state of the DFA.
	 */
	private int zzState;

	/**
	 * Current lexical state.
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
	 * string.
	 */
	private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

	/**
	 * Text position at the last accepting state.
	 */
	private int zzMarkedPos;

	/**
	 * Current text position in the buffer.
	 */
	private int zzCurrentPos;

	/**
	 * Marks the beginning of the {@link #yytext()} string in the buffer.
	 */
	private int zzStartRead;

	/**
	 * Marks the last character in the buffer, that has been read from input.
	 */
	private int zzEndRead;

	/**
	 * Whether the scanner is at the end of file.
	 *
	 * @see #yyatEOF
	 */
	private boolean zzAtEOF;

	/**
	 * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
	 *
	 * <p>When a lead/high surrogate has been read from the input stream into the final
	 * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

	/**
	 * Number of newlines encountered up to the start of the matched text.
	 */
	private int yyline;

	/**
	 * Number of characters from the last newline up to the start of the matched text.
	 */
	private int yycolumn;

	/**
	 * Number of characters up to the start of the matched text.
	 */
	@SuppressWarnings("unused")
	private long yychar;

	/**
	 * Whether the scanner is currently at the beginning of a line.
	 */
	@SuppressWarnings("unused")
	private boolean zzAtBOL = true;

	/**
	 * Whether the user-EOF-code has already been executed.
	 */
	@SuppressWarnings("unused")
	private boolean zzEOFDone;

	/* user code: */
	private boolean myAssertKeyword;
	private boolean myEnumKeyword;

	public JavaLexer() {
		this(8);
	}

	public JavaLexer(int level) {
		this((java.io.Reader) null);
		myAssertKeyword = level >= 4;
		myEnumKeyword = level >= 5;
	}

	@Override
	public void setReader(Reader reader) {
		zzReader = reader;
	}

	@Override
	public void reset(Reader reader) {
		yyreset(reader);
	}

	@Override
	public int getState() {
		return yystate() + 1;
	}

	@Override
	public void setState(int state) {
		yybegin(state - 1);
	}

	@Override
	public int getDefaultState() {
		return YYINITIAL + 1;
	}

	@Override
	public int nextToken() throws IOException {
		return yylex();
	}

	@Override
	public int getLine() {
		return yyline;
	}

	@Override
	public int getColumn() {
		return yycolumn;
	}


	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	public JavaLexer(java.io.Reader in) {
		this.zzReader = in;
	}


	/**
	 * Returns the maximum size of the scanner buffer, which limits the size of tokens.
	 */
	private int zzMaxBufferLen() {
		return Integer.MAX_VALUE;
	}

	/**
	 * Whether the scanner buffer can grow to accommodate a larger token.
	 */
	private boolean zzCanGrow() {
		return true;
	}

	/**
	 * Translates raw input code points to DFA table row
	 */
	private static int zzCMap(int input) {
		int offset = input & 255;
		return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return {@code false} iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead,
					zzBuffer, 0,
					zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
			/* if not, and it can grow: blow it up */
			char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

		/* not supposed to occur according to specification of java.io.Reader */
		if (numRead == 0) {
			if (requested == 0) {
				throw new java.io.EOFException("Scan buffer limit reached [" + zzBuffer.length + "]");
			} else {
				throw new java.io.IOException(
						"Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
			}
		}
		if (numRead > 0) {
			zzEndRead += numRead;
			if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
				if (numRead == requested) { // We requested too few chars to encode a full Unicode character
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				} else {                    // There is room in the buffer for at least one more char
					int c = zzReader.read();  // Expecting to read a paired low surrogate char
					if (c == -1) {
						return true;
					} else {
						zzBuffer[zzEndRead++] = (char) c;
					}
				}
			}
			/* potentially more input available */
			return false;
		}

		/* numRead < 0 ==> end of stream */
		return true;
	}


	/**
	 * Closes the input reader.
	 *
	 * @throws java.io.IOException if the reader could not be closed.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; // indicate end of file
		zzEndRead = zzStartRead; // invalidate buffer

		if (zzReader != null) {
			zzReader.close();
		}
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 *
	 * <p>Does not close the old reader.
	 *
	 * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
	 * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
	 *
	 * <p>Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader The new input stream.
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzEOFDone = false;
		yyResetPosition();
		zzLexicalState = YYINITIAL;
		int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
		if (zzBuffer.length > initBufferSize) {
			zzBuffer = new char[initBufferSize];
		}
	}

	/**
	 * Resets the input position.
	 */
	private final void yyResetPosition() {
		zzAtBOL = true;
		zzAtEOF = false;
		zzCurrentPos = 0;
		zzMarkedPos = 0;
		zzStartRead = 0;
		zzEndRead = 0;
		zzFinalHighSurrogate = 0;
		yyline = 0;
		yycolumn = 0;
		yychar = 0L;
	}


	/**
	 * Returns whether the scanner has reached the end of the reader it reads from.
	 *
	 * @return whether the scanner has reached EOF.
	 */
	public final boolean yyatEOF() {
		return zzAtEOF;
	}


	/**
	 * Returns the current lexical state.
	 *
	 * @return the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state.
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 *
	 * @return the matched text.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}


	/**
	 * Returns the character at the given position from the matched text.
	 *
	 * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
	 *
	 * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
	 * @return the character at {@code position}.
	 */
	public final char yycharat(int position) {
		return zzBuffer[zzStartRead + position];
	}


	/**
	 * How many characters were matched.
	 *
	 * @return the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occurred while scanning.
	 *
	 * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen".
	 *
	 * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
	 * scanner etc.).
	 *
	 * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
	 *
	 * @param errorCode the code of the error message to display.
	 */
	private static void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * <p>They will be read again by then next call of the scanning method.
	 *
	 * @param number the number of characters to be read again. This number must not be greater than
	 *               {@link #yylength()}.
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched, the end of input is encountered
	 * or an I/O-Error occurs.
	 *
	 * @return the next token.
	 * @throws java.io.IOException if any I/O-Error occurs.
	 */
	public int yylex() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			int zzCh;
			int zzCharCount;
			for (zzCurrentPosL = zzStartRead;
				 zzCurrentPosL < zzMarkedPosL;
				 zzCurrentPosL += zzCharCount) {
				zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
				zzCharCount = Character.charCount(zzCh);
				switch (zzCh) {
					case '\u000B':  // fall through
					case '\u000C':  // fall through
					case '\u0085':  // fall through
					case '\u2028':  // fall through
					case '\u2029':
						yyline++;
						yycolumn = 0;
						zzR = false;
						break;
					case '\r':
						yyline++;
						yycolumn = 0;
						zzR = true;
						break;
					case '\n':
						if (zzR)
							zzR = false;
						else {
							yyline++;
							yycolumn = 0;
						}
						break;
					default:
						zzR = false;
						yycolumn += zzCharCount;
				}
			}

			if (zzR) {
				// peek one character ahead if it is
				// (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek) yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				{
					return YYEOF;
				}
			} else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1: {
						return NamespaceIdentifier;
					}
					// fall through
					case 24:
						break;
					case 2: {
						return TypeIdentifier;
					}
					// fall through
					case 25:
						break;
					case 3: {
						return Plain;
					}
					// fall through
					case 26:
						break;
					case 4: {
						return Operator;
					}
					// fall through
					case 27:
						break;
					case 5: {
						return Literal;
					}
					// fall through
					case 28:
						break;
					case 6: {
						return Identifier;
					}
					// fall through
					case 29:
						break;
					case 7: {
						return Separator;
					}
					// fall through
					case 30:
						break;
					case 8: {
						yybegin(YYINITIAL);
						return Separator;
					}
					// fall through
					case 31:
						break;
					case 9: {
						yybegin(YYINITIAL);
						return Separator;
					}
					// fall through
					case 32:
						break;
					case 10: {
						yybegin(YYINITIAL);
						return TypeIdentifier;
					}
					// fall through
					case 33:
						break;
					case 11: {
						yybegin(YYINITIAL);
						return myEnumKeyword ? TypeIdentifier : Plain;
					}
					// fall through
					case 34:
						break;
					case 12: {
						return Comment;
					}
					// fall through
					case 35:
						break;
					case 13: {
						return Keyword;
					}
					// fall through
					case 36:
						break;
					case 14: {
						yybegin(YYINITIAL);
						return Comment;
					}
					// fall through
					case 37:
						break;
					case 15: {
						return DocComment;
					}
					// fall through
					case 38:
						break;
					case 16: {
						yybegin(YYINITIAL);
						return DocComment;
					}
					// fall through
					case 39:
						break;
					case 17: {
						yybegin(ENUM);
						return myEnumKeyword ? Keyword : Plain;
					}
					// fall through
					case 40:
						break;
					case 18: {
						yybegin(CLASS);
						return Keyword;
					}
					// fall through
					case 41:
						break;
					case 19: {
						return myAssertKeyword ? Keyword : Plain;
					}
					// fall through
					case 42:
						break;
					case 20: {
						yybegin(IMPORT);
						return Keyword;
					}
					// fall through
					case 43:
						break;
					case 21: {
						yybegin(EXTEND);
						return Keyword;
					}
					// fall through
					case 44:
						break;
					case 22: {
						yybegin(PACKAGE);
						return Keyword;
					}
					// fall through
					case 45:
						break;
					case 23: {
						yybegin(IMPLEMENT);
						return Keyword;
					}
					// fall through
					case 46:
						break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}


}
