// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: XmlLexer.flex

package com.apkide.language.impl.xml;

import com.apkide.language.api.Lexer;

import java.io.IOException;
import java.io.Reader;



@SuppressWarnings("fallthrough")
public class XmlLexer implements Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int TAG = 2;
  public static final int PROCESSING_INSTRUCTION = 4;
  public static final int PI_ANY = 6;
  public static final int END_TAG = 8;
  public static final int COMMENT = 10;
  public static final int ATTR_LIST = 12;
  public static final int ATTR = 14;
  public static final int ATTR_VALUE_START = 16;
  public static final int ATTR_VALUE_DQ = 18;
  public static final int ATTR_VALUE_SQ = 20;
  public static final int DTD_MARKUP = 22;
  public static final int DOCTYPE = 24;
  public static final int CDATA = 26;
  public static final int C_COMMENT_START = 28;
  public static final int C_COMMENT_END = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10,  8,  8, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\2\u0100\1\u5d00\1\u5e00"+
    "\1\u5f00\1\u6000\42\u1f00\1\u0100\1\u6100\1\u6200\11\u1f00\1\u6300"+
    "\24\u1f00\1\u6400\1\u6500\1\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u1f00\1\u6a00\5\u1f00\1\u6b00\1\u6c00\1\u6d00\5\u1f00\1\u6e00"+
    "\1\u6f00\2\u1f00\1\u7000\1\u1f00\1\u7100\14\u1f00\1\u7200\4\u1f00"+
    "\246\u0100\1\u7300\20\u0100\1\u7400\1\u7500\25\u0100\1\u7600\34\u0100"+
    "\1\u7700\14\u1f00\2\u0100\1\u7800\5\u1f00\23\u5e00\1\u7900\u0aec\u1f00"+
    "\1\u7a00\1\u7b00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\2\2\1\16\0\4\2\1\1\1\3"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\2\12\3\2"+
    "\1\13\1\14\1\15\12\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\2\1\25\1\26\1\27\1\30\1\31"+
    "\1\26\10\32\1\33\1\34\3\32\1\35\4\32\1\36"+
    "\1\32\1\37\1\40\1\41\1\2\1\42\1\2\6\26"+
    "\5\32\1\43\1\44\12\32\1\45\2\32\1\46\1\12"+
    "\1\47\1\2\6\0\1\50\32\0\2\2\4\51\4\2"+
    "\1\32\2\2\1\0\7\2\1\32\4\2\1\32\5\2"+
    "\27\32\1\2\37\32\1\2\u01ca\32\4\2\14\32\16\2"+
    "\5\32\7\2\1\32\1\2\1\32\21\2\160\0\5\32"+
    "\1\2\2\32\2\2\4\32\1\2\1\32\6\2\1\32"+
    "\1\2\3\32\1\2\1\32\1\2\24\32\1\2\123\32"+
    "\1\2\213\32\1\2\5\0\2\2\246\32\1\2\46\32"+
    "\2\2\1\32\6\2\51\32\6\2\1\51\1\2\55\0"+
    "\1\2\1\0\1\2\2\0\1\2\2\0\1\2\1\0"+
    "\10\2\33\32\4\2\4\32\15\2\6\0\5\2\1\51"+
    "\4\2\13\0\1\2\1\0\3\2\53\32\37\0\4\2"+
    "\2\32\1\0\143\32\1\2\1\32\10\0\1\2\6\0"+
    "\2\32\2\0\1\2\4\0\2\32\12\0\3\32\2\2"+
    "\1\32\17\2\1\0\1\32\1\0\36\32\33\0\2\2"+
    "\131\32\13\0\1\32\16\2\12\0\41\32\11\0\2\32"+
    "\4\2\1\32\2\2\1\0\2\51\26\32\4\0\1\32"+
    "\11\0\1\32\3\0\1\32\5\0\22\2\31\32\3\0"+
    "\4\2\13\32\65\2\25\32\1\2\10\32\12\51\13\2"+
    "\61\0\66\32\3\0\1\32\22\0\1\32\7\0\12\32"+
    "\2\0\2\2\12\0\1\2\20\32\3\0\1\2\10\32"+
    "\2\2\2\32\2\2\26\32\1\2\7\32\1\2\1\32"+
    "\3\2\4\32\2\2\1\0\1\32\7\0\2\2\2\0"+
    "\2\2\3\0\1\32\10\2\1\0\4\2\2\32\1\2"+
    "\3\32\2\0\2\2\12\0\2\32\2\51\7\2\1\51"+
    "\1\32\1\2\1\0\2\2\3\0\1\2\6\32\4\2"+
    "\2\32\2\2\26\32\1\2\7\32\1\2\2\32\1\2"+
    "\2\32\1\2\2\32\2\2\1\0\1\2\5\0\4\2"+
    "\2\0\2\2\3\0\3\2\1\0\7\2\4\32\1\2"+
    "\1\32\7\2\14\0\3\32\1\0\13\2\3\0\1\2"+
    "\11\32\1\2\3\32\1\2\26\32\1\2\7\32\1\2"+
    "\2\32\1\2\5\32\2\2\1\0\1\32\10\0\1\2"+
    "\3\0\1\2\3\0\2\2\1\32\17\2\2\32\2\0"+
    "\2\2\12\0\1\2\1\51\7\2\1\32\6\0\1\2"+
    "\3\0\1\2\10\32\2\2\2\32\2\2\26\32\1\2"+
    "\7\32\1\2\2\32\1\2\5\32\2\2\1\0\1\32"+
    "\7\0\2\2\2\0\2\2\3\0\7\2\3\0\4\2"+
    "\2\32\1\2\3\32\2\0\2\2\12\0\1\2\1\32"+
    "\20\2\1\0\1\32\1\2\6\32\3\2\3\32\1\2"+
    "\4\32\3\2\2\32\1\2\1\32\1\2\2\32\3\2"+
    "\2\32\3\2\3\32\3\2\14\32\4\2\5\0\3\2"+
    "\3\0\1\2\4\0\2\2\1\32\6\2\1\0\16\2"+
    "\12\0\11\2\1\51\6\2\5\0\10\32\1\2\3\32"+
    "\1\2\27\32\1\2\20\32\3\2\1\32\7\0\1\2"+
    "\3\0\1\2\4\0\7\2\2\0\1\2\3\32\5\2"+
    "\2\32\2\0\2\2\12\0\20\2\1\32\3\0\1\2"+
    "\10\32\1\2\3\32\1\2\27\32\1\2\12\32\1\2"+
    "\5\32\2\2\1\0\1\32\7\0\1\2\3\0\1\2"+
    "\4\0\7\2\2\0\7\2\1\32\1\2\2\32\2\0"+
    "\2\2\12\0\1\2\2\32\15\2\4\0\1\51\10\32"+
    "\1\2\3\32\1\2\51\32\2\0\1\32\7\0\1\2"+
    "\3\0\1\2\4\0\1\32\5\2\3\32\1\0\7\2"+
    "\3\32\2\0\2\2\12\0\12\2\6\32\1\2\3\0"+
    "\1\2\22\32\3\2\30\32\1\2\11\32\1\2\1\32"+
    "\2\2\7\32\3\2\1\0\4\2\6\0\1\2\1\0"+
    "\1\2\10\0\6\2\12\0\2\2\2\0\15\2\60\32"+
    "\1\0\2\32\7\0\4\2\1\51\7\32\10\0\1\2"+
    "\12\0\47\2\2\32\1\2\1\32\1\2\5\32\1\2"+
    "\30\32\1\2\1\32\1\2\12\32\1\0\2\32\11\0"+
    "\1\32\2\2\5\32\1\2\1\32\1\2\6\0\2\2"+
    "\12\0\2\2\4\32\40\2\1\32\27\2\2\0\6\2"+
    "\12\0\13\2\1\0\1\2\1\0\1\2\1\0\4\2"+
    "\2\0\10\32\1\2\44\32\4\2\24\0\1\2\2\0"+
    "\5\32\13\0\1\2\44\0\11\2\1\0\71\2\53\32"+
    "\24\0\1\32\12\0\6\2\6\32\4\0\4\32\3\0"+
    "\1\32\3\0\2\32\7\0\3\32\4\0\15\32\14\0"+
    "\1\32\17\0\2\2\46\32\1\2\1\32\5\2\1\32"+
    "\2\2\53\32\1\2\115\32\1\2\4\32\2\2\7\32"+
    "\1\2\1\32\1\2\4\32\2\2\51\32\1\2\4\32"+
    "\2\2\41\32\1\2\4\32\2\2\7\32\1\2\1\32"+
    "\1\2\4\32\2\2\17\32\1\2\71\32\1\2\4\32"+
    "\2\2\103\32\2\2\3\0\40\2\20\32\20\2\126\32"+
    "\2\2\6\32\3\2\u016c\32\2\2\21\32\1\2\32\32"+
    "\5\2\113\32\3\2\3\51\10\32\7\2\15\32\1\2"+
    "\4\32\3\0\13\2\22\32\3\0\13\2\22\32\2\0"+
    "\14\2\15\32\1\2\3\32\1\2\2\0\14\2\64\32"+
    "\40\0\3\2\1\32\3\2\1\51\1\32\1\0\2\2"+
    "\12\0\41\2\4\0\1\2\12\0\6\2\131\32\7\2"+
    "\5\32\2\0\42\32\1\0\1\32\5\2\106\32\12\2"+
    "\37\32\1\2\14\0\4\2\14\0\12\2\12\0\36\32"+
    "\2\2\5\32\13\2\54\32\4\2\32\32\6\2\12\0"+
    "\46\2\27\32\5\0\4\2\65\32\12\0\1\2\35\0"+
    "\2\2\13\0\6\2\12\0\15\2\1\32\10\2\16\0"+
    "\1\2\2\0\77\2\5\0\57\32\21\0\7\32\4\2"+
    "\12\0\21\2\11\0\14\2\3\0\36\32\15\0\2\32"+
    "\12\0\54\32\16\0\14\2\44\32\24\0\10\2\12\0"+
    "\3\2\3\32\12\0\44\32\2\2\11\32\7\2\53\32"+
    "\2\2\3\32\20\2\3\0\1\2\25\0\4\32\1\0"+
    "\6\32\1\0\2\32\3\0\1\32\5\2\300\32\72\0"+
    "\1\2\5\0\26\32\2\2\6\32\2\2\46\32\2\2"+
    "\6\32\2\2\10\32\1\2\1\32\1\2\1\32\1\2"+
    "\1\32\1\2\37\32\2\2\65\32\1\2\7\32\1\2"+
    "\1\32\3\2\3\32\1\2\7\32\3\2\4\32\2\2"+
    "\6\32\4\2\15\32\5\2\3\32\1\2\7\32\16\2"+
    "\5\0\30\2\2\52\5\0\20\2\2\51\23\2\1\51"+
    "\13\2\5\0\1\2\12\0\1\2\1\32\15\2\1\32"+
    "\20\2\15\32\3\2\40\51\20\2\15\0\4\2\1\0"+
    "\3\2\14\0\21\2\1\32\4\2\1\32\2\2\12\32"+
    "\1\2\1\32\3\2\5\32\6\2\1\32\1\2\1\32"+
    "\1\2\1\32\1\2\4\32\1\2\13\32\2\2\4\32"+
    "\5\2\5\32\4\2\1\32\21\2\43\51\2\32\4\51"+
    "\u0177\2\57\32\1\2\57\32\1\2\205\32\6\2\4\32"+
    "\3\0\2\32\14\2\46\32\1\2\1\32\5\2\1\32"+
    "\2\2\70\32\7\2\1\32\17\2\1\0\27\32\11\2"+
    "\7\32\1\2\7\32\1\2\7\32\1\2\7\32\1\2"+
    "\7\32\1\2\7\32\1\2\7\32\1\2\7\32\1\2"+
    "\40\0\57\2\1\32\325\2\2\32\1\51\31\2\11\51"+
    "\6\0\1\2\5\32\2\2\3\51\2\32\4\2\126\32"+
    "\2\2\2\0\2\2\3\32\1\2\132\32\1\2\4\32"+
    "\5\2\53\32\1\2\136\32\21\2\33\32\5\51\60\2"+
    "\306\32\12\51\100\2\360\32\15\51\3\2\215\32\103\2"+
    "\56\32\2\2\15\32\3\2\20\32\12\0\2\32\24\2"+
    "\57\32\1\0\4\2\12\0\1\2\37\32\2\0\106\32"+
    "\12\51\2\0\45\2\11\32\2\2\147\32\2\2\65\32"+
    "\2\2\5\32\4\51\52\2\2\51\13\32\1\0\3\32"+
    "\1\0\4\32\1\0\27\32\5\0\4\2\1\0\13\2"+
    "\1\51\7\2\64\32\14\2\2\0\62\32\22\0\12\2"+
    "\12\0\6\2\22\0\6\32\3\2\1\32\1\2\2\32"+
    "\13\0\34\32\10\0\2\2\27\32\15\0\14\2\35\32"+
    "\3\2\4\0\57\32\16\0\16\2\1\32\12\0\6\2"+
    "\5\32\1\0\12\32\12\0\5\32\1\2\51\32\16\0"+
    "\11\2\3\32\1\0\10\32\2\0\2\2\12\0\6\2"+
    "\27\32\3\2\1\32\3\0\62\32\1\0\1\32\3\0"+
    "\2\32\2\0\5\32\2\0\1\32\1\0\1\32\30\2"+
    "\3\32\2\2\13\32\5\0\2\2\3\32\2\0\12\2"+
    "\6\32\2\2\6\32\2\2\6\32\11\2\7\32\1\2"+
    "\7\32\1\2\53\32\1\2\14\32\2\51\6\2\163\32"+
    "\10\0\1\2\2\0\2\2\12\0\6\2\244\32\14\2"+
    "\27\32\4\2\61\32\u0104\2\156\32\2\2\152\32\46\2"+
    "\7\32\14\2\5\32\5\2\1\32\1\0\12\32\1\2"+
    "\15\32\1\2\5\32\1\2\1\32\1\2\2\32\1\2"+
    "\2\32\1\2\154\32\41\2\153\32\22\2\100\32\2\2"+
    "\66\32\50\2\14\32\1\51\3\2\20\0\20\2\20\0"+
    "\3\2\2\51\30\2\3\51\31\2\1\51\6\2\5\32"+
    "\1\2\207\32\2\2\1\0\4\2\1\51\13\2\12\0"+
    "\7\2\32\32\4\2\1\51\1\2\32\32\13\2\131\32"+
    "\3\2\6\32\2\2\6\32\2\2\6\32\2\2\3\32"+
    "\3\2\2\51\3\2\2\51\22\2\3\0\4\2\14\32"+
    "\1\2\32\32\1\2\23\32\1\2\2\32\1\2\17\32"+
    "\2\2\16\32\42\2\173\32\105\2\65\51\210\2\1\0"+
    "\202\2\35\32\3\2\61\32\17\2\1\0\37\2\40\32"+
    "\15\2\24\32\1\51\10\32\1\51\5\2\46\32\5\0"+
    "\5\2\36\32\2\2\44\32\4\2\10\32\1\2\5\51"+
    "\52\2\236\32\2\2\12\0\6\2\44\32\4\2\44\32"+
    "\4\2\50\32\10\2\64\32\234\2\67\32\11\2\26\32"+
    "\12\2\10\32\230\2\6\32\2\2\1\32\1\2\54\32"+
    "\1\2\2\32\3\2\1\32\2\2\27\32\12\2\27\32"+
    "\11\2\37\32\101\2\23\32\1\2\2\32\12\2\26\32"+
    "\12\2\32\32\106\2\70\32\6\2\2\32\100\2\1\32"+
    "\3\0\1\2\2\0\5\2\4\0\4\32\1\2\3\32"+
    "\1\2\35\32\2\2\3\0\4\2\1\0\40\2\35\32"+
    "\3\2\35\32\43\2\10\32\1\2\34\32\2\0\31\2"+
    "\66\32\12\2\26\32\12\2\23\32\15\2\22\32\156\2"+
    "\111\32\67\2\63\32\15\2\63\32\15\2\44\32\4\0"+
    "\10\2\12\0\u0146\2\52\51\1\2\2\0\3\2\2\51"+
    "\116\2\35\32\12\2\1\32\10\2\26\32\13\0\137\2"+
    "\25\51\33\2\27\32\11\2\3\0\65\32\17\0\37\2"+
    "\12\0\17\2\4\0\55\32\13\0\2\2\1\0\17\2"+
    "\1\0\2\2\31\32\7\2\12\0\6\2\3\0\44\32"+
    "\16\0\1\2\12\0\4\2\1\32\2\0\1\51\10\2"+
    "\43\32\1\0\2\2\1\32\11\2\3\0\60\32\16\0"+
    "\4\32\4\2\4\0\1\2\14\0\1\32\1\2\1\32"+
    "\43\2\22\32\1\2\31\32\14\0\6\2\1\0\101\2"+
    "\7\32\1\2\1\32\1\2\4\32\1\2\17\32\1\2"+
    "\12\32\7\2\57\32\14\0\5\2\12\0\6\2\4\0"+
    "\1\2\10\32\2\2\2\32\2\2\26\32\1\2\7\32"+
    "\1\2\2\32\1\2\5\32\1\2\2\0\1\32\7\0"+
    "\2\2\2\0\2\2\3\0\2\2\1\32\6\2\1\0"+
    "\5\2\5\32\2\0\2\2\7\0\3\2\5\0\213\2"+
    "\65\32\22\0\4\32\5\2\12\0\4\2\1\0\1\32"+
    "\2\51\36\2\60\32\24\0\2\32\1\2\1\32\10\2"+
    "\12\0\246\2\57\32\7\0\2\2\11\0\27\2\4\32"+
    "\2\0\42\2\60\32\21\0\3\2\1\32\13\2\12\0"+
    "\46\2\53\32\15\0\1\32\7\2\12\0\66\2\33\32"+
    "\2\2\17\0\4\2\12\0\306\2\54\32\17\0\145\2"+
    "\100\32\12\0\25\2\1\32\7\51\2\2\1\51\2\2"+
    "\10\51\1\2\2\51\1\2\30\51\6\0\1\2\2\0"+
    "\2\2\4\0\1\51\1\0\1\51\2\0\14\2\12\0"+
    "\106\2\10\32\2\2\47\32\7\0\2\2\7\0\1\32"+
    "\1\2\1\32\1\0\33\2\1\32\12\0\50\32\7\0"+
    "\1\32\4\0\10\2\1\0\10\2\1\32\13\0\56\32"+
    "\20\0\3\2\1\32\42\2\71\32\7\2\11\32\1\2"+
    "\45\32\10\0\1\2\10\0\1\32\17\2\12\0\30\2"+
    "\36\32\2\2\26\0\1\2\16\0\111\2\7\32\1\2"+
    "\2\32\1\2\46\32\6\0\3\2\1\0\1\2\2\0"+
    "\1\2\7\0\1\32\1\0\10\2\12\0\6\2\6\32"+
    "\1\2\2\32\1\2\40\32\5\0\1\2\2\0\1\2"+
    "\5\0\1\32\7\2\12\0\u0136\2\23\32\4\0\271\2"+
    "\1\51\54\2\4\51\37\2\232\32\146\2\157\51\21\2"+
    "\304\32\274\2\57\32\1\2\11\0\307\2\107\32\271\2"+
    "\71\32\7\2\37\32\1\2\12\0\146\2\36\32\2\2"+
    "\5\0\13\2\60\32\7\0\11\2\4\32\14\2\12\0"+
    "\11\2\25\32\5\2\23\32\260\2\100\32\200\2\113\32"+
    "\4\2\1\0\1\32\67\0\7\2\4\0\15\32\100\2"+
    "\2\32\1\2\1\32\1\0\13\2\2\0\16\2\370\32"+
    "\10\2\363\32\u01e3\51\52\2\11\51\367\2\37\32\61\2"+
    "\3\32\21\2\4\32\10\2\u018c\32\4\2\153\32\5\2"+
    "\15\32\3\2\11\32\7\2\12\32\3\2\2\0\1\2"+
    "\4\0\301\2\5\0\3\2\26\0\2\2\7\0\36\2"+
    "\4\0\224\2\3\0\273\2\125\32\1\2\107\32\1\2"+
    "\2\32\2\2\1\32\2\2\2\32\2\2\4\32\1\2"+
    "\14\32\1\2\1\32\1\2\7\32\1\2\101\32\1\2"+
    "\4\32\2\2\10\32\1\2\7\32\1\2\34\32\1\2"+
    "\4\32\1\2\5\32\1\2\1\32\3\2\7\32\1\2"+
    "\u0154\32\2\2\31\32\1\2\31\32\1\2\37\32\1\2"+
    "\31\32\1\2\37\32\1\2\31\32\1\2\37\32\1\2"+
    "\31\32\1\2\37\32\1\2\31\32\1\2\10\32\2\2"+
    "\151\0\4\2\62\0\10\2\1\0\16\2\1\0\26\2"+
    "\5\0\1\2\17\0\120\2\7\0\1\2\21\0\2\2"+
    "\7\0\1\2\2\0\1\2\5\0\325\2\55\32\3\2"+
    "\7\0\7\32\2\2\12\0\4\2\1\32\u0171\2\54\32"+
    "\16\0\5\2\1\51\305\32\13\2\7\0\51\2\104\32"+
    "\7\0\1\32\4\2\12\0\u0156\2\1\51\117\2\4\32"+
    "\1\2\33\32\1\2\2\32\1\2\1\32\2\2\1\32"+
    "\1\2\12\32\1\2\4\32\1\2\1\32\1\2\1\32"+
    "\6\2\1\32\4\2\1\32\1\2\1\32\1\2\1\32"+
    "\1\2\3\32\1\2\2\32\1\2\1\32\2\2\1\32"+
    "\1\2\1\32\1\2\1\32\1\2\1\32\1\2\1\32"+
    "\1\2\2\32\1\2\1\32\2\2\4\32\1\2\7\32"+
    "\1\2\4\32\1\2\4\32\1\2\1\32\1\2\12\32"+
    "\1\2\21\32\5\2\3\32\1\2\5\32\1\2\21\32"+
    "\u0134\2\12\0\6\2\327\32\7\51\42\2\65\32\13\2"+
    "\336\32\2\2\u0182\32\16\2\u0131\32\37\2\36\32\342\2"+
    "\113\51\266\2\1\0\36\2\140\0\200\2\360\0\20\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31744];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\16\0\3\1\1\2\1\3\2\1\2\2\1\4"+
    "\1\2\1\5\2\6\4\1\1\7\1\10\1\1\1\10"+
    "\1\11\1\12\1\13\1\14\1\1\1\13\1\15\1\16"+
    "\2\13\1\17\1\20\5\17\3\2\1\1\4\21\1\10"+
    "\1\21\4\0\1\22\1\23\1\4\1\0\2\6\1\7"+
    "\13\0\1\24\3\0\1\25\3\0\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\13\0\1\34\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd"+
    "\0\u0408\0\u0433\0\u03b2\0\u045e\0\u0489\0\u03b2\0\u0306\0\u0433"+
    "\0\u03dd\0\u04b4\0\u03b2\0\u04df\0\u050a\0\u03b2\0\u0535\0\u03b2"+
    "\0\u03b2\0\u0560\0\u0306\0\u03b2\0\u03b2\0\u0433\0\u02b0\0\u03b2"+
    "\0\u03b2\0\u058b\0\u05b6\0\u0433\0\u05e1\0\u060c\0\u0637\0\u0662"+
    "\0\u068d\0\u06b8\0\u03b2\0\u0306\0\u06e3\0\u0433\0\u070e\0\u0739"+
    "\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u03b2\0\u03b2\0\u0810\0\u083b"+
    "\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993"+
    "\0\u09be\0\u0637\0\u0662\0\u068d\0\u09e9\0\u0a14\0\u03b2\0\u0a3f"+
    "\0\u0a6a\0\u0a95\0\u03b2\0\u0ac0\0\u0aeb\0\u0b16\0\u045e\0\u03b2"+
    "\0\u03b2\0\u03b2\0\u03b2\0\u03b2\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2"+
    "\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u03b2"+
    "\0\u03b2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\3\20\2\22\1\20\1\23\10\20\1\24"+
    "\16\20\1\25\7\20\1\26\1\20\1\26\1\27\1\21"+
    "\6\27\1\23\4\27\1\30\1\27\1\31\1\27\1\32"+
    "\1\27\1\33\1\27\12\31\3\27\4\31\2\27\1\21"+
    "\1\27\1\21\10\27\1\23\6\27\1\34\1\27\1\32"+
    "\2\27\1\30\12\34\3\27\3\34\1\35\5\27\1\36"+
    "\1\21\6\36\1\37\10\36\1\40\2\36\1\41\23\36"+
    "\1\21\1\36\1\21\1\27\1\21\6\27\1\23\6\27"+
    "\1\42\1\27\1\32\1\27\1\33\1\27\12\42\3\27"+
    "\4\42\2\27\1\21\1\27\1\21\13\43\1\44\5\43"+
    "\1\45\15\43\1\46\13\43\1\27\1\21\4\27\1\47"+
    "\1\27\1\23\10\27\1\32\3\27\12\47\3\27\4\47"+
    "\2\27\1\21\1\47\1\21\1\50\1\21\2\50\1\51"+
    "\1\50\1\52\1\50\1\53\1\54\5\50\1\55\1\50"+
    "\1\56\1\55\2\50\12\52\3\50\4\52\2\50\1\57"+
    "\1\52\1\57\10\27\1\23\10\27\1\32\31\27\4\60"+
    "\1\61\2\62\1\63\1\37\10\60\1\64\36\60\2\65"+
    "\1\66\1\37\1\61\7\60\1\64\31\60\1\27\1\21"+
    "\2\27\1\67\3\27\1\23\1\70\5\27\1\42\1\27"+
    "\1\32\1\27\1\33\1\27\12\42\1\71\2\27\4\42"+
    "\2\27\1\21\1\27\1\21\41\36\1\72\11\36\10\73"+
    "\1\74\2\73\1\75\5\73\1\76\3\73\12\77\2\73"+
    "\1\100\1\73\3\77\15\73\1\74\2\73\1\75\5\73"+
    "\1\76\3\73\12\77\4\73\3\77\5\73\1\20\1\0"+
    "\3\20\2\0\1\20\1\0\10\20\1\0\16\20\1\25"+
    "\12\20\1\0\1\21\46\0\1\21\1\0\1\21\46\0"+
    "\1\101\11\0\1\102\11\0\1\103\5\0\12\103\3\0"+
    "\4\103\10\0\1\104\11\0\1\105\6\0\1\106\26\0"+
    "\1\20\1\0\6\20\1\0\10\20\1\0\16\20\1\25"+
    "\13\20\1\21\3\20\2\0\1\20\1\0\10\20\1\0"+
    "\16\20\1\25\7\20\1\26\1\20\1\26\76\0\1\33"+
    "\42\0\2\31\1\0\1\31\1\107\5\0\12\31\3\0"+
    "\4\31\10\0\1\110\62\0\2\34\1\0\1\34\1\111"+
    "\5\0\12\34\3\0\4\34\20\0\2\34\1\0\1\34"+
    "\1\111\5\0\12\34\3\0\2\34\1\112\1\34\20\0"+
    "\2\42\1\0\1\42\1\113\5\0\12\42\3\0\4\42"+
    "\5\0\13\43\1\114\37\43\3\0\1\115\47\0\1\47"+
    "\5\0\1\47\7\0\1\47\6\0\12\47\3\0\4\47"+
    "\2\0\2\47\1\0\1\52\5\0\1\52\7\0\1\52"+
    "\6\0\12\52\3\0\4\52\2\0\2\52\47\0\1\116"+
    "\26\0\1\117\76\0\1\120\26\0\1\121\30\0\4\122"+
    "\1\60\46\122\11\123\1\60\41\123\4\124\1\125\34\124"+
    "\1\60\11\124\41\0\1\126\24\0\1\114\40\0\1\77"+
    "\1\0\1\77\4\0\1\77\1\0\1\77\1\0\1\77"+
    "\1\0\1\77\6\0\12\77\4\0\3\77\2\0\1\77"+
    "\1\0\1\77\23\0\1\73\27\0\21\101\1\0\25\101"+
    "\1\127\3\101\16\0\1\130\26\0\1\131\20\0\2\103"+
    "\1\0\1\103\1\132\1\133\4\0\12\103\3\0\4\103"+
    "\20\0\1\134\14\0\1\135\6\0\1\136\26\0\2\107"+
    "\1\0\1\107\6\0\12\107\3\0\4\107\20\0\1\134"+
    "\23\0\1\136\26\0\2\111\1\0\1\111\6\0\12\111"+
    "\3\0\4\111\20\0\2\34\1\0\1\34\1\111\5\0"+
    "\12\34\3\0\1\34\1\137\2\34\20\0\2\113\1\0"+
    "\1\113\6\0\12\113\3\0\4\113\30\0\1\140\66\0"+
    "\1\141\13\0\4\116\1\0\42\116\1\142\3\116\4\117"+
    "\1\0\2\117\1\143\43\117\11\120\1\0\35\120\1\142"+
    "\3\120\7\121\1\143\1\121\1\0\41\121\4\125\1\124"+
    "\46\125\23\0\1\144\45\0\1\130\1\0\1\133\50\0"+
    "\1\145\6\0\5\145\34\0\2\132\1\0\1\132\1\0"+
    "\1\133\4\0\12\132\3\0\4\132\20\0\1\73\72\0"+
    "\1\146\46\0\1\147\41\0\1\145\1\0\1\133\4\0"+
    "\5\145\50\0\1\150\53\0\1\151\57\0\1\152\42\0"+
    "\1\153\63\0\1\154\51\0\1\155\51\0\1\156\43\0"+
    "\1\157\56\0\1\160\60\0\1\161\13\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3354];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\16\0\7\1\1\11\3\1\1\11\2\1\1\11"+
    "\4\1\1\11\2\1\1\11\1\1\2\11\2\1\2\11"+
    "\2\1\2\11\11\1\1\11\5\1\4\0\2\11\1\1"+
    "\1\0\3\1\13\0\1\11\3\0\1\11\3\0\1\1"+
    "\5\11\13\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  	public static final int PLAIN = 1;
  	public static final int KEYWORD = 2;
  	public static final int TYPE = 3;
  	public static final int OPERATOR = 4;
  	public static final int SEPARATOR = 5;
  	public static final int LITERAL = 6;
  	public static final int DOC_COMMENT = 7;

	   private int elTokenType = PLAIN;
        private int elTokenType2 =LITERAL;
        private int javaEmbeddedTokenType = LITERAL;
        private boolean myConditionalCommentsSupport;

        public void setConditionalCommentsSupport(final boolean b) {
          myConditionalCommentsSupport = b;
        }

        public void setElTypes(int _elTokenType,int _elTokenType2) {
          elTokenType = _elTokenType;
          elTokenType2 = _elTokenType2;
        }

        public void setJavaEmbeddedType(int _tokenType) {
          javaEmbeddedTokenType = _tokenType;
        }

        private int myPrevState = YYINITIAL;

        public int yyprevstate() {
          return myPrevState;
        }

        private int popState(){
          final int prev = myPrevState;
          myPrevState = YYINITIAL;
          return prev;
        }

        protected void pushState(int state){
          myPrevState = state;
        }
  public XmlLexer(){

  }


	@Override
    public void setReader(Reader reader){
		zzReader=reader;
	}

	@Override
  	public void reset(Reader reader){
  		yyreset(reader);
  	}

  	@Override
  	public int getState(){
  		return yystate()+1;
  	}

  	@Override
  	public void setState(int state){
  		yybegin(state-1);
  	}

  	@Override
      public int getDefaultState(){
  		return YYINITIAL+1;
  	}

  	@Override
  	public int nextToken()throws IOException{
  		return yylex();
  	}

  	@Override
  	public int getLine(){
  		return yyline;
  	}

  	@Override
  	public int getColumn(){
  		return yycolumn;
  	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public XmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PLAIN;
            }
          // fall through
          case 30: break;
          case 2:
            { if(yystate() == YYINITIAL){
        return PLAIN;
	  } else
		  yybegin(popState()); yypushback(yylength());
            }
          // fall through
          case 31: break;
          case 3:
            { yybegin(TAG); return KEYWORD;
            }
          // fall through
          case 32: break;
          case 4:
            { yybegin(ATTR_LIST); pushState(TAG); return KEYWORD;
            }
          // fall through
          case 33: break;
          case 5:
            { yybegin(YYINITIAL); return KEYWORD;
            }
          // fall through
          case 34: break;
          case 6:
            { yybegin(PI_ANY); return KEYWORD;
            }
          // fall through
          case 35: break;
          case 7:
            { return KEYWORD;
            }
          // fall through
          case 36: break;
          case 8:
            { return DOC_COMMENT;
            }
          // fall through
          case 37: break;
          case 9:
            { if (myConditionalCommentsSupport) {
    yybegin(C_COMMENT_START);
    return DOC_COMMENT;
  } else return PLAIN;
            }
          // fall through
          case 38: break;
          case 10:
            { yybegin(ATTR); return TYPE;
            }
          // fall through
          case 39: break;
          case 11:
            { yybegin(ATTR_LIST); yypushback(yylength());
            }
          // fall through
          case 40: break;
          case 12:
            { yybegin(ATTR_VALUE_DQ); return LITERAL;
            }
          // fall through
          case 41: break;
          case 13:
            { yybegin(ATTR_VALUE_SQ); return LITERAL;
            }
          // fall through
          case 42: break;
          case 14:
            { return OPERATOR;
            }
          // fall through
          case 43: break;
          case 15:
            { return LITERAL;
            }
          // fall through
          case 44: break;
          case 16:
            { yybegin(ATTR_LIST); return LITERAL;
            }
          // fall through
          case 45: break;
          case 17:
            { yybegin(COMMENT); return DOC_COMMENT;
            }
          // fall through
          case 46: break;
          case 18:
            { yybegin(END_TAG); return KEYWORD;
            }
          // fall through
          case 47: break;
          case 19:
            { yybegin(PROCESSING_INSTRUCTION); return KEYWORD;
            }
          // fall through
          case 48: break;
          case 20:
            { return elTokenType;
            }
          // fall through
          case 49: break;
          case 21:
            { return TYPE;
            }
          // fall through
          case 50: break;
          case 22:
            { yybegin(ATTR_LIST); pushState(PROCESSING_INSTRUCTION); return KEYWORD;
            }
          // fall through
          case 51: break;
          case 23:
            { yybegin(YYINITIAL); return DOC_COMMENT;
            }
          // fall through
          case 52: break;
          case 24:
            { if (myConditionalCommentsSupport) {
    yybegin(C_COMMENT_END);
    return DOC_COMMENT;
  } else return PLAIN;
            }
          // fall through
          case 53: break;
          case 25:
            { return elTokenType2;
            }
          // fall through
          case 54: break;
          case 26:
            { return javaEmbeddedTokenType;
            }
          // fall through
          case 55: break;
          case 27:
            { yybegin(YYINITIAL); return PLAIN;
            }
          // fall through
          case 56: break;
          case 28:
            { yybegin(DOCTYPE); return KEYWORD;
            }
          // fall through
          case 57: break;
          case 29:
            { yybegin(CDATA); return PLAIN;
            }
          // fall through
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
