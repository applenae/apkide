// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: CppLexer.flex

package com.apkide.language.impl.cpp;

import com.apkide.language.api.Lexer;

import java.io.IOException;
import java.io.Reader;



@SuppressWarnings("fallthrough")
public class CppLexer implements Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\2\16\0\4\4"+
    "\1\1\1\5\1\6\1\7\1\10\1\5\1\11\1\12"+
    "\2\13\1\14\1\15\1\13\1\16\1\17\1\20\1\21"+
    "\11\22\1\23\1\13\1\24\1\25\1\26\1\27\1\4"+
    "\1\30\1\31\1\30\1\32\1\33\1\32\5\10\1\34"+
    "\3\10\1\35\7\10\1\36\2\10\1\13\1\37\1\13"+
    "\1\5\1\40\1\4\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\10\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\10\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\13\1\71\1\13"+
    "\1\27\6\0\1\72\32\0\2\4\4\10\4\4\1\10"+
    "\2\4\1\0\7\4\1\10\4\4\1\10\5\4\27\10"+
    "\1\4\37\10\1\4\u01ca\10\4\4\14\10\16\4\5\10"+
    "\7\4\1\10\1\4\1\10\21\4\160\0\5\10\1\4"+
    "\2\10\2\4\4\10\1\4\1\10\6\4\1\10\1\4"+
    "\3\10\1\4\1\10\1\4\24\10\1\4\123\10\1\4"+
    "\213\10\1\4\5\0\2\4\246\10\1\4\46\10\2\4"+
    "\1\10\6\4\51\10\6\4\1\10\1\4\55\0\1\4"+
    "\1\0\1\4\2\0\1\4\2\0\1\4\1\0\10\4"+
    "\33\10\4\4\4\10\15\4\6\0\5\4\1\10\4\4"+
    "\13\0\1\4\1\0\3\4\53\10\37\0\4\4\2\10"+
    "\1\0\143\10\1\4\1\10\10\0\1\4\6\0\2\10"+
    "\2\0\1\4\4\0\2\10\12\0\3\10\2\4\1\10"+
    "\17\4\1\0\1\10\1\0\36\10\33\0\2\4\131\10"+
    "\13\0\1\10\16\4\12\0\41\10\11\0\2\10\4\4"+
    "\1\10\2\4\1\0\30\10\4\0\1\10\11\0\1\10"+
    "\3\0\1\10\5\0\22\4\31\10\3\0\4\4\13\10"+
    "\65\4\25\10\1\4\22\10\13\4\61\0\66\10\3\0"+
    "\1\10\22\0\1\10\7\0\12\10\2\0\2\4\12\0"+
    "\1\4\20\10\3\0\1\4\10\10\2\4\2\10\2\4"+
    "\26\10\1\4\7\10\1\4\1\10\3\4\4\10\2\4"+
    "\1\0\1\10\7\0\2\4\2\0\2\4\3\0\1\10"+
    "\10\4\1\0\4\4\2\10\1\4\3\10\2\0\2\4"+
    "\12\0\4\10\7\4\2\10\1\4\1\0\2\4\3\0"+
    "\1\4\6\10\4\4\2\10\2\4\26\10\1\4\7\10"+
    "\1\4\2\10\1\4\2\10\1\4\2\10\2\4\1\0"+
    "\1\4\5\0\4\4\2\0\2\4\3\0\3\4\1\0"+
    "\7\4\4\10\1\4\1\10\7\4\14\0\3\10\1\0"+
    "\13\4\3\0\1\4\11\10\1\4\3\10\1\4\26\10"+
    "\1\4\7\10\1\4\2\10\1\4\5\10\2\4\1\0"+
    "\1\10\10\0\1\4\3\0\1\4\3\0\2\4\1\10"+
    "\17\4\2\10\2\0\2\4\12\0\1\4\1\10\7\4"+
    "\1\10\6\0\1\4\3\0\1\4\10\10\2\4\2\10"+
    "\2\4\26\10\1\4\7\10\1\4\2\10\1\4\5\10"+
    "\2\4\1\0\1\10\7\0\2\4\2\0\2\4\3\0"+
    "\7\4\3\0\4\4\2\10\1\4\3\10\2\0\2\4"+
    "\12\0\1\4\1\10\20\4\1\0\1\10\1\4\6\10"+
    "\3\4\3\10\1\4\4\10\3\4\2\10\1\4\1\10"+
    "\1\4\2\10\3\4\2\10\3\4\3\10\3\4\14\10"+
    "\4\4\5\0\3\4\3\0\1\4\4\0\2\4\1\10"+
    "\6\4\1\0\16\4\12\0\11\4\1\10\6\4\5\0"+
    "\10\10\1\4\3\10\1\4\27\10\1\4\20\10\3\4"+
    "\1\10\7\0\1\4\3\0\1\4\4\0\7\4\2\0"+
    "\1\4\3\10\5\4\2\10\2\0\2\4\12\0\20\4"+
    "\1\10\3\0\1\4\10\10\1\4\3\10\1\4\27\10"+
    "\1\4\12\10\1\4\5\10\2\4\1\0\1\10\7\0"+
    "\1\4\3\0\1\4\4\0\7\4\2\0\7\4\1\10"+
    "\1\4\2\10\2\0\2\4\12\0\1\4\2\10\15\4"+
    "\4\0\11\10\1\4\3\10\1\4\51\10\2\0\1\10"+
    "\7\0\1\4\3\0\1\4\4\0\1\10\5\4\3\10"+
    "\1\0\7\4\3\10\2\0\2\4\12\0\12\4\6\10"+
    "\1\4\3\0\1\4\22\10\3\4\30\10\1\4\11\10"+
    "\1\4\1\10\2\4\7\10\3\4\1\0\4\4\6\0"+
    "\1\4\1\0\1\4\10\0\6\4\12\0\2\4\2\0"+
    "\15\4\60\10\1\0\2\10\7\0\4\4\10\10\10\0"+
    "\1\4\12\0\47\4\2\10\1\4\1\10\1\4\5\10"+
    "\1\4\30\10\1\4\1\10\1\4\12\10\1\0\2\10"+
    "\11\0\1\10\2\4\5\10\1\4\1\10\1\4\6\0"+
    "\2\4\12\0\2\4\4\10\40\4\1\10\27\4\2\0"+
    "\6\4\12\0\13\4\1\0\1\4\1\0\1\4\1\0"+
    "\4\4\2\0\10\10\1\4\44\10\4\4\24\0\1\4"+
    "\2\0\5\10\13\0\1\4\44\0\11\4\1\0\71\4"+
    "\53\10\24\0\1\10\12\0\6\4\6\10\4\0\4\10"+
    "\3\0\1\10\3\0\2\10\7\0\3\10\4\0\15\10"+
    "\14\0\1\10\17\0\2\4\46\10\1\4\1\10\5\4"+
    "\1\10\2\4\53\10\1\4\115\10\1\4\4\10\2\4"+
    "\7\10\1\4\1\10\1\4\4\10\2\4\51\10\1\4"+
    "\4\10\2\4\41\10\1\4\4\10\2\4\7\10\1\4"+
    "\1\10\1\4\4\10\2\4\17\10\1\4\71\10\1\4"+
    "\4\10\2\4\103\10\2\4\3\0\40\4\20\10\20\4"+
    "\126\10\2\4\6\10\3\4\u016c\10\2\4\21\10\1\4"+
    "\32\10\5\4\113\10\3\4\13\10\7\4\15\10\1\4"+
    "\4\10\3\0\13\4\22\10\3\0\13\4\22\10\2\0"+
    "\14\4\15\10\1\4\3\10\1\4\2\0\14\4\64\10"+
    "\40\0\3\4\1\10\3\4\2\10\1\0\2\4\12\0"+
    "\41\4\4\0\1\4\12\0\6\4\131\10\7\4\5\10"+
    "\2\0\42\10\1\0\1\10\5\4\106\10\12\4\37\10"+
    "\1\4\14\0\4\4\14\0\12\4\12\0\36\10\2\4"+
    "\5\10\13\4\54\10\4\4\32\10\6\4\12\0\46\4"+
    "\27\10\5\0\4\4\65\10\12\0\1\4\35\0\2\4"+
    "\13\0\6\4\12\0\15\4\1\10\10\4\16\0\1\4"+
    "\2\0\77\4\5\0\57\10\21\0\7\10\4\4\12\0"+
    "\21\4\11\0\14\4\3\0\36\10\15\0\2\10\12\0"+
    "\54\10\16\0\14\4\44\10\24\0\10\4\12\0\3\4"+
    "\3\10\12\0\44\10\2\4\11\10\7\4\53\10\2\4"+
    "\3\10\20\4\3\0\1\4\25\0\4\10\1\0\6\10"+
    "\1\0\2\10\3\0\1\10\5\4\300\10\72\0\1\4"+
    "\5\0\26\10\2\4\6\10\2\4\46\10\2\4\6\10"+
    "\2\4\10\10\1\4\1\10\1\4\1\10\1\4\1\10"+
    "\1\4\37\10\2\4\65\10\1\4\7\10\1\4\1\10"+
    "\3\4\3\10\1\4\7\10\3\4\4\10\2\4\6\10"+
    "\4\4\15\10\5\4\3\10\1\4\7\10\16\4\5\0"+
    "\30\4\2\3\5\0\20\4\2\10\23\4\1\10\13\4"+
    "\5\0\1\4\12\0\1\4\1\10\15\4\1\10\20\4"+
    "\15\10\3\4\40\10\20\4\15\0\4\4\1\0\3\4"+
    "\14\0\21\4\1\10\4\4\1\10\2\4\12\10\1\4"+
    "\1\10\3\4\5\10\6\4\1\10\1\4\1\10\1\4"+
    "\1\10\1\4\4\10\1\4\13\10\2\4\4\10\5\4"+
    "\5\10\4\4\1\10\21\4\51\10\u0177\4\57\10\1\4"+
    "\57\10\1\4\205\10\6\4\4\10\3\0\2\10\14\4"+
    "\46\10\1\4\1\10\5\4\1\10\2\4\70\10\7\4"+
    "\1\10\17\4\1\0\27\10\11\4\7\10\1\4\7\10"+
    "\1\4\7\10\1\4\7\10\1\4\7\10\1\4\7\10"+
    "\1\4\7\10\1\4\7\10\1\4\40\0\57\4\1\10"+
    "\325\4\3\10\31\4\11\10\6\0\1\4\5\10\2\4"+
    "\5\10\4\4\126\10\2\4\2\0\2\4\3\10\1\4"+
    "\132\10\1\4\4\10\5\4\53\10\1\4\136\10\21\4"+
    "\40\10\60\4\320\10\100\4\375\10\3\4\215\10\103\4"+
    "\56\10\2\4\15\10\3\4\20\10\12\0\2\10\24\4"+
    "\57\10\1\0\4\4\12\0\1\4\37\10\2\0\120\10"+
    "\2\0\45\4\11\10\2\4\147\10\2\4\65\10\2\4"+
    "\11\10\52\4\15\10\1\0\3\10\1\0\4\10\1\0"+
    "\27\10\5\0\4\4\1\0\13\4\1\10\7\4\64\10"+
    "\14\4\2\0\62\10\22\0\12\4\12\0\6\4\22\0"+
    "\6\10\3\4\1\10\1\4\2\10\13\0\34\10\10\0"+
    "\2\4\27\10\15\0\14\4\35\10\3\4\4\0\57\10"+
    "\16\0\16\4\1\10\12\0\6\4\5\10\1\0\12\10"+
    "\12\0\5\10\1\4\51\10\16\0\11\4\3\10\1\0"+
    "\10\10\2\0\2\4\12\0\6\4\27\10\3\4\1\10"+
    "\3\0\62\10\1\0\1\10\3\0\2\10\2\0\5\10"+
    "\2\0\1\10\1\0\1\10\30\4\3\10\2\4\13\10"+
    "\5\0\2\4\3\10\2\0\12\4\6\10\2\4\6\10"+
    "\2\4\6\10\11\4\7\10\1\4\7\10\1\4\53\10"+
    "\1\4\16\10\6\4\163\10\10\0\1\4\2\0\2\4"+
    "\12\0\6\4\244\10\14\4\27\10\4\4\61\10\4\4"+
    "\u0100\3\156\10\2\4\152\10\46\4\7\10\14\4\5\10"+
    "\5\4\1\10\1\0\12\10\1\4\15\10\1\4\5\10"+
    "\1\4\1\10\1\4\2\10\1\4\2\10\1\4\154\10"+
    "\41\4\153\10\22\4\100\10\2\4\66\10\50\4\15\10"+
    "\3\4\20\0\20\4\20\0\3\4\2\10\30\4\3\10"+
    "\31\4\1\10\6\4\5\10\1\4\207\10\2\4\1\0"+
    "\4\4\1\10\13\4\12\0\7\4\32\10\4\4\1\10"+
    "\1\4\32\10\13\4\131\10\3\4\6\10\2\4\6\10"+
    "\2\4\6\10\2\4\3\10\3\4\2\10\3\4\2\10"+
    "\22\4\3\0\4\4\14\10\1\4\32\10\1\4\23\10"+
    "\1\4\2\10\1\4\17\10\2\4\16\10\42\4\173\10"+
    "\105\4\65\10\210\4\1\0\202\4\35\10\3\4\61\10"+
    "\17\4\1\0\37\4\40\10\15\4\36\10\5\4\46\10"+
    "\5\0\5\4\36\10\2\4\44\10\4\4\10\10\1\4"+
    "\5\10\52\4\236\10\2\4\12\0\6\4\44\10\4\4"+
    "\44\10\4\4\50\10\10\4\64\10\234\4\67\10\11\4"+
    "\26\10\12\4\10\10\230\4\6\10\2\4\1\10\1\4"+
    "\54\10\1\4\2\10\3\4\1\10\2\4\27\10\12\4"+
    "\27\10\11\4\37\10\101\4\23\10\1\4\2\10\12\4"+
    "\26\10\12\4\32\10\106\4\70\10\6\4\2\10\100\4"+
    "\1\10\3\0\1\4\2\0\5\4\4\0\4\10\1\4"+
    "\3\10\1\4\35\10\2\4\3\0\4\4\1\0\40\4"+
    "\35\10\3\4\35\10\43\4\10\10\1\4\34\10\2\0"+
    "\31\4\66\10\12\4\26\10\12\4\23\10\15\4\22\10"+
    "\156\4\111\10\67\4\63\10\15\4\63\10\15\4\44\10"+
    "\4\0\10\4\12\0\u0146\4\52\10\1\4\2\0\3\4"+
    "\2\10\116\4\35\10\12\4\1\10\10\4\26\10\13\0"+
    "\137\4\25\10\33\4\27\10\11\4\3\0\65\10\17\0"+
    "\37\4\12\0\17\4\4\0\55\10\13\0\2\4\1\0"+
    "\17\4\1\0\2\4\31\10\7\4\12\0\6\4\3\0"+
    "\44\10\16\0\1\4\12\0\4\4\1\10\2\0\1\10"+
    "\10\4\43\10\1\0\2\4\1\10\11\4\3\0\60\10"+
    "\16\0\4\10\4\4\4\0\1\4\14\0\1\10\1\4"+
    "\1\10\43\4\22\10\1\4\31\10\14\0\6\4\1\0"+
    "\101\4\7\10\1\4\1\10\1\4\4\10\1\4\17\10"+
    "\1\4\12\10\7\4\57\10\14\0\5\4\12\0\6\4"+
    "\4\0\1\4\10\10\2\4\2\10\2\4\26\10\1\4"+
    "\7\10\1\4\2\10\1\4\5\10\1\4\2\0\1\10"+
    "\7\0\2\4\2\0\2\4\3\0\2\4\1\10\6\4"+
    "\1\0\5\4\5\10\2\0\2\4\7\0\3\4\5\0"+
    "\213\4\65\10\22\0\4\10\5\4\12\0\4\4\1\0"+
    "\3\10\36\4\60\10\24\0\2\10\1\4\1\10\10\4"+
    "\12\0\246\4\57\10\7\0\2\4\11\0\27\4\4\10"+
    "\2\0\42\4\60\10\21\0\3\4\1\10\13\4\12\0"+
    "\46\4\53\10\15\0\1\10\7\4\12\0\66\4\33\10"+
    "\2\4\17\0\4\4\12\0\306\4\54\10\17\0\145\4"+
    "\100\10\12\0\25\4\10\10\2\4\1\10\2\4\10\10"+
    "\1\4\2\10\1\4\30\10\6\0\1\4\2\0\2\4"+
    "\4\0\1\10\1\0\1\10\2\0\14\4\12\0\106\4"+
    "\10\10\2\4\47\10\7\0\2\4\7\0\1\10\1\4"+
    "\1\10\1\0\33\4\1\10\12\0\50\10\7\0\1\10"+
    "\4\0\10\4\1\0\10\4\1\10\13\0\56\10\20\0"+
    "\3\4\1\10\42\4\71\10\7\4\11\10\1\4\45\10"+
    "\10\0\1\4\10\0\1\10\17\4\12\0\30\4\36\10"+
    "\2\4\26\0\1\4\16\0\111\4\7\10\1\4\2\10"+
    "\1\4\46\10\6\0\3\4\1\0\1\4\2\0\1\4"+
    "\7\0\1\10\1\0\10\4\12\0\6\4\6\10\1\4"+
    "\2\10\1\4\40\10\5\0\1\4\2\0\1\4\5\0"+
    "\1\10\7\4\12\0\u0136\4\23\10\4\0\271\4\1\10"+
    "\54\4\4\10\37\4\232\10\146\4\157\10\21\4\304\10"+
    "\274\4\57\10\1\4\11\0\307\4\107\10\271\4\71\10"+
    "\7\4\37\10\1\4\12\0\146\4\36\10\2\4\5\0"+
    "\13\4\60\10\7\0\11\4\4\10\14\4\12\0\11\4"+
    "\25\10\5\4\23\10\260\4\100\10\200\4\113\10\4\4"+
    "\1\0\1\10\67\0\7\4\4\0\15\10\100\4\2\10"+
    "\1\4\1\10\1\0\13\4\2\0\16\4\370\10\10\4"+
    "\326\10\52\4\11\10\367\4\37\10\61\4\3\10\21\4"+
    "\4\10\10\4\u018c\10\4\4\153\10\5\4\15\10\3\4"+
    "\11\10\7\4\12\10\3\4\2\0\1\4\4\0\301\4"+
    "\5\0\3\4\26\0\2\4\7\0\36\4\4\0\224\4"+
    "\3\0\273\4\125\10\1\4\107\10\1\4\2\10\2\4"+
    "\1\10\2\4\2\10\2\4\4\10\1\4\14\10\1\4"+
    "\1\10\1\4\7\10\1\4\101\10\1\4\4\10\2\4"+
    "\10\10\1\4\7\10\1\4\34\10\1\4\4\10\1\4"+
    "\5\10\1\4\1\10\3\4\7\10\1\4\u0154\10\2\4"+
    "\31\10\1\4\31\10\1\4\37\10\1\4\31\10\1\4"+
    "\37\10\1\4\31\10\1\4\37\10\1\4\31\10\1\4"+
    "\37\10\1\4\31\10\1\4\10\10\2\4\151\0\4\4"+
    "\62\0\10\4\1\0\16\4\1\0\26\4\5\0\1\4"+
    "\17\0\120\4\7\0\1\4\21\0\2\4\7\0\1\4"+
    "\2\0\1\4\5\0\325\4\55\10\3\4\7\0\7\10"+
    "\2\4\12\0\4\4\1\10\u0171\4\54\10\16\0\5\4"+
    "\306\10\13\4\7\0\51\4\104\10\7\0\1\10\4\4"+
    "\12\0\u0156\4\1\10\117\4\4\10\1\4\33\10\1\4"+
    "\2\10\1\4\1\10\2\4\1\10\1\4\12\10\1\4"+
    "\4\10\1\4\1\10\1\4\1\10\6\4\1\10\4\4"+
    "\1\10\1\4\1\10\1\4\1\10\1\4\3\10\1\4"+
    "\2\10\1\4\1\10\2\4\1\10\1\4\1\10\1\4"+
    "\1\10\1\4\1\10\1\4\1\10\1\4\2\10\1\4"+
    "\1\10\2\4\4\10\1\4\7\10\1\4\4\10\1\4"+
    "\4\10\1\4\1\10\1\4\12\10\1\4\21\10\5\4"+
    "\3\10\1\4\5\10\1\4\21\10\u0134\4\12\0\6\4"+
    "\336\10\42\4\65\10\13\4\336\10\2\4\u0182\10\16\4"+
    "\u0131\10\37\4\36\10\342\4\113\10\266\4\1\0\36\4"+
    "\140\0\200\4\360\0\20\4";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\2\1\1\2\1\3\1\4"+
    "\2\2\1\4\1\2\2\3\3\2\21\1\1\2\2\3"+
    "\6\0\1\3\1\0\1\3\2\5\3\3\7\1\1\6"+
    "\7\1\1\6\33\1\4\0\1\7\6\0\1\5\1\10"+
    "\1\3\1\0\1\3\56\1\12\0\2\10\1\0\36\1"+
    "\1\7\5\0\1\5\1\0\17\1\3\0\6\1\1\6"+
    "\3\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\73\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a"+
    "\0\u0375\0\u03b0\0\73\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\73\0\u0811\0\u084c"+
    "\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24"+
    "\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4"+
    "\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0162\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149"+
    "\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9"+
    "\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9"+
    "\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81"+
    "\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59"+
    "\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31"+
    "\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009"+
    "\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1"+
    "\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9"+
    "\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591"+
    "\0\u25cc\0\73\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e"+
    "\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906"+
    "\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade"+
    "\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6"+
    "\0\u2cf1\0\73\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\73"+
    "\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0"+
    "\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8"+
    "\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0"+
    "\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\2\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\4\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\4\2\23\7\7\1\2"+
    "\2\7\1\24\1\25\1\26\1\27\1\30\1\31\1\7"+
    "\1\32\1\7\1\33\1\34\1\35\1\7\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\3\7\1\45\75\0"+
    "\2\3\115\0\1\23\45\0\2\5\1\0\3\5\1\46"+
    "\30\5\1\47\33\5\44\0\1\50\1\51\3\0\1\52"+
    "\1\0\1\53\3\0\1\54\3\0\1\55\7\0\1\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\31\7"+
    "\1\0\1\7\11\0\1\23\13\0\1\23\45\0\2\11"+
    "\1\0\7\11\1\46\24\11\1\56\33\11\15\0\1\23"+
    "\7\0\1\23\63\0\1\23\6\0\2\23\63\0\1\57"+
    "\1\0\2\60\64\0\1\61\3\0\1\62\4\0\1\23"+
    "\64\0\1\60\1\0\2\20\6\0\1\63\1\46\1\64"+
    "\1\46\1\0\1\65\1\0\1\20\1\0\1\63\1\0"+
    "\1\46\1\64\1\46\4\0\1\46\12\0\1\65\23\0"+
    "\1\60\1\0\2\20\7\0\1\46\1\64\1\46\3\0"+
    "\1\20\3\0\1\46\1\64\1\46\4\0\1\46\42\0"+
    "\1\23\73\0\1\4\1\23\45\0\1\7\7\0\1\7"+
    "\10\0\2\7\5\0\7\7\1\0\16\7\1\66\1\7"+
    "\1\67\10\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\1\7\1\70\6\7\1\71\2\7"+
    "\1\72\2\7\1\73\12\7\1\0\2\7\7\0\1\7"+
    "\10\0\2\7\5\0\7\7\1\0\5\7\1\74\10\7"+
    "\1\75\12\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\13\7\1\76\1\7\1\77\10\7"+
    "\1\100\2\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\13\7\1\101\2\7\1\102\1\7"+
    "\1\103\10\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\16\7\1\104\12\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\6\7"+
    "\1\105\6\7\1\106\13\7\1\0\2\7\7\0\1\7"+
    "\10\0\2\7\5\0\7\7\1\0\16\7\1\107\12\7"+
    "\1\0\2\7\7\0\1\7\10\0\2\7\5\0\7\7"+
    "\1\0\23\7\1\110\5\7\1\0\2\7\7\0\1\7"+
    "\10\0\2\7\5\0\7\7\1\0\1\7\1\111\3\7"+
    "\1\112\10\7\1\113\12\7\1\0\2\7\7\0\1\7"+
    "\10\0\2\7\5\0\7\7\1\0\20\7\1\114\2\7"+
    "\1\115\5\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\5\7\1\116\23\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\1\7"+
    "\1\117\3\7\1\120\2\7\1\121\1\122\10\7\1\123"+
    "\2\7\1\124\3\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\5\7\1\125\2\7\1\126"+
    "\7\7\1\127\6\7\1\130\1\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\15\7\1\131"+
    "\3\7\1\132\1\7\1\133\5\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\1\7\1\134"+
    "\7\7\1\135\4\7\1\136\12\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\3\7\1\137"+
    "\4\7\1\140\20\7\1\0\1\7\25\0\1\23\43\0"+
    "\1\23\1\0\2\5\1\0\70\5\45\0\1\141\100\0"+
    "\1\142\1\0\1\143\2\0\1\144\60\0\1\145\5\0"+
    "\1\146\1\147\66\0\1\150\101\0\1\151\67\0\1\152"+
    "\3\0\1\153\11\0\2\11\1\0\70\11\17\0\1\12"+
    "\74\0\2\60\7\0\1\46\1\64\4\0\1\60\3\0"+
    "\1\46\1\64\1\46\24\0\14\154\1\155\56\154\2\62"+
    "\1\0\70\62\21\0\2\63\11\0\1\46\3\0\1\63"+
    "\12\0\1\46\34\0\2\156\2\0\2\156\7\0\1\46"+
    "\5\0\1\156\3\0\1\46\1\0\1\46\43\0\1\157"+
    "\1\0\2\160\5\0\4\160\1\46\3\0\7\160\4\0"+
    "\1\46\17\0\1\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\16\7\1\161\12\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\5\7\1\162"+
    "\23\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\21\7\1\163\1\164\6\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\1\7"+
    "\1\102\27\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\1\7\1\165\27\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\15\7"+
    "\1\166\13\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\6\7\1\167\4\7\1\170\15\7"+
    "\1\0\2\7\7\0\1\7\10\0\2\7\5\0\7\7"+
    "\1\0\23\7\1\171\5\7\1\0\2\7\7\0\1\7"+
    "\10\0\2\7\5\0\7\7\1\0\21\7\1\163\7\7"+
    "\1\0\2\7\7\0\1\7\10\0\2\7\5\0\7\7"+
    "\1\0\23\7\1\172\5\7\1\0\2\7\7\0\1\7"+
    "\10\0\2\7\5\0\7\7\1\0\17\7\1\173\2\7"+
    "\1\174\6\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\16\7\1\175\12\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\20\7"+
    "\1\105\10\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\11\7\1\176\17\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\22\7"+
    "\1\177\6\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\13\7\1\200\6\7\1\105\6\7"+
    "\1\0\2\7\7\0\1\7\10\0\2\7\5\0\7\7"+
    "\1\0\15\7\1\201\13\7\1\0\2\7\7\0\1\7"+
    "\10\0\2\7\5\0\7\7\1\0\22\7\1\202\6\7"+
    "\1\0\2\7\7\0\1\7\10\0\2\7\5\0\7\7"+
    "\1\0\14\7\1\203\14\7\1\0\2\7\7\0\1\7"+
    "\10\0\2\7\5\0\7\7\1\0\25\7\1\105\3\7"+
    "\1\0\2\7\7\0\1\7\10\0\2\7\5\0\7\7"+
    "\1\0\11\7\1\204\17\7\1\0\2\7\7\0\1\7"+
    "\10\0\2\7\5\0\7\7\1\0\11\7\1\205\4\7"+
    "\1\206\12\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\2\7\1\207\26\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\7\7"+
    "\1\210\12\7\1\211\6\7\1\0\2\7\7\0\1\7"+
    "\10\0\2\7\5\0\7\7\1\0\6\7\1\212\22\7"+
    "\1\0\2\7\7\0\1\7\10\0\2\7\5\0\7\7"+
    "\1\0\1\7\1\213\11\7\1\214\15\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\16\7"+
    "\1\215\12\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\7\7\1\216\20\7\1\217\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\1\7\1\220\16\7\1\221\10\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\11\7\1\222"+
    "\17\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\14\7\1\223\14\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\11\7\1\224"+
    "\6\7\1\225\10\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\27\7\1\105\1\7\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\17\7\1\226\11\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\11\7\1\227\7\7\1\230"+
    "\7\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\11\7\1\107\17\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\11\7\1\231"+
    "\17\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\13\7\1\232\15\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\20\7\1\233"+
    "\10\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\11\7\1\231\1\7\1\234\15\7\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\10\7\1\235\20\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\11\7\1\236\17\7\1\0"+
    "\1\7\46\0\1\53\75\0\1\237\7\0\1\240\55\0"+
    "\1\241\106\0\1\242\56\0\1\243\10\0\1\152\74\0"+
    "\1\244\56\0\1\245\104\0\1\240\56\0\1\246\75\0"+
    "\1\243\77\0\1\247\21\0\14\154\1\250\56\154\14\251"+
    "\1\155\3\251\1\252\52\251\21\0\2\156\7\0\1\46"+
    "\5\0\1\156\3\0\1\46\1\0\1\46\45\0\2\253"+
    "\5\0\4\253\4\0\7\253\43\0\1\253\1\0\2\160"+
    "\5\0\4\160\1\46\1\64\2\0\7\160\4\0\1\46"+
    "\3\0\1\64\13\0\1\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\13\7\1\105\15\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\1\7"+
    "\1\254\27\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\5\7\1\105\23\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\3\7"+
    "\1\255\25\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\21\7\1\224\7\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\21\7"+
    "\1\256\1\257\6\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\1\7\1\260\27\7\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\5\7\1\261\23\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\2\7\1\236\26\7\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\14\7\1\105\14\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\13\7\1\262\2\7\1\215"+
    "\12\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\5\7\1\263\23\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\1\7\1\256"+
    "\27\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\5\7\1\264\23\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\16\7\1\105"+
    "\12\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\11\7\1\265\17\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\7\7\1\105"+
    "\21\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\1\7\1\171\27\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\5\7\1\266"+
    "\23\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\15\7\1\267\13\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\24\7\1\270"+
    "\4\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\22\7\1\271\6\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\13\7\1\272"+
    "\15\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\11\7\1\273\17\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\23\7\1\263"+
    "\5\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\5\7\1\274\23\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\13\7\1\275"+
    "\15\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\5\7\1\276\23\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\20\7\1\256"+
    "\10\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\15\7\1\275\13\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\5\7\1\277"+
    "\23\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\22\7\1\300\6\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\23\7\1\301"+
    "\5\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\22\7\1\164\6\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\17\7\1\302"+
    "\11\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\21\7\1\105\7\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\5\7\1\303"+
    "\10\7\1\112\12\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\5\7\1\304\23\7\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\16\7\1\305\12\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\11\7\1\306\17\7\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\4\7\1\105\24\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\23\7\1\163\5\7\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\22\7\1\307\6\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\1\7\1\310\27\7\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\1\7\1\311\27\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\13\7\1\163\15\7\1\0"+
    "\1\7\46\0\1\312\71\0\1\312\76\0\1\237\77\0"+
    "\1\313\61\0\1\237\103\0\1\314\67\0\1\315\66\0"+
    "\1\316\100\0\1\317\15\0\14\154\1\250\3\154\1\320"+
    "\52\154\14\251\1\321\56\251\21\0\2\253\5\0\4\253"+
    "\1\0\1\64\2\0\7\253\10\0\1\64\13\0\1\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\12\7"+
    "\1\105\16\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\10\7\1\105\20\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\22\7"+
    "\1\105\6\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\11\7\1\322\17\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\23\7"+
    "\1\323\5\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\22\7\1\163\6\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\11\7"+
    "\1\324\17\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\20\7\1\305\10\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\15\7"+
    "\1\231\13\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\15\7\1\163\13\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\21\7"+
    "\1\325\7\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\13\7\1\200\15\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\1\7"+
    "\1\261\27\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\5\7\1\326\23\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\11\7"+
    "\1\327\17\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\21\7\1\330\7\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\3\7"+
    "\1\331\25\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\5\7\1\231\23\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\3\7"+
    "\1\332\25\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\16\7\1\333\12\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\11\7"+
    "\1\334\17\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\3\7\1\256\25\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\13\7"+
    "\1\270\15\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\1\7\1\231\27\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\4\7"+
    "\1\335\4\7\1\231\3\7\1\336\13\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\15\7"+
    "\1\105\13\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\7\7\1\216\21\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\23\7"+
    "\1\337\5\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\22\7\1\140\6\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\20\7"+
    "\1\340\10\7\1\0\1\7\60\0\1\312\72\0\1\341"+
    "\75\0\1\342\63\0\1\343\65\0\1\312\23\0\14\251"+
    "\1\321\3\251\1\252\52\251\1\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\15\7\1\232\13\7\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\13\7\1\256\15\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\3\7\1\344\25\7\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\17\7\1\345\11\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\3\7\1\346\25\7\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\3\7\1\105\25\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\22\7\1\347\6\7\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\1\7\1\350\27\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\22\7\1\351\6\7\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\6\7\1\105\22\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\3\7\1\352\25\7\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\5\7\1\333\23\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\1\7\1\353\27\7\1\0"+
    "\2\7\7\0\1\7\10\0\2\7\5\0\7\7\1\0"+
    "\1\7\1\161\27\7\1\0\2\7\7\0\1\7\10\0"+
    "\2\7\5\0\7\7\1\0\1\256\30\7\1\0\1\7"+
    "\62\0\1\312\54\0\1\240\67\0\1\312\31\0\1\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\11\7"+
    "\1\256\17\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\1\7\1\354\27\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\22\7"+
    "\1\275\6\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\5\7\1\102\23\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\21\7"+
    "\1\256\7\7\1\0\2\7\7\0\1\7\10\0\2\7"+
    "\5\0\7\7\1\0\1\7\1\355\27\7\1\0\2\7"+
    "\7\0\1\7\10\0\2\7\5\0\7\7\1\0\1\274"+
    "\30\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\14\7\1\163\14\7\1\0\2\7\7\0"+
    "\1\7\10\0\2\7\5\0\7\7\1\0\3\7\1\163"+
    "\25\7\1\0\2\7\7\0\1\7\10\0\2\7\5\0"+
    "\7\7\1\0\15\7\1\127\13\7\1\0\1\7";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13570];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\10\1\1\11\22\1\1\11"+
    "\1\1\6\0\1\1\1\0\61\1\4\0\1\1\6\0"+
    "\3\1\1\0\57\1\12\0\1\1\1\11\1\0\36\1"+
    "\1\11\5\0\1\11\1\0\17\1\3\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  	public static final int PLAIN = 1;
  	public static final int PROCESSOR = 2;
  	public static final int KEYWORD = 3;
  	public static final int TYPE = 4;
  	public static final int OPERATOR = 5;
  	public static final int SEPARATOR = 6;
  	public static final int LITERAL = 7;
  	public static final int COMMENT = 8;
  	public static final int DOC_COMMENT = 9;

	public CppLexer(){

	}

	@Override
    public void setReader(Reader reader){
		zzReader=reader;
	}

	@Override
  	public void reset(Reader reader){
  		yyreset(reader);
  	}

  	@Override
  	public int getState(){
  		return yystate()+1;
  	}

  	@Override
  	public void setState(int state){
  		yybegin(state-1);
  	}

  	@Override
      public int getDefaultState(){
  		return YYINITIAL+1;
  	}

  	@Override
  	public int nextToken()throws IOException{
  		return yylex();
  	}

  	@Override
  	public int getLine(){
  		return yyline;
  	}

  	@Override
  	public int getColumn(){
  		return yycolumn;
  	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CppLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PLAIN;
            }
          // fall through
          case 9: break;
          case 2:
            { return OPERATOR;
            }
          // fall through
          case 10: break;
          case 3:
            { return LITERAL;
            }
          // fall through
          case 11: break;
          case 4:
            { return SEPARATOR;
            }
          // fall through
          case 12: break;
          case 5:
            { return COMMENT;
            }
          // fall through
          case 13: break;
          case 6:
            { return KEYWORD;
            }
          // fall through
          case 14: break;
          case 7:
            { return PROCESSOR;
            }
          // fall through
          case 15: break;
          case 8:
            { return DOC_COMMENT;
            }
          // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
