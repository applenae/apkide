// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: YamlLexer.flex

package com.apkide.language.impl.yaml;

import com.apkide.language.api.Lexer;

import java.io.IOException;
import java.io.Reader;


@SuppressWarnings("fallthrough")
public class YamlLexer implements Lexer {
  
  /**
   * This character denotes the end of file.
   */
  public static final int YYEOF = -1;
  
  /**
   * Initial size of the lookahead buffer.
   */
  private static final int ZZ_BUFFERSIZE = 16384;
  
  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int LINE_START_STATE = 2;
  public static final int BLOCK_STATE = 4;
  public static final int FLOW_STATE = 6;
  public static final int POSSIBLE_PLAIN_TEXT_STATE = 8;
  public static final int ANCHOR_MODE = 10;
  public static final int ALIAS_MODE = 12;
  public static final int KEY_MODE = 14;
  public static final int BS_HEADER_TAIL_STATE = 16;
  public static final int BS_BODY_STATE = 18;
  
  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5,
          6, 6, 7, 7
  };
  
  /**
   * Top-level table for translating characters to character classes
   */
  private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();
  
  private static final String ZZ_CMAP_TOP_PACKED_0 =
          "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600" +
                  "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00" +
                  "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100" +
                  "\1\u1100\1\u1200\1\u1300\1\u1400\123\u0100\1\u0a00\4\u0100\1\u1500" +
                  "\10\u0100\1\u1600\2\u0100\1\u1700\1\u1800\1\u1400\1\u0100\1\u0500" +
                  "\1\u0100\1\u1900\1\u1600\1\u0900\3\u0100\1\u1300\1\u1a00\114\u0100" +
                  "\1\u1b00\1\u1300\153\u0100\1\u1c00\11\u0100\1\u1d00\1\u1400\6\u0100" +
                  "\1\u1300\u0f16\u0100";
  
  private static int[] zzUnpackcmap_top() {
    int[] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }
  
  private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
  
  
  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();
  
  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
          "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6" +
                  "\1\7\1\10\1\11\1\12\1\13\1\14\2\11\1\15" +
                  "\1\16\1\17\1\20\1\21\1\11\12\22\1\23\1\11" +
                  "\1\24\1\11\1\25\1\26\1\27\6\30\24\31\1\32" +
                  "\1\33\1\34\1\0\1\11\1\35\6\30\24\31\1\36" +
                  "\1\37\1\40\1\11\6\0\1\3\32\0\1\3\u01bf\0" +
                  "\12\22\206\0\12\22\306\0\12\22\234\0\12\22\166\0" +
                  "\12\22\140\0\12\22\166\0\12\22\106\0\12\22\u0116\0" +
                  "\12\22\106\0\12\22\346\0\1\3\u015f\0\12\22\46\0" +
                  "\12\22\u012c\0\12\22\200\0\12\22\246\0\12\22\6\0" +
                  "\12\22\266\0\12\22\126\0\12\22\206\0\12\22\6\0" +
                  "\12\22\246\0\13\3\35\0\2\3\5\0\1\3\57\0" +
                  "\1\3\240\0\1\3\u01cf\0\12\22\46\0\12\22\306\0" +
                  "\12\22\26\0\12\22\126\0\12\22\u0196\0\12\22\246\0" +
                  "\12\22\206\0\12\22\u012c\0\12\22\200\0\12\22\74\0" +
                  "\12\22\220\0\12\22\166\0\12\22\146\0\12\22\206\0" +
                  "\12\22\106\0\12\22\266\0\12\22\u0164\0\62\22\100\0" +
                  "\12\22\266\0";
  
  private static int[] zzUnpackcmap_blocks() {
    int[] result = new int[7680];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }
  
  private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
  
  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();
  
  private static final String ZZ_ACTION_PACKED_0 =
          "\17\0\1\1\1\2\2\1\1\3\1\4\1\5\3\4" +
                  "\1\6\5\4\1\7\1\10\1\11\1\12\1\11\3\4" +
                  "\1\13\1\4\1\7\1\11\1\4\1\14\4\4\1\15" +
                  "\1\16\1\17\1\4\1\20\1\21\1\4\14\0\1\22" +
                  "\2\23\7\0\1\24\2\0\1\25\2\0\1\24\1\26" +
                  "\2\27\2\10\3\0\1\30\5\0\1\31\4\0\1\4" +
                  "\1\0\1\4\2\0\1\4\3\0\1\32\16\0\1\33" +
                  "\1\0\1\3\3\0\1\24\2\0\1\34\1\4\2\0" +
                  "\1\24\1\10\1\0\1\4\2\0\1\4\4\0\1\35" +
                  "\1\0\1\4\4\0\1\36\3\4\2\0\3\4\1\0" +
                  "\1\31\6\0\1\37\3\0\2\4\1\0\1\4\2\0" +
                  "\1\40\2\0\1\4\1\0\1\4\1\0\1\4\2\0" +
                  "\1\4\1\36\3\0\1\31\3\35\2\0\1\4\1\0" +
                  "\2\4\1\41\2\4\5\0\1\4\1\0\1\4\1\35" +
                  "\4\4\1\0";
  
  private static int[] zzUnpackAction() {
    int[] result = new int[228];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }
  
  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
  
  
  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
  
  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347" +
                  "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce\0\u01ef" +
                  "\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u01ef\0\u01ef\0\u02b5" +
                  "\0\u02d6\0\u02f7\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c\0\u03bd" +
                  "\0\u03de\0\u01ef\0\u01ef\0\u03ff\0\u0420\0\u0441\0\u0462\0\u01ef" +
                  "\0\u0483\0\u04a4\0\u04c5\0\u04e6\0\u01ef\0\u0507\0\u0528\0\u0549" +
                  "\0\u056a\0\u058b\0\u05ac\0\u01ef\0\u05cd\0\u01ef\0\u05ee\0\u060f" +
                  "\0\u0630\0\u0651\0\u01ef\0\u0672\0\u0693\0\u06b4\0\u06d5\0\u06f6" +
                  "\0\u0717\0\u0738\0\u0759\0\u077a\0\u079b\0\u07bc\0\u01ef\0\u07dd" +
                  "\0\u07fe\0\u081f\0\u0840\0\u0861\0\u02d6\0\u0882\0\u08a3\0\u08c4" +
                  "\0\u08e5\0\u0339\0\u035a\0\u0906\0\u0927\0\u037b\0\u0948\0\u01ef" +
                  "\0\u0969\0\u098a\0\u09ab\0\u09cc\0\u09ed\0\u0a0e\0\u0a2f\0\u0a50" +
                  "\0\u0a71\0\u0a92\0\u0ab3\0\u0ad4\0\u0af5\0\u0b16\0\u0b37\0\u0b58" +
                  "\0\u0b79\0\u0b9a\0\u0bbb\0\u0bdc\0\u0bfd\0\u0c1e\0\u0c3f\0\u0c60" +
                  "\0\u0c81\0\u01ef\0\u060f\0\u0ca2\0\u0ca2\0\u0cc3\0\u0ce4\0\u0d05" +
                  "\0\u01ef\0\u0d26\0\u0d47\0\u0d68\0\u0d89\0\u0daa\0\u0dcb\0\u0dec" +
                  "\0\u0e0d\0\u0e2e\0\u077a\0\u0e4f\0\u0e70\0\u0e91\0\u01ef\0\u0eb2" +
                  "\0\u08a3\0\u01ef\0\u0ed3\0\u0ef4\0\u0f15\0\u0f36\0\u01ef\0\u0f57" +
                  "\0\u09cc\0\u0f78\0\u0f99\0\u0fba\0\u0fdb\0\u0ffc\0\u101d\0\u103e" +
                  "\0\u0ab3\0\u105f\0\u0af5\0\u1080\0\u10a1\0\u10c2\0\u10e3\0\u0b16" +
                  "\0\u0b37\0\u10e3\0\u1104\0\u1125\0\u1146\0\u0bdc\0\u1167\0\u1188" +
                  "\0\u11a9\0\u11ca\0\u11eb\0\u120c\0\u122d\0\u124e\0\u0d68\0\u0daa" +
                  "\0\u01ef\0\u126f\0\u1290\0\u12b1\0\u12d2\0\u12f3\0\u1314\0\u1335" +
                  "\0\u1356\0\u1377\0\u1398\0\u13b9\0\u13da\0\u13fb\0\u141c\0\u143d" +
                  "\0\u145e\0\u147f\0\u14a0\0\u14c1\0\u0ab3\0\u01ef\0\u14e2\0\u1503" +
                  "\0\u1524\0\u1545\0\u1566\0\u1587\0\u15a8\0\u15c9\0\u15ea\0\u160b" +
                  "\0\u162c\0\u164d\0\u166e\0\u01ef\0\u13b9\0\u168f\0\u168f\0\u16b0" +
                  "\0\u16d1\0\u16f2\0\u1713\0\u1734\0\u1755\0\u1776\0\u11a9\0\u1797" +
                  "\0\u17b8\0\u12b1\0\u1566\0\u1587";
  
  private static int[] zzUnpackRowMap() {
    int[] result = new int[228];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }
  
  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }
  
  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpacktrans();
  
  private static final String ZZ_TRANS_PACKED_0 =
          "\1\20\1\21\3\20\1\21\12\20\1\22\1\23\17\20" +
                  "\1\24\1\25\1\26\1\24\1\27\1\25\1\30\1\31" +
                  "\1\32\1\24\1\33\1\34\1\35\1\36\1\24\1\27" +
                  "\1\37\2\24\1\40\1\24\1\41\1\40\1\27\2\24" +
                  "\1\42\1\24\1\43\1\27\1\44\1\41\1\43\1\45" +
                  "\1\25\1\46\1\45\1\27\1\25\1\30\1\31\1\32" +
                  "\1\45\1\47\1\34\1\35\1\36\1\45\1\50\1\51" +
                  "\2\45\1\52\1\45\1\41\1\52\1\27\2\45\1\42" +
                  "\1\45\1\43\1\27\1\53\1\41\1\43\1\54\1\25" +
                  "\1\55\1\54\1\27\1\25\1\56\1\57\1\32\1\54" +
                  "\2\56\1\60\1\56\1\54\1\56\1\61\2\54\1\62" +
                  "\1\54\1\56\1\61\1\56\2\54\1\56\1\54\5\56" +
                  "\1\63\5\27\11\63\1\27\3\63\1\27\6\63\1\27" +
                  "\1\63\1\27\1\63\1\27\1\63\2\27\1\25\3\27" +
                  "\1\25\15\27\1\64\15\27\1\65\1\25\1\66\2\65" +
                  "\1\25\2\65\1\32\30\65\1\67\1\25\1\70\2\67" +
                  "\1\25\33\67\6\0\1\71\33\0\1\72\1\73\2\0" +
                  "\1\72\42\0\1\74\4\0\1\75\47\0\1\72\15\0" +
                  "\1\76\2\0\1\76\5\0\1\76\4\0\1\76\1\0" +
                  "\1\77\2\76\1\77\1\76\1\0\1\77\1\0\2\76" +
                  "\1\0\1\76\5\0\1\100\2\0\1\100\5\0\1\100" +
                  "\4\0\1\100\1\0\1\101\2\100\1\101\1\100\1\0" +
                  "\1\101\1\0\2\100\1\0\1\100\5\0\1\14\2\0" +
                  "\1\14\2\0\33\14\42\0\1\21\3\0\1\21\53\0" +
                  "\1\102\41\0\1\103\17\0\1\24\1\104\1\0\1\24" +
                  "\1\0\1\104\15\24\1\105\15\24\1\0\1\25\3\0" +
                  "\1\25\34\0\1\106\1\107\2\0\1\106\1\110\1\0" +
                  "\2\111\1\112\4\111\1\0\1\113\1\111\1\113\1\111" +
                  "\1\114\1\0\2\111\2\113\7\0\2\115\1\116\4\115" +
                  "\1\117\23\115\1\120\5\115\2\32\1\0\36\32\36\0" +
                  "\1\121\2\0\1\122\5\0\11\122\1\0\3\122\1\0" +
                  "\6\122\1\0\1\122\1\0\1\122\1\0\1\122\1\0" +
                  "\2\123\1\124\11\123\1\125\24\123\1\126\5\0\11\126" +
                  "\1\0\3\126\1\0\6\126\1\0\1\126\1\0\1\126" +
                  "\1\0\1\126\1\0\1\24\1\127\1\130\1\24\1\0" +
                  "\1\127\34\24\2\0\1\24\2\0\33\24\16\0\1\131" +
                  "\1\0\1\131\1\0\1\132\54\0\1\133\2\0\1\45" +
                  "\1\134\1\0\1\45\1\0\1\134\11\45\1\135\3\45" +
                  "\1\136\6\45\1\135\1\45\1\135\1\45\1\135\1\45" +
                  "\1\135\20\0\1\137\1\140\55\0\1\141\2\0\1\45" +
                  "\1\127\1\130\1\45\1\0\1\127\11\45\1\0\12\45" +
                  "\1\0\1\45\1\0\1\45\1\0\1\45\1\0\1\45" +
                  "\2\0\1\45\2\0\11\45\1\0\12\45\1\0\1\45" +
                  "\1\0\1\45\1\0\1\45\37\0\1\142\2\0\1\54" +
                  "\1\143\1\0\1\54\1\0\1\143\15\54\1\144\15\54" +
                  "\1\56\1\145\1\0\1\56\1\0\1\145\15\56\1\146" +
                  "\15\56\1\57\1\147\1\0\1\57\1\150\1\147\1\57" +
                  "\1\151\13\57\1\152\7\57\1\153\5\57\1\60\1\154" +
                  "\1\0\1\60\1\155\1\154\6\60\1\156\6\60\1\157" +
                  "\15\60\1\54\1\145\1\0\1\54\1\0\1\145\15\54" +
                  "\1\160\16\54\2\0\1\54\2\0\33\54\1\63\5\0" +
                  "\11\63\1\0\3\63\1\0\6\63\1\0\1\63\1\0" +
                  "\1\63\1\0\1\63\1\0\1\65\1\161\1\0\2\65" +
                  "\1\161\33\65\2\67\1\0\36\67\1\162\1\163\1\0" +
                  "\1\162\1\0\1\163\33\162\6\0\1\164\1\0\2\165" +
                  "\1\166\4\165\1\0\1\167\1\165\1\167\1\165\1\170" +
                  "\1\0\2\165\2\167\10\0\1\72\3\0\1\72\33\0" +
                  "\2\74\1\0\4\74\1\171\23\74\1\172\5\74\2\75" +
                  "\1\0\11\75\1\173\24\75\1\76\1\174\1\0\1\76" +
                  "\1\0\1\174\15\76\1\175\16\76\2\0\1\76\2\0" +
                  "\33\76\1\100\1\176\1\0\1\100\1\0\1\176\11\100" +
                  "\1\177\3\100\1\200\6\100\1\177\1\100\1\177\1\100" +
                  "\1\177\1\100\1\177\1\100\2\0\1\100\2\0\11\100" +
                  "\1\0\12\100\1\0\1\100\1\0\1\100\1\0\1\100" +
                  "\21\0\1\201\41\0\1\201\17\0\1\24\1\104\1\0" +
                  "\1\24\1\0\1\104\2\24\1\202\12\24\1\105\15\24" +
                  "\1\203\2\0\1\203\2\0\33\203\1\0\1\106\3\0" +
                  "\1\106\43\0\2\111\1\112\4\111\1\0\4\111\2\0" +
                  "\4\111\10\0\1\106\1\107\2\0\1\106\2\0\2\111" +
                  "\1\112\4\111\1\0\4\111\2\0\4\111\31\0\1\204" +
                  "\5\0\1\204\11\0\1\106\1\107\2\0\1\106\1\110" +
                  "\1\0\2\111\1\112\4\111\1\0\1\113\1\111\1\113" +
                  "\1\111\2\0\2\111\2\113\15\0\1\205\1\0\2\205" +
                  "\1\206\11\205\2\0\5\205\1\0\1\205\4\0\7\116" +
                  "\1\207\23\116\1\210\5\116\1\0\1\211\3\0\1\211" +
                  "\15\0\1\212\15\0\2\115\1\116\36\115\1\213\1\121" +
                  "\1\0\1\213\5\121\1\213\4\121\1\213\1\121\1\214" +
                  "\2\213\1\214\1\213\1\121\1\214\1\121\2\213\1\121" +
                  "\1\213\4\121\1\215\14\124\1\216\24\124\1\0\1\211" +
                  "\3\0\1\211\6\0\1\123\6\0\1\212\16\0\1\127" +
                  "\3\0\1\127\55\0\1\131\34\0\1\217\1\0\1\217" +
                  "\1\0\1\132\16\0\2\220\1\0\2\220\1\0\2\220" +
                  "\1\0\7\220\1\0\11\220\1\0\1\220\1\0\1\220" +
                  "\1\0\1\220\1\0\1\45\1\134\1\0\1\45\1\0" +
                  "\1\134\2\45\1\135\6\45\1\135\3\45\1\136\6\45" +
                  "\1\135\1\45\1\135\1\45\1\135\1\45\1\135\10\0" +
                  "\1\221\30\0\1\221\2\0\1\221\2\0\11\221\1\0" +
                  "\12\221\1\0\1\221\1\0\1\221\1\0\1\221\21\0" +
                  "\1\222\41\0\1\223\17\0\1\224\1\141\1\0\1\224" +
                  "\5\141\1\224\4\141\1\224\1\141\1\225\2\224\1\225" +
                  "\1\224\1\141\1\225\1\141\2\224\1\141\1\224\4\141" +
                  "\1\226\2\227\1\0\2\227\1\0\2\227\1\0\7\227" +
                  "\1\0\11\227\1\0\1\227\1\0\1\227\1\0\1\227" +
                  "\1\0\1\54\1\143\1\0\1\54\1\0\1\143\2\54" +
                  "\1\230\12\54\1\144\15\54\1\231\2\0\1\231\2\0" +
                  "\33\231\1\56\1\145\1\0\1\56\1\0\1\145\2\56" +
                  "\1\232\12\56\1\146\15\56\1\233\2\0\1\233\2\0" +
                  "\33\233\1\57\1\147\1\0\1\57\1\150\1\147\1\57" +
                  "\1\151\1\234\12\57\1\152\7\57\1\153\5\57\2\150" +
                  "\1\0\4\150\1\235\23\150\1\236\5\150\1\56\1\237" +
                  "\1\0\1\56\1\0\1\237\15\56\1\240\15\56\1\241" +
                  "\1\150\1\0\1\241\2\150\1\241\1\242\23\241\1\243" +
                  "\5\241\1\57\1\147\1\0\1\57\1\150\1\147\15\57" +
                  "\1\152\15\57\1\60\1\154\1\0\1\60\1\155\1\154" +
                  "\2\60\1\244\3\60\1\156\6\60\1\157\15\60\2\155" +
                  "\1\0\11\155\1\245\24\155\1\56\1\237\1\0\1\56" +
                  "\1\0\1\237\6\56\1\60\6\56\1\240\15\56\1\246" +
                  "\1\155\1\0\1\246\2\155\6\246\1\247\24\246\1\250" +
                  "\1\251\1\0\1\250\1\0\1\251\15\250\1\252\15\250" +
                  "\1\65\1\161\1\0\2\65\1\161\2\65\1\0\30\65" +
                  "\10\0\2\165\1\166\4\165\1\0\4\165\2\0\4\165" +
                  "\31\0\1\253\5\0\1\253\16\0\1\164\1\0\2\165" +
                  "\1\166\4\165\1\0\1\167\1\165\1\167\1\165\2\0" +
                  "\2\165\2\167\15\0\1\254\1\0\2\254\1\255\11\254" +
                  "\2\0\5\254\1\0\1\254\4\0\2\74\1\0\36\74" +
                  "\14\0\1\75\24\0\1\76\1\174\1\0\1\76\1\0" +
                  "\1\174\2\76\1\256\12\76\1\175\15\76\1\257\2\0" +
                  "\1\257\2\0\33\257\1\100\1\176\1\0\1\100\1\0" +
                  "\1\176\2\100\1\177\6\100\1\177\3\100\1\200\6\100" +
                  "\1\177\1\100\1\177\1\100\1\177\1\100\1\177\10\0" +
                  "\1\260\30\0\1\260\2\0\1\260\2\0\11\260\1\0" +
                  "\12\260\1\0\1\260\1\0\1\260\1\0\1\260\1\0" +
                  "\1\261\2\0\1\261\2\0\33\261\10\0\1\203\52\0" +
                  "\1\111\5\0\1\111\16\0\1\205\1\0\2\205\1\206" +
                  "\11\205\1\0\1\262\5\205\1\0\1\205\26\0\1\263" +
                  "\5\0\1\263\10\0\41\116\1\213\1\264\1\0\1\213" +
                  "\1\121\1\264\12\213\1\265\2\213\1\214\2\213\1\265" +
                  "\11\213\1\266\1\213\1\121\1\0\1\213\2\121\12\213" +
                  "\1\265\2\213\1\265\2\213\1\265\11\213\1\266\1\56" +
                  "\2\0\1\56\5\0\1\56\4\0\1\56\1\0\1\267" +
                  "\2\56\1\267\1\56\1\0\1\267\1\0\2\56\1\0" +
                  "\1\56\21\0\1\124\24\0\1\270\1\220\1\0\1\270" +
                  "\4\220\1\0\1\270\4\220\1\270\1\220\1\271\2\270" +
                  "\1\267\1\270\1\0\1\271\1\220\2\270\1\0\1\270" +
                  "\1\0\1\220\1\0\1\220\1\272\20\0\1\273\41\0" +
                  "\1\273\17\0\1\224\1\274\1\0\1\224\1\141\1\274" +
                  "\11\224\1\275\1\276\2\224\1\225\2\224\1\276\3\224" +
                  "\1\275\1\224\1\275\1\224\1\275\1\224\1\277\1\224" +
                  "\1\141\1\0\1\224\2\141\11\224\1\141\1\276\2\224" +
                  "\1\276\2\224\1\276\3\224\1\141\1\224\1\141\1\224" +
                  "\1\141\1\224\1\226\1\300\2\0\1\300\5\0\1\300" +
                  "\4\0\1\300\1\0\1\301\2\300\1\301\1\300\1\0" +
                  "\1\301\1\0\2\300\1\0\1\300\5\0\1\302\1\227" +
                  "\1\0\1\302\4\227\1\0\1\302\4\227\1\302\1\227" +
                  "\1\303\2\302\1\301\1\302\1\0\1\303\1\227\2\302" +
                  "\1\0\1\302\1\0\1\227\1\0\1\227\1\304\10\0" +
                  "\1\305\40\0\1\233\30\0\2\150\1\0\4\150\1\235" +
                  "\1\241\22\150\1\236\5\150\1\0\1\235\3\0\1\235" +
                  "\15\0\1\306\15\0\2\150\1\0\36\150\1\56\1\237" +
                  "\1\0\1\56\1\0\1\237\2\56\1\232\12\56\1\240" +
                  "\15\56\1\57\1\147\1\0\1\57\1\150\1\147\2\57" +
                  "\1\234\12\57\1\152\15\57\2\155\1\0\5\155\1\246" +
                  "\3\155\1\245\24\155\1\0\1\235\3\0\1\235\6\0" +
                  "\1\155\6\0\1\306\15\0\1\56\1\237\1\0\1\56" +
                  "\1\0\1\237\2\56\1\232\3\56\1\60\6\56\1\240" +
                  "\15\56\1\54\1\143\1\0\1\54\1\0\1\143\2\54" +
                  "\1\307\12\54\1\144\15\54\1\310\1\251\1\0\1\310" +
                  "\1\0\1\251\2\310\1\311\12\310\1\312\15\310\1\313" +
                  "\1\145\1\0\1\313\1\0\1\145\2\313\1\314\12\313" +
                  "\1\315\15\313\22\0\1\165\5\0\1\165\16\0\1\254" +
                  "\1\0\2\254\1\255\11\254\1\0\1\171\5\254\1\0" +
                  "\1\254\26\0\1\316\5\0\1\316\20\0\1\257\31\0" +
                  "\1\106\1\107\2\0\1\106\55\0\1\205\5\0\1\205" +
                  "\10\0\1\213\1\264\1\0\1\213\1\121\1\264\2\213" +
                  "\1\317\7\213\1\265\2\213\1\214\2\213\1\265\11\213" +
                  "\1\266\1\213\1\264\1\0\1\213\1\121\1\264\12\213" +
                  "\1\265\2\213\1\265\2\213\1\265\11\213\1\266\1\56" +
                  "\1\145\1\0\1\56\1\0\1\145\12\56\1\320\2\56" +
                  "\1\267\2\56\1\320\13\56\2\0\1\56\2\0\33\56" +
                  "\1\270\1\321\1\0\1\270\1\220\1\321\2\270\1\56" +
                  "\7\270\1\322\2\270\1\267\1\270\1\56\1\322\3\270" +
                  "\1\56\1\270\1\56\1\270\1\56\1\270\1\323\1\270" +
                  "\1\220\1\0\1\270\2\220\2\270\1\56\7\270\1\322" +
                  "\2\270\1\320\1\270\1\56\1\322\3\270\1\56\1\270" +
                  "\1\56\1\270\1\56\1\270\1\323\1\56\2\0\1\56" +
                  "\5\0\1\56\4\0\1\56\1\0\1\267\2\56\1\267" +
                  "\1\56\1\0\1\267\1\0\2\56\1\0\1\56\4\0" +
                  "\1\215\1\324\2\0\1\324\2\0\33\324\1\224\1\274" +
                  "\1\0\1\224\1\141\1\274\2\224\1\275\6\224\1\275" +
                  "\1\276\2\224\1\225\2\224\1\276\3\224\1\275\1\224" +
                  "\1\275\1\224\1\275\1\224\1\277\1\224\1\141\1\0" +
                  "\1\224\4\141\1\325\1\224\4\141\1\224\1\141\1\225" +
                  "\2\224\1\225\1\224\1\141\1\225\1\141\2\224\1\141" +
                  "\1\224\4\141\1\226\1\224\1\274\1\0\1\224\1\141" +
                  "\1\274\11\224\1\275\1\276\2\224\1\276\2\224\1\276" +
                  "\3\224\1\275\1\224\1\275\1\224\1\275\1\224\1\277" +
                  "\1\300\2\0\1\300\4\0\1\326\1\300\4\0\1\300" +
                  "\1\0\1\301\2\300\1\301\1\300\1\0\1\301\1\0" +
                  "\2\300\1\0\1\300\5\0\1\300\1\327\1\0\1\300" +
                  "\1\0\1\327\11\300\1\330\3\300\1\331\6\300\1\330" +
                  "\1\300\1\330\1\300\1\330\1\300\1\330\1\300\2\0" +
                  "\1\300\2\0\11\300\1\0\12\300\1\0\1\300\1\0" +
                  "\1\300\1\0\1\300\1\0\1\302\1\332\1\0\1\302" +
                  "\1\227\1\332\2\302\1\300\6\302\1\333\1\334\2\302" +
                  "\1\301\1\302\1\300\1\334\3\302\1\330\1\302\1\330" +
                  "\1\302\1\330\1\302\1\335\1\302\1\227\1\0\1\302" +
                  "\2\227\2\302\1\300\6\302\1\227\1\334\2\302\1\336" +
                  "\1\302\1\300\1\334\3\302\1\0\1\302\1\0\1\302" +
                  "\1\0\1\302\1\304\1\300\2\0\1\300\5\0\1\300" +
                  "\4\0\1\300\1\0\1\301\2\300\1\301\1\300\1\0" +
                  "\1\301\1\0\2\300\1\0\1\300\4\0\1\226\1\310" +
                  "\1\251\1\0\1\310\1\0\1\251\2\310\1\250\12\310" +
                  "\1\312\16\310\1\251\1\0\1\310\1\0\1\251\15\310" +
                  "\1\312\15\310\10\0\1\251\30\0\1\337\2\0\1\337" +
                  "\2\0\33\337\1\54\1\143\1\0\1\54\1\0\1\143" +
                  "\2\54\1\340\12\54\1\144\15\54\1\310\1\251\1\0" +
                  "\1\310\1\0\1\251\2\310\1\341\12\310\1\312\15\310" +
                  "\1\250\1\251\1\0\1\250\1\0\1\251\2\250\1\341" +
                  "\12\250\1\252\15\250\22\0\1\254\5\0\1\254\10\0" +
                  "\1\213\1\121\1\0\1\213\4\121\1\342\1\213\4\121" +
                  "\1\213\1\121\1\214\2\213\1\214\1\213\1\121\1\214" +
                  "\1\121\2\213\1\121\1\213\4\121\1\215\1\56\1\145" +
                  "\1\0\1\56\1\0\1\145\15\56\1\320\15\56\1\270" +
                  "\1\321\1\0\1\270\1\220\1\321\2\270\1\232\7\270" +
                  "\1\322\2\270\1\267\1\270\1\56\1\322\3\270\1\56" +
                  "\1\270\1\56\1\270\1\56\1\270\1\323\1\270\1\321" +
                  "\1\0\1\270\1\220\1\321\2\270\1\56\7\270\1\322" +
                  "\2\270\1\320\1\270\1\56\1\322\3\270\1\56\1\270" +
                  "\1\56\1\270\1\56\1\270\1\323\1\56\1\145\1\0" +
                  "\1\56\1\0\1\145\12\56\1\320\2\56\1\267\2\56" +
                  "\1\320\11\56\1\266\1\300\1\327\1\0\1\300\1\0" +
                  "\1\327\2\300\1\330\6\300\1\330\3\300\1\331\6\300" +
                  "\1\330\1\300\1\330\1\300\1\330\1\300\1\330\10\0" +
                  "\1\326\30\0\1\326\2\0\1\326\2\0\11\326\1\0" +
                  "\12\326\1\0\1\326\1\0\1\326\1\0\1\326\1\0" +
                  "\1\302\1\332\1\0\1\302\1\227\1\332\2\302\1\330" +
                  "\6\302\1\333\1\334\2\302\1\301\1\302\1\300\1\334" +
                  "\3\302\1\330\1\302\1\330\1\302\1\330\1\302\1\335" +
                  "\1\302\1\227\1\0\1\302\4\227\1\326\1\302\4\227" +
                  "\1\302\1\227\1\303\2\302\1\301\1\302\1\0\1\303" +
                  "\1\227\2\302\1\0\1\302\1\0\1\227\1\0\1\227" +
                  "\1\304\1\302\1\332\1\0\1\302\1\227\1\332\2\302" +
                  "\1\300\6\302\1\333\1\334\2\302\1\336\1\302\1\300" +
                  "\1\334\3\302\1\330\1\302\1\330\1\302\1\330\1\302" +
                  "\1\335\1\300\2\0\1\300\4\0\1\326\1\300\4\0" +
                  "\1\300\1\0\1\301\2\300\1\301\1\300\1\0\1\301" +
                  "\1\0\2\300\1\0\1\300\4\0\1\226\1\300\1\327" +
                  "\1\0\1\300\1\0\1\327\11\300\1\330\3\300\1\336" +
                  "\6\300\1\330\1\300\1\330\1\300\1\330\1\300\1\330" +
                  "\1\56\1\145\1\0\1\56\1\0\1\145\2\56\1\343" +
                  "\12\56\1\146\16\56\1\145\1\0\1\56\1\0\1\145" +
                  "\2\56\1\344\12\56\1\146\15\56";
  
  private static int[] zzUnpacktrans() {
    int[] result = new int[6105];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }
  
  private static int zzUnpacktrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
  
  
  /**
   * Error code for "Unknown internal scanner error".
   */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /**
   * Error code for "could not match input".
   */
  private static final int ZZ_NO_MATCH = 1;
  /**
   * Error code for "pushback value was too large".
   */
  private static final int ZZ_PUSHBACK_2BIG = 2;
  
  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };
  
  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
  
  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\17\0\1\11\5\1\2\11\12\1\2\11\4\1\1\11" +
                  "\4\1\1\11\6\1\1\11\1\1\1\11\4\1\1\11" +
                  "\2\0\1\1\1\0\1\1\4\0\2\1\1\11\7\0" +
                  "\1\1\2\0\1\1\2\0\3\1\1\11\2\1\3\0" +
                  "\1\1\5\0\1\1\4\0\1\1\1\0\1\1\2\0" +
                  "\1\1\3\0\1\11\2\0\1\1\1\0\1\1\1\0" +
                  "\1\11\1\0\1\1\5\0\1\1\1\0\1\1\3\0" +
                  "\1\11\2\0\1\11\1\1\2\0\1\1\1\11\1\0" +
                  "\1\1\2\0\1\1\4\0\1\1\1\0\1\1\4\0" +
                  "\4\1\2\0\3\1\1\0\1\1\4\0\2\1\1\11" +
                  "\3\0\2\1\1\0\1\1\2\0\1\1\2\0\1\1" +
                  "\1\0\1\1\1\0\1\1\2\0\1\1\1\11\3\0" +
                  "\4\1\2\0\1\1\1\0\2\1\1\11\2\1\5\0" +
                  "\1\1\1\0\6\1\1\0";
  
  private static int[] zzUnpackAttribute() {
    int[] result = new int[228];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }
  
  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }
  
  /**
   * Input device.
   */
  private java.io.Reader zzReader;
  
  /**
   * Current state of the DFA.
   */
  private int zzState;
  
  /**
   * Current lexical state.
   */
  private int zzLexicalState = YYINITIAL;
  
  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];
  
  /**
   * Text position at the last accepting state.
   */
  private int zzMarkedPos;
  
  /**
   * Current text position in the buffer.
   */
  private int zzCurrentPos;
  
  /**
   * Marks the beginning of the {@link #yytext()} string in the buffer.
   */
  private int zzStartRead;
  
  /**
   * Marks the last character in the buffer, that has been read from input.
   */
  private int zzEndRead;
  
  /**
   * Whether the scanner is at the end of file.
   *
   * @see #yyatEOF
   */
  private boolean zzAtEOF;
  
  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;
  
  /**
   * For the backwards DFA of general lookahead statements
   */
  private boolean[] zzFin = new boolean[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen()) + 1];
  
  /**
   * Number of newlines encountered up to the start of the matched text.
   */
  private int yyline;
  
  /**
   * Number of characters from the last newline up to the start of the matched text.
   */
  private int yycolumn;
  
  /**
   * Number of characters up to the start of the matched text.
   */
  private long yychar;
  
  /**
   * Whether the scanner is currently at the beginning of a line.
   */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;
  
  /**
   * Whether the user-EOF-code has already been executed.
   */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;
  
  /* user code: */
  
  public static final int PLAIN = 1;
  public static final int KEYWORD = 2;
  public static final int TYPE = 3;
  public static final int OPERATOR = 4;
  public static final int SEPARATOR = 5;
  public static final int LITERAL = 6;
  public static final int COMMENT = 7;
  public static final int DOC_COMMENT = 8;
  
  @Override
  public void setReader(Reader reader) {
    zzReader = reader;
  }
  
  @Override
  public void reset(Reader reader) {
    yyreset(reader);
  }
  
  @Override
  public int getState() {
    return yystate() + 1;
  }
  
  @Override
  public void setState(int state) {
    yybegin(state - 1);
  }
  
  @Override
  public int getDefaultState() {
    return YYINITIAL + 1;
  }
  
  @Override
  public int nextToken() throws IOException {
    return yylex();
  }
  
  @Override
  public int getLine() {
    return yyline;
  }
  
  @Override
  public int getColumn() {
    return yycolumn;
  }
  
  public YamlLexer() {
  
  }
  
  private int myBraceCount = 0;
  private int myReturnState = YYINITIAL;
  private int myPrevElementIndent = 0;
  
  private int myBlockScalarType = -1;
  private boolean myPossiblePlainTextScalarContinue = false;
  
  public final int getTokenStart() {
    return (int) yychar;
  }
  
  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }
  
  public boolean isCleanState() {
    return yystate() == YYINITIAL
            && myBraceCount == 0
            && yycolumn == 0
            && myPrevElementIndent == 0
            && !myPossiblePlainTextScalarContinue;
  }
  
  public void cleanMyState() {
    myBraceCount = 0;
    myBlockScalarType = -1;
    
    yycolumn = 0;
    myReturnState = YYINITIAL;
    
    myPrevElementIndent = 0;
    myPossiblePlainTextScalarContinue = false;
    yybegin(YYINITIAL);
  }
  
  
  private void goToState(int state) {
    yybegin(state);
    yypushback(yylength());
  }
  
  private int getStateAfterLineStart(int indentLen) {
    if (myPossiblePlainTextScalarContinue && yycolumn + indentLen > myPrevElementIndent) {
      return POSSIBLE_PLAIN_TEXT_STATE;
    } else {
      myPossiblePlainTextScalarContinue = false;
      return BLOCK_STATE;
    }
  }
  
  private int getStateAfterBlockScalar() {
    return myReturnState == BLOCK_STATE ? LINE_START_STATE : FLOW_STATE;
  }
  
  private void openBrace() {
    myBraceCount++;
    if (myBraceCount != 0) {
      myPrevElementIndent = 0;
      myPossiblePlainTextScalarContinue = false;
      yybegin(FLOW_STATE);
    }
  }
  
  private void closeBrace() {
    if (myBraceCount > 0) {
      myBraceCount--;
    }
    if (myBraceCount == 0) {
      yybegin(BLOCK_STATE);
    }
  }
  
  private int processScalarKey(int returnState) {
    myPrevElementIndent = yycolumn;
    myReturnState = returnState;
    yybegin(KEY_MODE);
    return KEYWORD;
  }
  
  private int processScalarKey() {
    return processScalarKey(yystate());
  }
  
  
  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  public YamlLexer(java.io.Reader in) {
    this.zzReader = in;
  }
  
  
  /**
   * Returns the maximum size of the scanner buffer, which limits the size of tokens.
   */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }
  
  /**
   * Whether the scanner buffer can grow to accommodate a larger token.
   */
  private boolean zzCanGrow() {
    return true;
  }
  
  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }
  
  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @throws java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    
    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
              zzBuffer, 0,
              zzEndRead - zzStartRead);
      
      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }
    
    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }
    
    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);
    
    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached [" + zzBuffer.length + "]");
      } else {
        throw new java.io.IOException(
                "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char) c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }
    
    /* numRead < 0 ==> end of stream */
    return true;
  }
  
  
  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer
    
    if (zzReader != null) {
      zzReader.close();
    }
  }
  
  
  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }
  
  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
    zzAtBOL = true;
    zzAtEOF = false;
    zzCurrentPos = 0;
    zzMarkedPos = 0;
    zzStartRead = 0;
    zzEndRead = 0;
    zzFinalHighSurrogate = 0;
    yyline = 0;
    yycolumn = 0;
    yychar = 0L;
  }
  
  
  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }
  
  
  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }
  
  
  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }
  
  
  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
  }
  
  
  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }
  
  
  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }
  
  
  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }
    
    throw new Error(message);
  }
  
  
  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *               {@link #yylength()}.
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);
    
    zzMarkedPos -= number;
  }
  
  
  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @throws java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;
    
    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    
    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;
    
    while (true) {
      zzMarkedPosL = zzMarkedPos;
      
      yychar += zzMarkedPosL - zzStartRead;
      
      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead;
           zzCurrentPosL < zzMarkedPosL;
           zzCurrentPosL += zzCharCount) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
          case '\u000B':  // fall through
          case '\u000C':  // fall through
          case '\u0085':  // fall through
          case '\u2028':  // fall through
          case '\u2029':
            yyline++;
            yycolumn = 0;
            zzR = false;
            break;
          case '\r':
            yyline++;
            yycolumn = 0;
            zzR = true;
            break;
          case '\n':
            if (zzR)
              zzR = false;
            else {
              yyline++;
              yycolumn = 0;
            }
            break;
          default:
            zzR = false;
            yycolumn += zzCharCount;
        }
      }
      
      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;
      
      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      
      zzState = ZZ_LEXSTATE[zzLexicalState];
      
      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }
      
      
      zzForAction:
      {
        while (true) {
          
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;
          
          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }
          
        }
      }
      
      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      
      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        {
          return YYEOF;
        }
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            goToState(getStateAfterLineStart(0));
          }
          // fall through
          case 34:
            break;
          case 2: {
            yybegin(getStateAfterLineStart(yylength()));
            return PLAIN;
          }
          // fall through
          case 35:
            break;
          case 3: {
            myPossiblePlainTextScalarContinue = true;
            return PLAIN;
          }
          // fall through
          case 36:
            break;
          case 4: {
            return PLAIN;
          }
          // fall through
          case 37:
            break;
          case 5: {
            if (!myPossiblePlainTextScalarContinue && myPrevElementIndent == 0) {
              yybegin(YYINITIAL);
            } else {
              yybegin(LINE_START_STATE);
            }
            return PLAIN;
          }
          // fall through
          case 38:
            break;
          case 6: {
            return COMMENT;
          }
          // fall through
          case 39:
            break;
          case 7: {
            myPrevElementIndent = yycolumn;
            return OPERATOR;
          }
          // fall through
          case 40:
            break;
          case 8: {
            myReturnState = yystate();
            yybegin(BS_HEADER_TAIL_STATE);
            myBlockScalarType = PLAIN;
            return myBlockScalarType;
          }
          // fall through
          case 41:
            break;
          case 9: {
            openBrace();
            return SEPARATOR;
          }
          // fall through
          case 42:
            break;
          case 10: {
            closeBrace();
            return SEPARATOR;
          }
          // fall through
          case 43:
            break;
          case 11: {
            return SEPARATOR;
          }
          // fall through
          case 44:
            break;
          case 12: {
            yybegin(LINE_START_STATE);
            return PLAIN;
          }
          // fall through
          case 45:
            break;
          case 13: {
            goToState(BLOCK_STATE);
          }
          // fall through
          case 46:
            break;
          case 14: {
            yybegin(myReturnState);
            return TYPE;
          }
          // fall through
          case 47:
            break;
          case 15: {
            yybegin(myReturnState);
            return OPERATOR;
          }
          // fall through
          case 48:
            break;
          case 16: {
            goToState(BS_BODY_STATE);
          }
          // fall through
          case 49:
            break;
          case 17: {
            assert yycolumn > myPrevElementIndent;
            return myBlockScalarType;
          }
          // fall through
          case 50:
            break;
          case 18:
            // general lookahead, find correct zzMarkedPos
          {
            int zzFState = 12;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) {
              zzFin = new boolean[zzBufferL.length + 1];
            }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
              zzFPos += Character.charCount(zzInput);
              zzFState = zzTransL[zzRowMapL[zzFState] + zzCMap(zzInput)];
            }
            if (zzFState != -1) {
              zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
            }
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }
            
            zzFState = 11;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
              zzFPos -= Character.charCount(zzInput);
              zzFState = zzTransL[zzRowMapL[zzFState] + zzCMap(zzInput)];
            }
            ;
            zzMarkedPos = zzFPos;
          }
          {
            return processScalarKey();
          }
          // fall through
          case 51:
            break;
          case 19:
            // general lookahead, find correct zzMarkedPos
          {
            int zzFState = 8;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) {
              zzFin = new boolean[zzBufferL.length + 1];
            }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
              zzFPos += Character.charCount(zzInput);
              zzFState = zzTransL[zzRowMapL[zzFState] + zzCMap(zzInput)];
            }
            if (zzFState != -1) {
              zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
            }
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }
            
            zzFState = 9;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
              zzFPos -= Character.charCount(zzInput);
              zzFState = zzTransL[zzRowMapL[zzFState] + zzCMap(zzInput)];
            }
            ;
            zzMarkedPos = zzFPos;
          }
          {
            return TYPE;
          }
          // fall through
          case 52:
            break;
          case 20: {
            return LITERAL;
          }
          // fall through
          case 53:
            break;
          case 21:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
          {
            myReturnState = yystate();
            yybegin(ANCHOR_MODE);
            return OPERATOR;
          }
          // fall through
          case 54:
            break;
          case 22:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
          {
            myReturnState = yystate();
            yybegin(ALIAS_MODE);
            return OPERATOR;
          }
          // fall through
          case 55:
            break;
          case 23:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
          {
            myPrevElementIndent = yycolumn;
            return OPERATOR;
          }
          // fall through
          case 56:
            break;
          case 24:
            // general lookahead, find correct zzMarkedPos
          {
            int zzFState = 13;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) {
              zzFin = new boolean[zzBufferL.length + 1];
            }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
              zzFPos += Character.charCount(zzInput);
              zzFState = zzTransL[zzRowMapL[zzFState] + zzCMap(zzInput)];
            }
            if (zzFState != -1) {
              zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
            }
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }
            
            zzFState = 11;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
              zzFPos -= Character.charCount(zzInput);
              zzFState = zzTransL[zzRowMapL[zzFState] + zzCMap(zzInput)];
            }
            ;
            zzMarkedPos = zzFPos;
          }
          {
            return processScalarKey();
          }
          // fall through
          case 57:
            break;
          case 25:
            // general lookahead, find correct zzMarkedPos
          {
            int zzFState = 12;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) {
              zzFin = new boolean[zzBufferL.length + 1];
            }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
              zzFPos += Character.charCount(zzInput);
              zzFState = zzTransL[zzRowMapL[zzFState] + zzCMap(zzInput)];
            }
            if (zzFState != -1) {
              zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
            }
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }
            
            zzFState = 11;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
              zzFPos -= Character.charCount(zzInput);
              zzFState = zzTransL[zzRowMapL[zzFState] + zzCMap(zzInput)];
            }
            ;
            zzMarkedPos = zzFPos;
          }
          {
            return processScalarKey(BLOCK_STATE);
          }
          // fall through
          case 58:
            break;
          case 26:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
          {
            int indent = yylength() - 1;
            yypushback(indent);
            if (indent <= myPrevElementIndent) {
              yybegin(getStateAfterBlockScalar());
              return PLAIN;
            } else {
              return PLAIN;
            }
          }
          // fall through
          case 59:
            break;
          case 27: {
            return DOC_COMMENT;
          }
          // fall through
          case 60:
            break;
          case 28:
            // general lookahead, find correct zzMarkedPos
          {
            int zzFState = 10;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) {
              zzFin = new boolean[zzBufferL.length + 1];
            }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
              zzFPos += Character.charCount(zzInput);
              zzFState = zzTransL[zzRowMapL[zzFState] + zzCMap(zzInput)];
            }
            if (zzFState != -1) {
              zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
            }
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }
            
            zzFState = 11;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
              zzFPos -= Character.charCount(zzInput);
              zzFState = zzTransL[zzRowMapL[zzFState] + zzCMap(zzInput)];
            }
            ;
            zzMarkedPos = zzFPos;
          }
          {
            return processScalarKey();
          }
          // fall through
          case 61:
            break;
          case 29:
            // general lookahead, find correct zzMarkedPos
          {
            int zzFState = 12;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) {
              zzFin = new boolean[zzBufferL.length + 1];
            }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
              zzFPos += Character.charCount(zzInput);
              zzFState = zzTransL[zzRowMapL[zzFState] + zzCMap(zzInput)];
            }
            if (zzFState != -1) {
              zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
            }
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }
            
            zzFState = 14;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
              zzFPos -= Character.charCount(zzInput);
              zzFState = zzTransL[zzRowMapL[zzFState] + zzCMap(zzInput)];
            }
            ;
            zzMarkedPos = zzFPos;
          }
          {
            return PLAIN;
          }
          // fall through
          case 62:
            break;
          case 30:
            // general lookahead, find correct zzMarkedPos
          {
            int zzFState = 10;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) {
              zzFin = new boolean[zzBufferL.length + 1];
            }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
              zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
              zzFPos += Character.charCount(zzInput);
              zzFState = zzTransL[zzRowMapL[zzFState] + zzCMap(zzInput)];
            }
            if (zzFState != -1) {
              zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1);
            }
            while (zzFPos <= zzMarkedPos) {
              zzFinL[zzFPos++] = false;
            }
            
            zzFState = 11;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
              zzFPos -= Character.charCount(zzInput);
              zzFState = zzTransL[zzRowMapL[zzFState] + zzCMap(zzInput)];
            }
            ;
            zzMarkedPos = zzFPos;
          }
          {
            return processScalarKey(BLOCK_STATE);
          }
          // fall through
          case 63:
            break;
          case 31:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 3);
          {
            goToState(getStateAfterLineStart(0));
          }
          // fall through
          case 64:
            break;
          case 32:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
          {
            cleanMyState();
            return PLAIN;
          }
          // fall through
          case 65:
            break;
          case 33:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                    (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
          {
            return PLAIN;
          }
          // fall through
          case 66:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }
  
  
}
