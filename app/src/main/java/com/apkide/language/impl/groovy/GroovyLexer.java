// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: GroovyLexer.flex

package com.apkide.language.impl.groovy;

import com.apkide.language.api.Lexer;

import java.io.IOException;
import java.io.Reader;



@SuppressWarnings("fallthrough")
public class GroovyLexer implements Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\2\16\0\4\4"+
    "\1\1\1\5\1\6\1\4\1\7\1\5\1\10\1\11"+
    "\2\12\1\13\1\14\1\12\1\15\1\16\1\17\1\20"+
    "\11\21\1\22\1\12\1\23\1\24\1\25\1\26\1\4"+
    "\1\27\1\30\1\27\1\31\1\32\1\31\5\7\1\33"+
    "\3\7\1\34\7\7\1\35\2\7\1\12\1\36\1\12"+
    "\1\5\1\37\1\4\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\7\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\7\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\12\1\70\1\12"+
    "\1\26\6\0\1\71\32\0\2\4\4\7\4\4\1\7"+
    "\2\4\1\0\7\4\1\7\4\4\1\7\5\4\27\7"+
    "\1\4\37\7\1\4\u01ca\7\4\4\14\7\16\4\5\7"+
    "\7\4\1\7\1\4\1\7\21\4\160\0\5\7\1\4"+
    "\2\7\2\4\4\7\1\4\1\7\6\4\1\7\1\4"+
    "\3\7\1\4\1\7\1\4\24\7\1\4\123\7\1\4"+
    "\213\7\1\4\5\0\2\4\246\7\1\4\46\7\2\4"+
    "\1\7\6\4\51\7\6\4\1\7\1\4\55\0\1\4"+
    "\1\0\1\4\2\0\1\4\2\0\1\4\1\0\10\4"+
    "\33\7\4\4\4\7\15\4\6\0\5\4\1\7\4\4"+
    "\13\0\1\4\1\0\3\4\53\7\37\0\4\4\2\7"+
    "\1\0\143\7\1\4\1\7\10\0\1\4\6\0\2\7"+
    "\2\0\1\4\4\0\2\7\12\0\3\7\2\4\1\7"+
    "\17\4\1\0\1\7\1\0\36\7\33\0\2\4\131\7"+
    "\13\0\1\7\16\4\12\0\41\7\11\0\2\7\4\4"+
    "\1\7\2\4\1\0\30\7\4\0\1\7\11\0\1\7"+
    "\3\0\1\7\5\0\22\4\31\7\3\0\4\4\13\7"+
    "\65\4\25\7\1\4\22\7\13\4\61\0\66\7\3\0"+
    "\1\7\22\0\1\7\7\0\12\7\2\0\2\4\12\0"+
    "\1\4\20\7\3\0\1\4\10\7\2\4\2\7\2\4"+
    "\26\7\1\4\7\7\1\4\1\7\3\4\4\7\2\4"+
    "\1\0\1\7\7\0\2\4\2\0\2\4\3\0\1\7"+
    "\10\4\1\0\4\4\2\7\1\4\3\7\2\0\2\4"+
    "\12\0\4\7\7\4\2\7\1\4\1\0\2\4\3\0"+
    "\1\4\6\7\4\4\2\7\2\4\26\7\1\4\7\7"+
    "\1\4\2\7\1\4\2\7\1\4\2\7\2\4\1\0"+
    "\1\4\5\0\4\4\2\0\2\4\3\0\3\4\1\0"+
    "\7\4\4\7\1\4\1\7\7\4\14\0\3\7\1\0"+
    "\13\4\3\0\1\4\11\7\1\4\3\7\1\4\26\7"+
    "\1\4\7\7\1\4\2\7\1\4\5\7\2\4\1\0"+
    "\1\7\10\0\1\4\3\0\1\4\3\0\2\4\1\7"+
    "\17\4\2\7\2\0\2\4\12\0\1\4\1\7\7\4"+
    "\1\7\6\0\1\4\3\0\1\4\10\7\2\4\2\7"+
    "\2\4\26\7\1\4\7\7\1\4\2\7\1\4\5\7"+
    "\2\4\1\0\1\7\7\0\2\4\2\0\2\4\3\0"+
    "\7\4\3\0\4\4\2\7\1\4\3\7\2\0\2\4"+
    "\12\0\1\4\1\7\20\4\1\0\1\7\1\4\6\7"+
    "\3\4\3\7\1\4\4\7\3\4\2\7\1\4\1\7"+
    "\1\4\2\7\3\4\2\7\3\4\3\7\3\4\14\7"+
    "\4\4\5\0\3\4\3\0\1\4\4\0\2\4\1\7"+
    "\6\4\1\0\16\4\12\0\11\4\1\7\6\4\5\0"+
    "\10\7\1\4\3\7\1\4\27\7\1\4\20\7\3\4"+
    "\1\7\7\0\1\4\3\0\1\4\4\0\7\4\2\0"+
    "\1\4\3\7\5\4\2\7\2\0\2\4\12\0\20\4"+
    "\1\7\3\0\1\4\10\7\1\4\3\7\1\4\27\7"+
    "\1\4\12\7\1\4\5\7\2\4\1\0\1\7\7\0"+
    "\1\4\3\0\1\4\4\0\7\4\2\0\7\4\1\7"+
    "\1\4\2\7\2\0\2\4\12\0\1\4\2\7\15\4"+
    "\4\0\11\7\1\4\3\7\1\4\51\7\2\0\1\7"+
    "\7\0\1\4\3\0\1\4\4\0\1\7\5\4\3\7"+
    "\1\0\7\4\3\7\2\0\2\4\12\0\12\4\6\7"+
    "\1\4\3\0\1\4\22\7\3\4\30\7\1\4\11\7"+
    "\1\4\1\7\2\4\7\7\3\4\1\0\4\4\6\0"+
    "\1\4\1\0\1\4\10\0\6\4\12\0\2\4\2\0"+
    "\15\4\60\7\1\0\2\7\7\0\4\4\10\7\10\0"+
    "\1\4\12\0\47\4\2\7\1\4\1\7\1\4\5\7"+
    "\1\4\30\7\1\4\1\7\1\4\12\7\1\0\2\7"+
    "\11\0\1\7\2\4\5\7\1\4\1\7\1\4\6\0"+
    "\2\4\12\0\2\4\4\7\40\4\1\7\27\4\2\0"+
    "\6\4\12\0\13\4\1\0\1\4\1\0\1\4\1\0"+
    "\4\4\2\0\10\7\1\4\44\7\4\4\24\0\1\4"+
    "\2\0\5\7\13\0\1\4\44\0\11\4\1\0\71\4"+
    "\53\7\24\0\1\7\12\0\6\4\6\7\4\0\4\7"+
    "\3\0\1\7\3\0\2\7\7\0\3\7\4\0\15\7"+
    "\14\0\1\7\17\0\2\4\46\7\1\4\1\7\5\4"+
    "\1\7\2\4\53\7\1\4\115\7\1\4\4\7\2\4"+
    "\7\7\1\4\1\7\1\4\4\7\2\4\51\7\1\4"+
    "\4\7\2\4\41\7\1\4\4\7\2\4\7\7\1\4"+
    "\1\7\1\4\4\7\2\4\17\7\1\4\71\7\1\4"+
    "\4\7\2\4\103\7\2\4\3\0\40\4\20\7\20\4"+
    "\126\7\2\4\6\7\3\4\u016c\7\2\4\21\7\1\4"+
    "\32\7\5\4\113\7\3\4\13\7\7\4\15\7\1\4"+
    "\4\7\3\0\13\4\22\7\3\0\13\4\22\7\2\0"+
    "\14\4\15\7\1\4\3\7\1\4\2\0\14\4\64\7"+
    "\40\0\3\4\1\7\3\4\2\7\1\0\2\4\12\0"+
    "\41\4\4\0\1\4\12\0\6\4\131\7\7\4\5\7"+
    "\2\0\42\7\1\0\1\7\5\4\106\7\12\4\37\7"+
    "\1\4\14\0\4\4\14\0\12\4\12\0\36\7\2\4"+
    "\5\7\13\4\54\7\4\4\32\7\6\4\12\0\46\4"+
    "\27\7\5\0\4\4\65\7\12\0\1\4\35\0\2\4"+
    "\13\0\6\4\12\0\15\4\1\7\10\4\16\0\1\4"+
    "\2\0\77\4\5\0\57\7\21\0\7\7\4\4\12\0"+
    "\21\4\11\0\14\4\3\0\36\7\15\0\2\7\12\0"+
    "\54\7\16\0\14\4\44\7\24\0\10\4\12\0\3\4"+
    "\3\7\12\0\44\7\2\4\11\7\7\4\53\7\2\4"+
    "\3\7\20\4\3\0\1\4\25\0\4\7\1\0\6\7"+
    "\1\0\2\7\3\0\1\7\5\4\300\7\72\0\1\4"+
    "\5\0\26\7\2\4\6\7\2\4\46\7\2\4\6\7"+
    "\2\4\10\7\1\4\1\7\1\4\1\7\1\4\1\7"+
    "\1\4\37\7\2\4\65\7\1\4\7\7\1\4\1\7"+
    "\3\4\3\7\1\4\7\7\3\4\4\7\2\4\6\7"+
    "\4\4\15\7\5\4\3\7\1\4\7\7\16\4\5\0"+
    "\30\4\2\3\5\0\20\4\2\7\23\4\1\7\13\4"+
    "\5\0\1\4\12\0\1\4\1\7\15\4\1\7\20\4"+
    "\15\7\3\4\40\7\20\4\15\0\4\4\1\0\3\4"+
    "\14\0\21\4\1\7\4\4\1\7\2\4\12\7\1\4"+
    "\1\7\3\4\5\7\6\4\1\7\1\4\1\7\1\4"+
    "\1\7\1\4\4\7\1\4\13\7\2\4\4\7\5\4"+
    "\5\7\4\4\1\7\21\4\51\7\u0177\4\57\7\1\4"+
    "\57\7\1\4\205\7\6\4\4\7\3\0\2\7\14\4"+
    "\46\7\1\4\1\7\5\4\1\7\2\4\70\7\7\4"+
    "\1\7\17\4\1\0\27\7\11\4\7\7\1\4\7\7"+
    "\1\4\7\7\1\4\7\7\1\4\7\7\1\4\7\7"+
    "\1\4\7\7\1\4\7\7\1\4\40\0\57\4\1\7"+
    "\325\4\3\7\31\4\11\7\6\0\1\4\5\7\2\4"+
    "\5\7\4\4\126\7\2\4\2\0\2\4\3\7\1\4"+
    "\132\7\1\4\4\7\5\4\53\7\1\4\136\7\21\4"+
    "\40\7\60\4\320\7\100\4\375\7\3\4\215\7\103\4"+
    "\56\7\2\4\15\7\3\4\20\7\12\0\2\7\24\4"+
    "\57\7\1\0\4\4\12\0\1\4\37\7\2\0\120\7"+
    "\2\0\45\4\11\7\2\4\147\7\2\4\65\7\2\4"+
    "\11\7\52\4\15\7\1\0\3\7\1\0\4\7\1\0"+
    "\27\7\5\0\4\4\1\0\13\4\1\7\7\4\64\7"+
    "\14\4\2\0\62\7\22\0\12\4\12\0\6\4\22\0"+
    "\6\7\3\4\1\7\1\4\2\7\13\0\34\7\10\0"+
    "\2\4\27\7\15\0\14\4\35\7\3\4\4\0\57\7"+
    "\16\0\16\4\1\7\12\0\6\4\5\7\1\0\12\7"+
    "\12\0\5\7\1\4\51\7\16\0\11\4\3\7\1\0"+
    "\10\7\2\0\2\4\12\0\6\4\27\7\3\4\1\7"+
    "\3\0\62\7\1\0\1\7\3\0\2\7\2\0\5\7"+
    "\2\0\1\7\1\0\1\7\30\4\3\7\2\4\13\7"+
    "\5\0\2\4\3\7\2\0\12\4\6\7\2\4\6\7"+
    "\2\4\6\7\11\4\7\7\1\4\7\7\1\4\53\7"+
    "\1\4\16\7\6\4\163\7\10\0\1\4\2\0\2\4"+
    "\12\0\6\4\244\7\14\4\27\7\4\4\61\7\4\4"+
    "\u0100\3\156\7\2\4\152\7\46\4\7\7\14\4\5\7"+
    "\5\4\1\7\1\0\12\7\1\4\15\7\1\4\5\7"+
    "\1\4\1\7\1\4\2\7\1\4\2\7\1\4\154\7"+
    "\41\4\153\7\22\4\100\7\2\4\66\7\50\4\15\7"+
    "\3\4\20\0\20\4\20\0\3\4\2\7\30\4\3\7"+
    "\31\4\1\7\6\4\5\7\1\4\207\7\2\4\1\0"+
    "\4\4\1\7\13\4\12\0\7\4\32\7\4\4\1\7"+
    "\1\4\32\7\13\4\131\7\3\4\6\7\2\4\6\7"+
    "\2\4\6\7\2\4\3\7\3\4\2\7\3\4\2\7"+
    "\22\4\3\0\4\4\14\7\1\4\32\7\1\4\23\7"+
    "\1\4\2\7\1\4\17\7\2\4\16\7\42\4\173\7"+
    "\105\4\65\7\210\4\1\0\202\4\35\7\3\4\61\7"+
    "\17\4\1\0\37\4\40\7\15\4\36\7\5\4\46\7"+
    "\5\0\5\4\36\7\2\4\44\7\4\4\10\7\1\4"+
    "\5\7\52\4\236\7\2\4\12\0\6\4\44\7\4\4"+
    "\44\7\4\4\50\7\10\4\64\7\234\4\67\7\11\4"+
    "\26\7\12\4\10\7\230\4\6\7\2\4\1\7\1\4"+
    "\54\7\1\4\2\7\3\4\1\7\2\4\27\7\12\4"+
    "\27\7\11\4\37\7\101\4\23\7\1\4\2\7\12\4"+
    "\26\7\12\4\32\7\106\4\70\7\6\4\2\7\100\4"+
    "\1\7\3\0\1\4\2\0\5\4\4\0\4\7\1\4"+
    "\3\7\1\4\35\7\2\4\3\0\4\4\1\0\40\4"+
    "\35\7\3\4\35\7\43\4\10\7\1\4\34\7\2\0"+
    "\31\4\66\7\12\4\26\7\12\4\23\7\15\4\22\7"+
    "\156\4\111\7\67\4\63\7\15\4\63\7\15\4\44\7"+
    "\4\0\10\4\12\0\u0146\4\52\7\1\4\2\0\3\4"+
    "\2\7\116\4\35\7\12\4\1\7\10\4\26\7\13\0"+
    "\137\4\25\7\33\4\27\7\11\4\3\0\65\7\17\0"+
    "\37\4\12\0\17\4\4\0\55\7\13\0\2\4\1\0"+
    "\17\4\1\0\2\4\31\7\7\4\12\0\6\4\3\0"+
    "\44\7\16\0\1\4\12\0\4\4\1\7\2\0\1\7"+
    "\10\4\43\7\1\0\2\4\1\7\11\4\3\0\60\7"+
    "\16\0\4\7\4\4\4\0\1\4\14\0\1\7\1\4"+
    "\1\7\43\4\22\7\1\4\31\7\14\0\6\4\1\0"+
    "\101\4\7\7\1\4\1\7\1\4\4\7\1\4\17\7"+
    "\1\4\12\7\7\4\57\7\14\0\5\4\12\0\6\4"+
    "\4\0\1\4\10\7\2\4\2\7\2\4\26\7\1\4"+
    "\7\7\1\4\2\7\1\4\5\7\1\4\2\0\1\7"+
    "\7\0\2\4\2\0\2\4\3\0\2\4\1\7\6\4"+
    "\1\0\5\4\5\7\2\0\2\4\7\0\3\4\5\0"+
    "\213\4\65\7\22\0\4\7\5\4\12\0\4\4\1\0"+
    "\3\7\36\4\60\7\24\0\2\7\1\4\1\7\10\4"+
    "\12\0\246\4\57\7\7\0\2\4\11\0\27\4\4\7"+
    "\2\0\42\4\60\7\21\0\3\4\1\7\13\4\12\0"+
    "\46\4\53\7\15\0\1\7\7\4\12\0\66\4\33\7"+
    "\2\4\17\0\4\4\12\0\306\4\54\7\17\0\145\4"+
    "\100\7\12\0\25\4\10\7\2\4\1\7\2\4\10\7"+
    "\1\4\2\7\1\4\30\7\6\0\1\4\2\0\2\4"+
    "\4\0\1\7\1\0\1\7\2\0\14\4\12\0\106\4"+
    "\10\7\2\4\47\7\7\0\2\4\7\0\1\7\1\4"+
    "\1\7\1\0\33\4\1\7\12\0\50\7\7\0\1\7"+
    "\4\0\10\4\1\0\10\4\1\7\13\0\56\7\20\0"+
    "\3\4\1\7\42\4\71\7\7\4\11\7\1\4\45\7"+
    "\10\0\1\4\10\0\1\7\17\4\12\0\30\4\36\7"+
    "\2\4\26\0\1\4\16\0\111\4\7\7\1\4\2\7"+
    "\1\4\46\7\6\0\3\4\1\0\1\4\2\0\1\4"+
    "\7\0\1\7\1\0\10\4\12\0\6\4\6\7\1\4"+
    "\2\7\1\4\40\7\5\0\1\4\2\0\1\4\5\0"+
    "\1\7\7\4\12\0\u0136\4\23\7\4\0\271\4\1\7"+
    "\54\4\4\7\37\4\232\7\146\4\157\7\21\4\304\7"+
    "\274\4\57\7\1\4\11\0\307\4\107\7\271\4\71\7"+
    "\7\4\37\7\1\4\12\0\146\4\36\7\2\4\5\0"+
    "\13\4\60\7\7\0\11\4\4\7\14\4\12\0\11\4"+
    "\25\7\5\4\23\7\260\4\100\7\200\4\113\7\4\4"+
    "\1\0\1\7\67\0\7\4\4\0\15\7\100\4\2\7"+
    "\1\4\1\7\1\0\13\4\2\0\16\4\370\7\10\4"+
    "\326\7\52\4\11\7\367\4\37\7\61\4\3\7\21\4"+
    "\4\7\10\4\u018c\7\4\4\153\7\5\4\15\7\3\4"+
    "\11\7\7\4\12\7\3\4\2\0\1\4\4\0\301\4"+
    "\5\0\3\4\26\0\2\4\7\0\36\4\4\0\224\4"+
    "\3\0\273\4\125\7\1\4\107\7\1\4\2\7\2\4"+
    "\1\7\2\4\2\7\2\4\4\7\1\4\14\7\1\4"+
    "\1\7\1\4\7\7\1\4\101\7\1\4\4\7\2\4"+
    "\10\7\1\4\7\7\1\4\34\7\1\4\4\7\1\4"+
    "\5\7\1\4\1\7\3\4\7\7\1\4\u0154\7\2\4"+
    "\31\7\1\4\31\7\1\4\37\7\1\4\31\7\1\4"+
    "\37\7\1\4\31\7\1\4\37\7\1\4\31\7\1\4"+
    "\37\7\1\4\31\7\1\4\10\7\2\4\151\0\4\4"+
    "\62\0\10\4\1\0\16\4\1\0\26\4\5\0\1\4"+
    "\17\0\120\4\7\0\1\4\21\0\2\4\7\0\1\4"+
    "\2\0\1\4\5\0\325\4\55\7\3\4\7\0\7\7"+
    "\2\4\12\0\4\4\1\7\u0171\4\54\7\16\0\5\4"+
    "\306\7\13\4\7\0\51\4\104\7\7\0\1\7\4\4"+
    "\12\0\u0156\4\1\7\117\4\4\7\1\4\33\7\1\4"+
    "\2\7\1\4\1\7\2\4\1\7\1\4\12\7\1\4"+
    "\4\7\1\4\1\7\1\4\1\7\6\4\1\7\4\4"+
    "\1\7\1\4\1\7\1\4\1\7\1\4\3\7\1\4"+
    "\2\7\1\4\1\7\2\4\1\7\1\4\1\7\1\4"+
    "\1\7\1\4\1\7\1\4\1\7\1\4\2\7\1\4"+
    "\1\7\2\4\4\7\1\4\7\7\1\4\4\7\1\4"+
    "\4\7\1\4\1\7\1\4\12\7\1\4\21\7\5\4"+
    "\3\7\1\4\5\7\1\4\21\7\u0134\4\12\0\6\4"+
    "\336\7\42\4\65\7\13\4\336\7\2\4\u0182\7\16\4"+
    "\u0131\7\37\4\36\7\342\4\113\7\266\4\1\0\36\4"+
    "\140\0\200\4\360\0\20\4";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\1\1\2\1\3\1\4"+
    "\2\2\1\4\1\2\2\3\3\2\20\1\1\2\3\3"+
    "\1\0\1\3\2\5\3\3\1\1\1\6\10\1\1\6"+
    "\10\1\1\6\1\1\1\6\21\1\1\5\1\7\1\3"+
    "\1\0\1\3\10\1\1\6\10\1\1\6\24\1\1\0"+
    "\2\7\1\0\31\1\1\5\1\0\5\1\1\6\12\1"+
    "\1\6\32\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\72\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c"+
    "\0\u0366\0\72\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\u0740\0\72\0\u077a\0\u07b4\0\u07ee\0\u0828"+
    "\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8"+
    "\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98"+
    "\0\u0122\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe"+
    "\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce"+
    "\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e"+
    "\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e"+
    "\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e"+
    "\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e"+
    "\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde"+
    "\0\u1c18\0\72\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74"+
    "\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44"+
    "\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114"+
    "\0\u214e\0\u2188\0\u21c2\0\u21fc\0\72\0\u2236\0\u2270\0\u22aa"+
    "\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a"+
    "\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u1a82\0\u2610"+
    "\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0"+
    "\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0"+
    "\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80"+
    "\0\u2bba";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\2\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\4\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\4\2\22\7\6\1\2\1\6"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\6"+
    "\1\32\1\6\1\33\1\6\1\34\1\6\1\35\1\36"+
    "\1\37\1\40\1\6\1\41\1\42\3\6\1\43\74\0"+
    "\2\3\113\0\1\22\45\0\2\5\1\0\3\5\1\44"+
    "\27\5\1\45\33\5\1\6\6\0\1\6\10\0\2\6"+
    "\5\0\7\6\1\0\31\6\1\0\1\6\10\0\1\22"+
    "\13\0\1\22\45\0\2\10\1\0\6\10\1\44\24\10"+
    "\1\46\33\10\14\0\1\22\7\0\1\22\62\0\1\22"+
    "\6\0\2\22\62\0\1\47\1\0\2\50\63\0\1\51"+
    "\3\0\1\52\4\0\1\22\63\0\1\50\1\0\2\17"+
    "\6\0\1\53\1\44\1\54\1\44\1\0\1\55\1\0"+
    "\1\17\1\0\1\53\1\0\1\44\1\54\1\44\4\0"+
    "\1\44\12\0\1\55\22\0\1\50\1\0\2\17\7\0"+
    "\1\44\1\54\1\44\3\0\1\17\3\0\1\44\1\54"+
    "\1\44\4\0\1\44\41\0\1\22\72\0\1\4\1\22"+
    "\45\0\1\6\6\0\1\6\10\0\2\6\5\0\7\6"+
    "\1\0\2\6\1\56\16\6\1\57\7\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\5\0\7\6\1\0\16\6"+
    "\1\60\1\6\1\61\6\6\1\62\1\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\5\0\7\6\1\0\1\6"+
    "\1\63\6\6\1\64\2\6\1\65\2\6\1\66\12\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\5\0\7\6"+
    "\1\0\5\6\1\67\10\6\1\70\12\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\5\0\7\6\1\0\13\6"+
    "\1\71\1\6\1\72\10\6\1\73\2\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\5\0\7\6\1\0\1\6"+
    "\1\74\7\6\1\75\1\6\1\76\2\6\1\77\12\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\5\0\7\6"+
    "\1\0\16\6\1\100\12\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\5\0\7\6\1\0\6\6\1\101\5\6"+
    "\1\102\1\103\13\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\16\6\1\104\12\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\1\6\1\105\3\6\1\106\15\6\1\107\5\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\1\6\1\110\16\6\1\111\2\6\1\112\5\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\5\6\1\113\23\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\10\6\1\114\11\6\1\115"+
    "\1\116\1\6\1\117\1\6\1\120\1\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\5\0\7\6\1\0\10\6"+
    "\1\121\7\6\1\122\10\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\5\0\7\6\1\0\16\6\1\123\12\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\5\0\7\6"+
    "\1\0\10\6\1\124\20\6\1\0\1\6\24\0\1\22"+
    "\43\0\1\22\1\0\2\5\1\0\67\5\2\10\1\0"+
    "\67\10\16\0\1\11\73\0\2\50\7\0\1\44\1\54"+
    "\4\0\1\50\3\0\1\44\1\54\1\44\24\0\13\125"+
    "\1\126\56\125\2\52\1\0\67\52\20\0\2\53\11\0"+
    "\1\44\3\0\1\53\12\0\1\44\33\0\2\127\2\0"+
    "\2\127\7\0\1\44\5\0\1\127\3\0\1\44\1\0"+
    "\1\44\42\0\1\130\1\0\2\131\5\0\4\131\1\44"+
    "\3\0\7\131\4\0\1\44\17\0\1\6\6\0\1\6"+
    "\10\0\2\6\5\0\7\6\1\0\21\6\1\132\7\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\5\0\7\6"+
    "\1\0\21\6\1\133\7\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\5\0\7\6\1\0\16\6\1\134\12\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\5\0\7\6"+
    "\1\0\5\6\1\135\23\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\5\0\7\6\1\0\22\6\1\136\6\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\5\0\7\6"+
    "\1\0\21\6\1\136\1\137\6\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\1\6\1\77"+
    "\27\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\1\6\1\140\27\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\15\6\1\141"+
    "\13\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\6\6\1\142\22\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\23\6\1\143"+
    "\5\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\21\6\1\136\7\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\23\6\1\144"+
    "\5\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\22\6\1\145\6\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\13\6\1\71"+
    "\15\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\15\6\1\146\13\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\16\6\1\147"+
    "\12\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\20\6\1\101\10\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\22\6\1\150"+
    "\6\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\17\6\1\151\11\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\21\6\1\152"+
    "\1\153\6\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\5\0\7\6\1\0\15\6\1\154\13\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\5\0\7\6\1\0\22\6"+
    "\1\155\6\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\5\0\7\6\1\0\25\6\1\101\3\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\5\0\7\6\1\0\13\6"+
    "\1\156\15\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\5\0\7\6\1\0\3\6\1\157\25\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\5\0\7\6\1\0\11\6"+
    "\1\160\4\6\1\161\12\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\5\0\7\6\1\0\2\6\1\162\26\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\5\0\7\6"+
    "\1\0\22\6\1\163\6\6\1\0\2\6\6\0\1\6"+
    "\10\0\2\6\5\0\7\6\1\0\16\6\1\164\12\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\5\0\7\6"+
    "\1\0\1\6\1\165\16\6\1\166\10\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\5\0\7\6\1\0\17\6"+
    "\1\167\11\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\5\0\7\6\1\0\11\6\1\170\17\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\5\0\7\6\1\0\15\6"+
    "\1\171\13\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\5\0\7\6\1\0\11\6\1\172\6\6\1\173\10\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\5\0\7\6"+
    "\1\0\1\6\1\174\21\6\1\136\3\6\1\101\1\6"+
    "\1\0\2\6\6\0\1\6\10\0\2\6\5\0\7\6"+
    "\1\0\11\6\1\175\1\6\1\176\15\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\5\0\7\6\1\0\11\6"+
    "\1\177\17\6\1\0\1\6\13\125\1\200\56\125\13\201"+
    "\1\126\3\201\1\202\52\201\20\0\2\127\7\0\1\44"+
    "\5\0\1\127\3\0\1\44\1\0\1\44\44\0\2\203"+
    "\5\0\4\203\4\0\7\203\42\0\1\203\1\0\2\131"+
    "\5\0\4\131\1\44\1\54\2\0\7\131\4\0\1\44"+
    "\3\0\1\54\13\0\1\6\6\0\1\6\10\0\2\6"+
    "\5\0\7\6\1\0\22\6\1\204\6\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\5\0\7\6\1\0\21\6"+
    "\1\205\7\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\5\0\7\6\1\0\13\6\1\206\15\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\5\0\7\6\1\0\1\6"+
    "\1\207\27\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\5\0\7\6\1\0\5\6\1\101\23\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\5\0\7\6\1\0\3\6"+
    "\1\210\25\6\1\0\2\6\6\0\1\6\10\0\2\6"+
    "\5\0\7\6\1\0\21\6\1\172\7\6\1\0\2\6"+
    "\6\0\1\6\10\0\2\6\5\0\7\6\1\0\21\6"+
    "\1\211\1\212\6\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\1\6\1\213\27\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\2\6\1\177\26\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\14\6\1\101\14\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\5\6\1\214\23\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\1\6\1\215\27\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\1\6\1\211\27\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\16\6\1\101\12\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\13\6\1\216\2\6\1\164\12\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\22\6\1\217"+
    "\6\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\5\6\1\220\23\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\7\6\1\101"+
    "\21\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\11\6\1\221\17\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\13\6\1\101"+
    "\15\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\12\6\1\222\16\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\24\6\1\223"+
    "\4\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\22\6\1\224\6\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\13\6\1\225"+
    "\15\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\23\6\1\226\5\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\20\6\1\211"+
    "\10\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\22\6\1\225\6\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\11\6\1\227"+
    "\17\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\5\6\1\77\23\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\22\6\1\137"+
    "\6\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\3\6\1\230\25\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\21\6\1\101"+
    "\7\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\5\6\1\231\10\6\1\232\12\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\15\6\1\233\13\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\4\6\1\101\24\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\1\6\1\234\27\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\13\6\1\136\15\6\1\0"+
    "\1\6\13\125\1\200\3\125\1\235\52\125\13\201\1\236"+
    "\56\201\20\0\2\203\5\0\4\203\1\0\1\54\2\0"+
    "\7\203\10\0\1\54\13\0\1\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\20\6\1\237\10\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\5\6\1\164\23\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\5\6\1\240\23\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\12\6\1\101\16\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\10\6\1\101\20\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\22\6\1\101\6\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\11\6\1\241\17\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\23\6\1\242\5\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\15\6\1\243\13\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\13\6\1\244\15\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\5\6\1\245\23\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\1\6\1\246\27\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\20\6\1\247\10\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\24\6\1\136\4\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\1\6\1\250\27\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\1\6\1\62\27\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\5\6\1\251\23\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\11\6\1\252\17\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\20\6\1\253\10\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\3\6\1\254\25\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\10\6\1\255\20\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\1\6\1\256\27\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\25\6\1\257\3\6\1\0"+
    "\2\6\6\0\1\6\10\0\2\6\5\0\7\6\1\0"+
    "\21\6\1\260\7\6\1\0\2\6\6\0\1\6\10\0"+
    "\2\6\5\0\7\6\1\0\22\6\1\124\6\6\1\0"+
    "\1\6\13\201\1\236\3\201\1\202\52\201\1\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\1\6\1\261"+
    "\27\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\1\6\1\253\27\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\15\6\1\262"+
    "\13\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\13\6\1\211\15\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\4\6\1\172"+
    "\24\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\13\6\1\263\15\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\14\6\1\264"+
    "\14\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\15\6\1\265\13\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\6\6\1\266"+
    "\22\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\7\6\1\136\21\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\3\6\1\267"+
    "\25\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\3\6\1\101\25\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\15\6\1\101"+
    "\13\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\22\6\1\270\6\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\20\6\1\271"+
    "\10\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\4\6\1\272\24\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\11\6\1\273"+
    "\17\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\3\6\1\211\25\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\23\6\1\136"+
    "\5\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\27\6\1\101\1\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\5\6\1\274"+
    "\23\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\3\6\1\275\25\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\1\6\1\276"+
    "\27\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\22\6\1\277\6\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\6\6\1\300"+
    "\22\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\16\6\1\301\12\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\21\6\1\302"+
    "\7\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\5\6\1\303\23\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\15\6\1\304"+
    "\13\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\5\6\1\305\23\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\3\6\1\136"+
    "\25\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\5\6\1\175\23\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\17\6\1\101"+
    "\11\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\15\6\1\306\13\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\1\6\1\307"+
    "\27\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\15\6\1\211\13\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\22\6\1\172"+
    "\6\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\16\6\1\310\12\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\11\6\1\311"+
    "\17\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\6\6\1\136\22\6\1\0\2\6\6\0"+
    "\1\6\10\0\2\6\5\0\7\6\1\0\6\6\1\101"+
    "\22\6\1\0\2\6\6\0\1\6\10\0\2\6\5\0"+
    "\7\6\1\0\30\6\1\277\1\0\1\6";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11252];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\10\1\1\11\21\1\1\11"+
    "\2\1\1\0\60\1\1\0\47\1\1\0\1\1\1\11"+
    "\1\0\31\1\1\11\1\0\53\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  	public static final int PLAIN = 1;
  	public static final int KEYWORD = 2;
  	public static final int TYPE = 3;
  	public static final int OPERATOR = 4;
  	public static final int SEPARATOR = 5;
  	public static final int LITERAL = 6;
  	public static final int COMMENT = 7;
  	public static final int DOC_COMMENT = 8;

	public GroovyLexer(){

	}

	@Override
    public void setReader(Reader reader){
		zzReader=reader;
	}

	@Override
  	public void reset(Reader reader){
  		yyreset(reader);
  	}

  	@Override
  	public int getState(){
  		return yystate()+1;
  	}

  	@Override
  	public void setState(int state){
  		yybegin(state-1);
  	}

  	@Override
      public int getDefaultState(){
  		return YYINITIAL+1;
  	}

  	@Override
  	public int nextToken()throws IOException{
  		return yylex();
  	}

  	@Override
  	public int getLine(){
  		return yyline;
  	}

  	@Override
  	public int getColumn(){
  		return yycolumn;
  	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GroovyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PLAIN;
            }
          // fall through
          case 8: break;
          case 2:
            { return OPERATOR;
            }
          // fall through
          case 9: break;
          case 3:
            { return LITERAL;
            }
          // fall through
          case 10: break;
          case 4:
            { return SEPARATOR;
            }
          // fall through
          case 11: break;
          case 5:
            { return COMMENT;
            }
          // fall through
          case 12: break;
          case 6:
            { return KEYWORD;
            }
          // fall through
          case 13: break;
          case 7:
            { return DOC_COMMENT;
            }
          // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
