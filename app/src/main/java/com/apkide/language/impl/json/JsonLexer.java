// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: JsonLexer.flex

package com.apkide.language.impl.json;

import com.apkide.language.api.Lexer;

import java.io.IOException;
import java.io.Reader;


@SuppressWarnings("fallthrough")
public class JsonLexer implements Lexer {
	
	/**
	 * This character denotes the end of file.
	 */
	public static final int YYEOF = -1;
	
	/**
	 * Initial size of the lookahead buffer.
	 */
	private static final int ZZ_BUFFERSIZE = 16384;
	
	// Lexical states.
	public static final int YYINITIAL = 0;
	
	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
			0, 0
	};
	
	/**
	 * Top-level table for translating characters to character classes
	 */
	private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();
	
	private static final String ZZ_CMAP_TOP_PACKED_0 =
			"\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
					"\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
					"\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
					"\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
					"\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300" +
					"\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700" +
					"\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100" +
					"\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200" +
					"\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00" +
					"\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100" +
					"\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900" +
					"\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000" +
					"\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100" +
					"\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900" +
					"\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00" +
					"\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200" +
					"\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800" +
					"\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00" +
					"\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100" +
					"\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00" +
					"\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900" +
					"\u02fe\u1f00";
	
	private static int[] zzUnpackcmap_top() {
		int[] result = new int[4352];
		int offset = 0;
		offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
		return result;
	}
	
	private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}
	
	
	/**
	 * Second-level tables for translating characters to character classes
	 */
	private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();
	
	private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
			"\11\0\1\1\1\2\2\3\1\2\16\0\4\4\1\1" +
					"\1\0\1\5\1\4\1\0\2\4\1\6\2\0\1\7" +
					"\1\10\1\11\1\12\1\13\1\14\1\15\11\16\1\17" +
					"\1\4\3\0\1\4\5\0\1\20\3\0\1\21\4\0" +
					"\1\22\14\0\1\11\1\23\1\11\2\0\1\4\1\24" +
					"\3\0\1\25\1\26\2\0\1\27\2\0\1\30\1\0" +
					"\1\31\3\0\1\32\1\33\1\34\1\35\3\0\1\36" +
					"\1\0\1\11\1\4\1\11\7\0\1\37\32\0\1\1" +
					"\1\4\4\0\4\4\1\0\2\4\1\0\7\4\1\0" +
					"\4\4\1\0\5\4\27\0\1\4\37\0\1\4\u01ca\0" +
					"\4\4\14\0\16\4\5\0\7\4\1\0\1\4\1\0" +
					"\21\4\165\0\1\4\2\0\2\4\4\0\1\4\1\0" +
					"\6\4\1\0\1\4\3\0\1\4\1\0\1\4\24\0" +
					"\1\4\123\0\1\4\213\0\1\4\5\0\2\4\246\0" +
					"\1\4\46\0\2\4\1\0\6\4\51\0\6\4\1\0" +
					"\1\4\55\0\1\4\1\0\1\4\2\0\1\4\2\0" +
					"\1\4\1\0\10\4\33\0\4\4\4\0\15\4\6\0" +
					"\5\4\1\0\4\4\13\0\1\4\1\0\3\4\112\0" +
					"\4\4\146\0\1\4\11\0\1\4\12\0\1\4\23\0" +
					"\2\4\1\0\17\4\74\0\2\4\145\0\16\4\66\0" +
					"\4\4\1\0\2\4\61\0\22\4\34\0\4\4\13\0" +
					"\65\4\25\0\1\4\22\0\13\4\221\0\2\4\12\0" +
					"\1\4\23\0\1\4\10\0\2\4\2\0\2\4\26\0" +
					"\1\4\7\0\1\4\1\0\3\4\4\0\2\4\11\0" +
					"\2\4\2\0\2\4\4\0\10\4\1\0\4\4\2\0" +
					"\1\4\5\0\2\4\16\0\7\4\2\0\1\4\1\0" +
					"\2\4\3\0\1\4\6\0\4\4\2\0\2\4\26\0" +
					"\1\4\7\0\1\4\2\0\1\4\2\0\1\4\2\0" +
					"\2\4\1\0\1\4\5\0\4\4\2\0\2\4\3\0" +
					"\3\4\1\0\7\4\4\0\1\4\1\0\7\4\20\0" +
					"\13\4\3\0\1\4\11\0\1\4\3\0\1\4\26\0" +
					"\1\4\7\0\1\4\2\0\1\4\5\0\2\4\12\0" +
					"\1\4\3\0\1\4\3\0\2\4\1\0\17\4\4\0" +
					"\2\4\12\0\1\4\1\0\7\4\7\0\1\4\3\0" +
					"\1\4\10\0\2\4\2\0\2\4\26\0\1\4\7\0" +
					"\1\4\2\0\1\4\5\0\2\4\11\0\2\4\2\0" +
					"\2\4\3\0\7\4\3\0\4\4\2\0\1\4\5\0" +
					"\2\4\12\0\1\4\1\0\20\4\2\0\1\4\6\0" +
					"\3\4\3\0\1\4\4\0\3\4\2\0\1\4\1\0" +
					"\1\4\2\0\3\4\2\0\3\4\3\0\3\4\14\0" +
					"\4\4\5\0\3\4\3\0\1\4\4\0\2\4\1\0" +
					"\6\4\1\0\16\4\12\0\11\4\1\0\6\4\15\0" +
					"\1\4\3\0\1\4\27\0\1\4\20\0\3\4\10\0" +
					"\1\4\3\0\1\4\4\0\7\4\2\0\1\4\3\0" +
					"\5\4\4\0\2\4\12\0\20\4\4\0\1\4\10\0" +
					"\1\4\3\0\1\4\27\0\1\4\12\0\1\4\5\0" +
					"\2\4\11\0\1\4\3\0\1\4\4\0\7\4\2\0" +
					"\7\4\1\0\1\4\4\0\2\4\12\0\1\4\2\0" +
					"\15\4\15\0\1\4\3\0\1\4\63\0\1\4\3\0" +
					"\1\4\5\0\5\4\4\0\7\4\5\0\2\4\12\0" +
					"\12\4\6\0\1\4\3\0\1\4\22\0\3\4\30\0" +
					"\1\4\11\0\1\4\1\0\2\4\7\0\3\4\1\0" +
					"\4\4\6\0\1\4\1\0\1\4\10\0\6\4\12\0" +
					"\2\4\2\0\15\4\72\0\4\4\20\0\1\4\12\0" +
					"\47\4\2\0\1\4\1\0\1\4\5\0\1\4\30\0" +
					"\1\4\1\0\1\4\27\0\2\4\5\0\1\4\1\0" +
					"\1\4\6\0\2\4\12\0\2\4\4\0\40\4\1\0" +
					"\27\4\2\0\6\4\12\0\13\4\1\0\1\4\1\0" +
					"\1\4\1\0\4\4\12\0\1\4\44\0\4\4\24\0" +
					"\1\4\22\0\1\4\44\0\11\4\1\0\71\4\112\0" +
					"\6\4\116\0\2\4\46\0\1\4\1\0\5\4\1\0" +
					"\2\4\53\0\1\4\115\0\1\4\4\0\2\4\7\0" +
					"\1\4\1\0\1\4\4\0\2\4\51\0\1\4\4\0" +
					"\2\4\41\0\1\4\4\0\2\4\7\0\1\4\1\0" +
					"\1\4\4\0\2\4\17\0\1\4\71\0\1\4\4\0" +
					"\2\4\103\0\2\4\3\0\40\4\20\0\20\4\126\0" +
					"\2\4\6\0\3\4\u016c\0\2\4\21\0\1\1\32\0" +
					"\5\4\113\0\3\4\13\0\7\4\15\0\1\4\7\0" +
					"\13\4\25\0\13\4\24\0\14\4\15\0\1\4\3\0" +
					"\1\4\2\0\14\4\124\0\3\4\1\0\3\4\3\0" +
					"\2\4\12\0\41\4\4\0\1\4\12\0\6\4\131\0" +
					"\7\4\53\0\5\4\106\0\12\4\37\0\1\4\14\0" +
					"\4\4\14\0\12\4\50\0\2\4\5\0\13\4\54\0" +
					"\4\4\32\0\6\4\12\0\46\4\34\0\4\4\77\0" +
					"\1\4\35\0\2\4\13\0\6\4\12\0\15\4\1\0" +
					"\10\4\16\0\1\4\2\0\77\4\114\0\4\4\12\0" +
					"\21\4\11\0\14\4\164\0\14\4\70\0\10\4\12\0" +
					"\3\4\61\0\2\4\11\0\7\4\53\0\2\4\3\0" +
					"\20\4\3\0\1\4\47\0\5\4\372\0\1\4\33\0" +
					"\2\4\6\0\2\4\46\0\2\4\6\0\2\4\10\0" +
					"\1\4\1\0\1\4\1\0\1\4\1\0\1\4\37\0" +
					"\2\4\65\0\1\4\7\0\1\4\1\0\3\4\3\0" +
					"\1\4\7\0\3\4\4\0\2\4\6\0\4\4\15\0" +
					"\5\4\3\0\1\4\7\0\3\4\13\1\5\0\30\4" +
					"\2\3\5\0\1\1\17\4\2\0\23\4\1\0\12\4" +
					"\1\1\5\0\1\4\12\0\1\4\1\0\15\4\1\0" +
					"\20\4\15\0\3\4\40\0\20\4\15\0\4\4\1\0" +
					"\3\4\14\0\21\4\1\0\4\4\1\0\2\4\12\0" +
					"\1\4\1\0\3\4\5\0\6\4\1\0\1\4\1\0" +
					"\1\4\1\0\1\4\4\0\1\4\13\0\2\4\4\0" +
					"\5\4\5\0\4\4\1\0\21\4\51\0\u0177\4\57\0" +
					"\1\4\57\0\1\4\205\0\6\4\11\0\14\4\46\0" +
					"\1\4\1\0\5\4\1\0\2\4\70\0\7\4\1\0" +
					"\17\4\30\0\11\4\7\0\1\4\7\0\1\4\7\0" +
					"\1\4\7\0\1\4\7\0\1\4\7\0\1\4\7\0" +
					"\1\4\7\0\1\4\40\0\57\4\1\0\320\4\1\1" +
					"\4\4\3\0\31\4\17\0\1\4\5\0\2\4\5\0" +
					"\4\4\126\0\2\4\2\0\2\4\3\0\1\4\132\0" +
					"\1\4\4\0\5\4\53\0\1\4\136\0\21\4\40\0" +
					"\60\4\320\0\100\4\375\0\3\4\215\0\103\4\56\0" +
					"\2\4\15\0\3\4\34\0\24\4\60\0\4\4\12\0" +
					"\1\4\163\0\45\4\11\0\2\4\147\0\2\4\65\0" +
					"\2\4\11\0\52\4\63\0\4\4\1\0\13\4\1\0" +
					"\7\4\64\0\14\4\106\0\12\4\12\0\6\4\30\0" +
					"\3\4\1\0\1\4\61\0\2\4\44\0\14\4\35\0" +
					"\3\4\101\0\16\4\13\0\6\4\37\0\1\4\67\0" +
					"\11\4\16\0\2\4\12\0\6\4\27\0\3\4\111\0" +
					"\30\4\3\0\2\4\20\0\2\4\5\0\12\4\6\0" +
					"\2\4\6\0\2\4\6\0\11\4\7\0\1\4\7\0" +
					"\1\4\53\0\1\4\16\0\6\4\173\0\1\4\2\0" +
					"\2\4\12\0\6\4\244\0\14\4\27\0\4\4\61\0" +
					"\4\4\u0100\40\156\0\2\4\152\0\46\4\7\0\14\4" +
					"\5\0\5\4\14\0\1\4\15\0\1\4\5\0\1\4" +
					"\1\0\1\4\2\0\1\4\2\0\1\4\154\0\41\4" +
					"\153\0\22\4\100\0\2\4\66\0\50\4\15\0\3\4" +
					"\20\0\20\4\20\0\3\4\2\0\30\4\3\0\31\4" +
					"\1\0\6\4\5\0\1\4\207\0\2\4\1\0\4\4" +
					"\1\0\13\4\12\0\7\4\32\0\4\4\1\0\1\4" +
					"\32\0\13\4\131\0\3\4\6\0\2\4\6\0\2\4" +
					"\6\0\2\4\3\0\3\4\2\0\3\4\2\0\22\4" +
					"\3\0\4\4\14\0\1\4\32\0\1\4\23\0\1\4" +
					"\2\0\1\4\17\0\2\4\16\0\42\4\173\0\105\4" +
					"\65\0\210\4\1\0\202\4\35\0\3\4\61\0\17\4" +
					"\1\0\37\4\40\0\15\4\36\0\5\4\53\0\5\4" +
					"\36\0\2\4\44\0\4\4\10\0\1\4\5\0\52\4" +
					"\236\0\2\4\12\0\6\4\44\0\4\4\44\0\4\4" +
					"\50\0\10\4\64\0\234\4\67\0\11\4\26\0\12\4" +
					"\10\0\230\4\6\0\2\4\1\0\1\4\54\0\1\4" +
					"\2\0\3\4\1\0\2\4\27\0\12\4\27\0\11\4" +
					"\37\0\101\4\23\0\1\4\2\0\12\4\26\0\12\4" +
					"\32\0\106\4\70\0\6\4\2\0\100\4\4\0\1\4" +
					"\2\0\5\4\10\0\1\4\3\0\1\4\35\0\2\4" +
					"\3\0\4\4\1\0\40\4\35\0\3\4\35\0\43\4" +
					"\10\0\1\4\36\0\31\4\66\0\12\4\26\0\12\4" +
					"\23\0\15\4\22\0\156\4\111\0\67\4\63\0\15\4" +
					"\63\0\15\4\50\0\10\4\12\0\u0146\4\52\0\1\4" +
					"\2\0\3\4\2\0\116\4\35\0\12\4\1\0\10\4" +
					"\41\0\137\4\25\0\33\4\27\0\11\4\107\0\37\4" +
					"\12\0\17\4\74\0\2\4\1\0\17\4\1\0\2\4" +
					"\31\0\7\4\12\0\6\4\65\0\1\4\12\0\4\4" +
					"\4\0\10\4\44\0\2\4\1\0\11\4\105\0\4\4" +
					"\4\0\1\4\15\0\1\4\1\0\43\4\22\0\1\4" +
					"\45\0\6\4\1\0\101\4\7\0\1\4\1\0\1\4" +
					"\4\0\1\4\17\0\1\4\12\0\7\4\73\0\5\4" +
					"\12\0\6\4\4\0\1\4\10\0\2\4\2\0\2\4" +
					"\26\0\1\4\7\0\1\4\2\0\1\4\5\0\1\4" +
					"\12\0\2\4\2\0\2\4\3\0\2\4\1\0\6\4" +
					"\1\0\5\4\7\0\2\4\7\0\3\4\5\0\213\4" +
					"\113\0\5\4\12\0\4\4\4\0\36\4\106\0\1\4" +
					"\1\0\10\4\12\0\246\4\66\0\2\4\11\0\27\4" +
					"\6\0\42\4\101\0\3\4\1\0\13\4\12\0\46\4" +
					"\71\0\7\4\12\0\66\4\33\0\2\4\17\0\4\4" +
					"\12\0\306\4\73\0\145\4\112\0\25\4\10\0\2\4" +
					"\1\0\2\4\10\0\1\4\2\0\1\4\36\0\1\4" +
					"\2\0\2\4\11\0\14\4\12\0\106\4\10\0\2\4" +
					"\56\0\2\4\10\0\1\4\2\0\33\4\77\0\10\4" +
					"\1\0\10\4\112\0\3\4\1\0\42\4\71\0\7\4" +
					"\11\0\1\4\55\0\1\4\11\0\17\4\12\0\30\4" +
					"\36\0\2\4\26\0\1\4\16\0\111\4\7\0\1\4" +
					"\2\0\1\4\54\0\3\4\1\0\1\4\2\0\1\4" +
					"\11\0\10\4\12\0\6\4\6\0\1\4\2\0\1\4" +
					"\45\0\1\4\2\0\1\4\6\0\7\4\12\0\u0136\4" +
					"\27\0\271\4\1\0\54\4\4\0\37\4\232\0\146\4" +
					"\157\0\21\4\304\0\274\4\57\0\1\4\11\0\307\4" +
					"\107\0\271\4\71\0\7\4\37\0\1\4\12\0\146\4" +
					"\36\0\2\4\5\0\13\4\67\0\11\4\4\0\14\4" +
					"\12\0\11\4\25\0\5\4\23\0\260\4\100\0\200\4" +
					"\113\0\4\4\71\0\7\4\21\0\100\4\2\0\1\4" +
					"\2\0\13\4\2\0\16\4\370\0\10\4\326\0\52\4" +
					"\11\0\367\4\37\0\61\4\3\0\21\4\4\0\10\4" +
					"\u018c\0\4\4\153\0\5\4\15\0\3\4\11\0\7\4" +
					"\12\0\3\4\2\0\1\4\4\0\301\4\5\0\3\4" +
					"\26\0\2\4\7\0\36\4\4\0\224\4\3\0\273\4" +
					"\125\0\1\4\107\0\1\4\2\0\2\4\1\0\2\4" +
					"\2\0\2\4\4\0\1\4\14\0\1\4\1\0\1\4" +
					"\7\0\1\4\101\0\1\4\4\0\2\4\10\0\1\4" +
					"\7\0\1\4\34\0\1\4\4\0\1\4\5\0\1\4" +
					"\1\0\3\4\7\0\1\4\u0154\0\2\4\31\0\1\4" +
					"\31\0\1\4\37\0\1\4\31\0\1\4\37\0\1\4" +
					"\31\0\1\4\37\0\1\4\31\0\1\4\37\0\1\4" +
					"\31\0\1\4\10\0\2\4\151\0\4\4\62\0\10\4" +
					"\1\0\16\4\1\0\26\4\5\0\1\4\17\0\120\4" +
					"\7\0\1\4\21\0\2\4\7\0\1\4\2\0\1\4" +
					"\5\0\325\4\55\0\3\4\16\0\2\4\12\0\4\4" +
					"\1\0\u0171\4\72\0\5\4\306\0\13\4\7\0\51\4" +
					"\114\0\4\4\12\0\u0156\4\1\0\117\4\4\0\1\4" +
					"\33\0\1\4\2\0\1\4\1\0\2\4\1\0\1\4" +
					"\12\0\1\4\4\0\1\4\1\0\1\4\1\0\6\4" +
					"\1\0\4\4\1\0\1\4\1\0\1\4\1\0\1\4" +
					"\3\0\1\4\2\0\1\4\1\0\2\4\1\0\1\4" +
					"\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4" +
					"\2\0\1\4\1\0\2\4\4\0\1\4\7\0\1\4" +
					"\4\0\1\4\4\0\1\4\1\0\1\4\12\0\1\4" +
					"\21\0\5\4\3\0\1\4\5\0\1\4\21\0\u0134\4" +
					"\12\0\6\4\336\0\42\4\65\0\13\4\336\0\2\4" +
					"\u0182\0\16\4\u0131\0\37\4\36\0\342\4\113\0\266\4" +
					"\1\0\36\4\140\0\200\4\360\0\20\4";
	
	private static int[] zzUnpackcmap_blocks() {
		int[] result = new int[31232];
		int offset = 0;
		offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
		return result;
	}
	
	private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}
	
	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();
	
	private static final String ZZ_ACTION_PACKED_0 =
			"\1\0\1\1\2\2\2\3\1\4\2\1\2\3\1\5" +
					"\5\1\1\2\1\3\2\0\1\6\1\7\1\1\1\3" +
					"\5\1\1\6\1\1\1\7\3\3\1\1\1\3\3\1" +
					"\1\0\1\6\1\1\1\10\1\6\3\1";
	
	private static int[] zzUnpackAction() {
		int[] result = new int[49];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}
	
	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}
	
	
	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
	
	private static final String ZZ_ROWMAP_PACKED_0 =
			"\0\0\0\41\0\102\0\143\0\204\0\245\0\143\0\306" +
					"\0\347\0\u0108\0\u0129\0\143\0\u014a\0\u016b\0\u018c\0\u01ad" +
					"\0\u01ce\0\u01ef\0\143\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294" +
					"\0\u02b5\0\u02d6\0\u02f7\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c" +
					"\0\u03bd\0\u03de\0\u03ff\0\u0420\0\u0441\0\41\0\u0462\0\u0483" +
					"\0\u04a4\0\u04c5\0\41\0\u04e6\0\41\0\143\0\u0507\0\u0528" +
					"\0\u0549";
	
	private static int[] zzUnpackRowMap() {
		int[] result = new int[49];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}
	
	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length() - 1;
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}
	
	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpacktrans();
	
	private static final String ZZ_TRANS_PACKED_0 =
			"\1\2\3\3\1\4\1\5\1\6\1\2\1\4\1\7" +
					"\1\10\1\2\1\11\1\12\1\13\1\14\1\2\1\15" +
					"\1\16\1\4\2\2\1\17\2\2\1\20\2\2\1\21" +
					"\2\2\1\22\1\4\1\2\6\0\1\2\2\0\5\2" +
					"\1\0\3\2\1\0\14\2\2\0\3\3\33\0\1\3" +
					"\42\0\2\5\1\0\2\5\1\23\15\5\1\24\15\5" +
					"\2\6\1\0\3\6\1\23\14\6\1\25\15\6\1\2" +
					"\6\0\1\2\2\0\3\2\1\12\1\13\1\0\1\2" +
					"\1\15\1\2\1\0\14\2\1\0\1\2\6\0\1\26" +
					"\2\0\2\2\1\27\2\2\1\0\3\2\1\0\14\2" +
					"\1\0\1\2\6\0\1\2\2\0\1\2\1\30\3\2" +
					"\1\0\1\31\2\2\1\0\1\2\1\31\12\2\1\0" +
					"\1\2\6\0\1\2\2\0\1\2\1\30\1\2\2\13" +
					"\1\0\1\31\2\2\1\0\1\2\1\31\12\2\1\0" +
					"\1\2\6\0\1\2\2\0\5\2\1\0\3\2\1\0" +
					"\5\2\1\32\6\2\1\0\1\2\6\0\1\2\2\0" +
					"\5\2\1\0\3\2\1\0\1\33\13\2\1\0\1\2" +
					"\6\0\1\2\2\0\5\2\1\0\3\2\1\0\1\34" +
					"\13\2\1\0\1\2\6\0\1\2\2\0\5\2\1\0" +
					"\3\2\1\0\11\2\1\35\2\2\1\0\1\2\6\0" +
					"\1\2\2\0\5\2\1\0\3\2\1\0\6\2\1\36" +
					"\5\2\1\0\1\2\3\3\3\0\1\2\2\0\5\2" +
					"\1\0\3\2\1\0\13\2\1\22\1\0\2\5\1\0" +
					"\36\5\2\6\1\0\36\6\1\26\6\37\1\40\2\37" +
					"\5\26\1\37\3\26\1\37\14\26\1\37\1\27\1\41" +
					"\2\0\3\41\1\27\2\41\5\27\1\41\3\27\1\41" +
					"\13\27\1\2\1\0\1\2\6\0\1\2\2\0\3\2" +
					"\2\42\1\0\3\2\1\0\14\2\1\0\1\2\6\0" +
					"\1\2\1\43\1\0\1\44\2\2\2\44\1\0\3\2" +
					"\1\0\14\2\1\0\1\2\6\0\1\2\2\0\5\2" +
					"\1\0\3\2\1\0\2\2\1\45\11\2\1\0\1\2" +
					"\6\0\1\2\2\0\5\2\1\0\2\2\1\46\1\0" +
					"\14\2\1\0\1\2\6\0\1\2\2\0\5\2\1\0" +
					"\3\2\1\0\4\2\1\47\7\2\1\0\1\2\6\0" +
					"\1\2\2\0\5\2\1\0\3\2\1\0\4\2\1\50" +
					"\7\2\1\0\1\2\6\0\1\2\2\0\5\2\1\0" +
					"\3\2\1\0\11\2\1\51\2\2\1\0\7\37\1\52" +
					"\31\37\1\26\6\37\1\40\2\37\2\26\1\53\2\26" +
					"\1\37\3\26\1\37\14\26\1\37\2\41\2\0\33\41" +
					"\2\0\1\2\6\0\1\2\2\0\3\2\2\42\1\0" +
					"\1\31\2\2\1\0\1\2\1\31\12\2\16\0\2\43" +
					"\22\0\1\2\6\0\1\2\2\0\3\2\2\44\1\0" +
					"\3\2\1\0\14\2\1\0\1\2\6\0\1\2\2\0" +
					"\5\2\1\0\3\2\1\0\3\2\1\54\10\2\1\0" +
					"\1\2\6\0\1\2\2\0\5\2\1\0\3\2\1\0" +
					"\7\2\1\51\4\2\1\0\1\2\6\0\1\2\2\0" +
					"\5\2\1\0\3\2\1\0\4\2\1\55\7\2\1\0" +
					"\1\2\6\0\1\2\2\0\5\2\1\0\3\2\1\0" +
					"\1\2\1\55\12\2\1\0\7\37\1\52\4\37\1\56" +
					"\24\37\1\2\6\0\1\2\2\0\5\2\1\0\3\2" +
					"\1\0\5\2\1\57\6\2\1\0\1\2\6\0\1\2" +
					"\2\0\5\2\1\0\3\2\1\0\3\2\1\60\10\2" +
					"\1\0\1\2\6\0\1\2\2\0\5\2\1\0\3\2" +
					"\1\0\10\2\1\61\3\2\1\0\1\2\6\0\1\2" +
					"\2\0\5\2\1\0\3\2\1\0\12\2\1\46\1\2" +
					"\1\0";
	
	private static int[] zzUnpacktrans() {
		int[] result = new int[1386];
		int offset = 0;
		offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}
	
	private static int zzUnpacktrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}
	
	
	/**
	 * Error code for "Unknown internal scanner error".
	 */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	/**
	 * Error code for "could not match input".
	 */
	private static final int ZZ_NO_MATCH = 1;
	/**
	 * Error code for "pushback value was too large".
	 */
	private static final int ZZ_PUSHBACK_2BIG = 2;
	
	/**
	 * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
	 * {@link #ZZ_PUSHBACK_2BIG} respectively.
	 */
	private static final String ZZ_ERROR_MSG[] = {
			"Unknown internal scanner error",
			"Error: could not match input",
			"Error: pushback value was too large"
	};
	
	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
	
	private static final String ZZ_ATTRIBUTE_PACKED_0 =
			"\1\0\2\1\1\11\2\1\1\11\4\1\1\11\6\1" +
					"\1\11\2\0\24\1\1\0\3\1\1\11\3\1";
	
	private static int[] zzUnpackAttribute() {
		int[] result = new int[49];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}
	
	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}
	
	/**
	 * Input device.
	 */
	private java.io.Reader zzReader;
	
	/**
	 * Current state of the DFA.
	 */
	private int zzState;
	
	/**
	 * Current lexical state.
	 */
	private int zzLexicalState = YYINITIAL;
	
	/**
	 * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
	 * string.
	 */
	private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];
	
	/**
	 * Text position at the last accepting state.
	 */
	private int zzMarkedPos;
	
	/**
	 * Current text position in the buffer.
	 */
	private int zzCurrentPos;
	
	/**
	 * Marks the beginning of the {@link #yytext()} string in the buffer.
	 */
	private int zzStartRead;
	
	/**
	 * Marks the last character in the buffer, that has been read from input.
	 */
	private int zzEndRead;
	
	/**
	 * Whether the scanner is at the end of file.
	 *
	 * @see #yyatEOF
	 */
	private boolean zzAtEOF;
	
	/**
	 * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
	 *
	 * <p>When a lead/high surrogate has been read from the input stream into the final
	 * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
	 */
	private int zzFinalHighSurrogate = 0;
	
	/**
	 * Number of newlines encountered up to the start of the matched text.
	 */
	private int yyline;
	
	/**
	 * Number of characters from the last newline up to the start of the matched text.
	 */
	private int yycolumn;
	
	/**
	 * Number of characters up to the start of the matched text.
	 */
	private long yychar;
	
	/**
	 * Whether the scanner is currently at the beginning of a line.
	 */
	@SuppressWarnings("unused")
	private boolean zzAtBOL = true;
	
	/**
	 * Whether the user-EOF-code has already been executed.
	 */
	@SuppressWarnings("unused")
	private boolean zzEOFDone;
	
	/* user code: */
	
	@Override
	public void setReader(Reader reader) {
		zzReader = reader;
	}
	
	@Override
	public void reset(Reader reader) {
		yyreset(reader);
	}
	
	@Override
	public int getState() {
		return yystate() + 1;
	}
	
	@Override
	public void setState(int state) {
		yybegin(state - 1);
	}
	
	@Override
	public int getDefaultState() {
		return YYINITIAL + 1;
	}
	
	@Override
	public int nextToken() throws IOException {
		return yylex();
	}
	
	@Override
	public int getLine() {
		return yyline;
	}
	
	@Override
	public int getColumn() {
		return yycolumn;
	}
	
	public JsonLexer() {
	
	}
	
	
	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	public JsonLexer(java.io.Reader in) {
		this.zzReader = in;
	}
	
	
	/**
	 * Returns the maximum size of the scanner buffer, which limits the size of tokens.
	 */
	private int zzMaxBufferLen() {
		return Integer.MAX_VALUE;
	}
	
	/**
	 * Whether the scanner buffer can grow to accommodate a larger token.
	 */
	private boolean zzCanGrow() {
		return true;
	}
	
	/**
	 * Translates raw input code points to DFA table row
	 */
	private static int zzCMap(int input) {
		int offset = input & 255;
		return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
	}
	
	/**
	 * Refills the input buffer.
	 *
	 * @return {@code false} iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		
		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead,
					zzBuffer, 0,
					zzEndRead - zzStartRead);
			
			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}
		
		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
			/* if not, and it can grow: blow it up */
			char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}
		
		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int numRead = zzReader.read(zzBuffer, zzEndRead, requested);
		
		/* not supposed to occur according to specification of java.io.Reader */
		if (numRead == 0) {
			if (requested == 0) {
				throw new java.io.EOFException("Scan buffer limit reached [" + zzBuffer.length + "]");
			} else {
				throw new java.io.IOException(
						"Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
			}
		}
		if (numRead > 0) {
			zzEndRead += numRead;
			if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
				if (numRead == requested) { // We requested too few chars to encode a full Unicode character
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				} else {                    // There is room in the buffer for at least one more char
					int c = zzReader.read();  // Expecting to read a paired low surrogate char
					if (c == -1) {
						return true;
					} else {
						zzBuffer[zzEndRead++] = (char) c;
					}
				}
			}
			/* potentially more input available */
			return false;
		}
		
		/* numRead < 0 ==> end of stream */
		return true;
	}
	
	
	/**
	 * Closes the input reader.
	 *
	 * @throws java.io.IOException if the reader could not be closed.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; // indicate end of file
		zzEndRead = zzStartRead; // invalidate buffer
		
		if (zzReader != null) {
			zzReader.close();
		}
	}
	
	
	/**
	 * Resets the scanner to read from a new input stream.
	 *
	 * <p>Does not close the old reader.
	 *
	 * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
	 * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
	 *
	 * <p>Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader The new input stream.
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzEOFDone = false;
		yyResetPosition();
		zzLexicalState = YYINITIAL;
		int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
		if (zzBuffer.length > initBufferSize) {
			zzBuffer = new char[initBufferSize];
		}
	}
	
	/**
	 * Resets the input position.
	 */
	private final void yyResetPosition() {
		zzAtBOL = true;
		zzAtEOF = false;
		zzCurrentPos = 0;
		zzMarkedPos = 0;
		zzStartRead = 0;
		zzEndRead = 0;
		zzFinalHighSurrogate = 0;
		yyline = 0;
		yycolumn = 0;
		yychar = 0L;
	}
	
	
	/**
	 * Returns whether the scanner has reached the end of the reader it reads from.
	 *
	 * @return whether the scanner has reached EOF.
	 */
	public final boolean yyatEOF() {
		return zzAtEOF;
	}
	
	
	/**
	 * Returns the current lexical state.
	 *
	 * @return the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}
	
	
	/**
	 * Enters a new lexical state.
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}
	
	
	/**
	 * Returns the text matched by the current regular expression.
	 *
	 * @return the matched text.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}
	
	
	/**
	 * Returns the character at the given position from the matched text.
	 *
	 * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
	 *
	 * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
	 * @return the character at {@code position}.
	 */
	public final char yycharat(int position) {
		return zzBuffer[zzStartRead + position];
	}
	
	
	/**
	 * How many characters were matched.
	 *
	 * @return the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}
	
	
	/**
	 * Reports an error that occurred while scanning.
	 *
	 * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen".
	 *
	 * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
	 * scanner etc.).
	 *
	 * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
	 *
	 * @param errorCode the code of the error message to display.
	 */
	private static void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}
		
		throw new Error(message);
	}
	
	
	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * <p>They will be read again by then next call of the scanning method.
	 *
	 * @param number the number of characters to be read again. This number must not be greater than
	 *               {@link #yylength()}.
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);
		
		zzMarkedPos -= number;
	}
	
	
	/**
	 * Resumes scanning until the next regular expression is matched, the end of input is encountered
	 * or an I/O-Error occurs.
	 *
	 * @return the next token.
	 * @throws java.io.IOException if any I/O-Error occurs.
	 */
	public int yylex() throws java.io.IOException {
		int zzInput;
		int zzAction;
		
		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		
		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;
		
		while (true) {
			zzMarkedPosL = zzMarkedPos;
			
			yychar += zzMarkedPosL - zzStartRead;
			
			boolean zzR = false;
			int zzCh;
			int zzCharCount;
			for (zzCurrentPosL = zzStartRead;
			     zzCurrentPosL < zzMarkedPosL;
			     zzCurrentPosL += zzCharCount) {
				zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
				zzCharCount = Character.charCount(zzCh);
				switch (zzCh) {
					case '\u000B':  // fall through
					case '\u000C':  // fall through
					case '\u0085':  // fall through
					case '\u2028':  // fall through
					case '\u2029':
						yyline++;
						yycolumn = 0;
						zzR = false;
						break;
					case '\r':
						yyline++;
						yycolumn = 0;
						zzR = true;
						break;
					case '\n':
						if (zzR)
							zzR = false;
						else {
							yyline++;
							yycolumn = 0;
						}
						break;
					default:
						zzR = false;
						yycolumn += zzCharCount;
				}
			}
			
			if (zzR) {
				// peek one character ahead if it is
				// (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek) yyline--;
			}
			zzAction = -1;
			
			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
			
			zzState = ZZ_LEXSTATE[zzLexicalState];
			
			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}
			
			
			zzForAction:
			{
				while (true) {
					
					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;
					
					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}
					
				}
			}
			
			// store back cached position
			zzMarkedPos = zzMarkedPosL;
			
			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				{
					return YYEOF;
				}
			} else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1: {
						return Identifier;
					}
					// fall through
					case 9:
						break;
					case 2: {
						return Plain;
					}
					// fall through
					case 10:
						break;
					case 3: {
						return Literal;
					}
					// fall through
					case 11:
						break;
					case 4: {
						return Separator;
					}
					// fall through
					case 12:
						break;
					case 5: {
						return Operator;
					}
					// fall through
					case 13:
						break;
					case 6: {
						return DocComment;
					}
					// fall through
					case 14:
						break;
					case 7: {
						return Comment;
					}
					// fall through
					case 15:
						break;
					case 8: {
						return Keyword;
					}
					// fall through
					case 16:
						break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}
	
	
}
